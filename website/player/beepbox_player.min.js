var beepbox=function(t){"use strict";
/*!
    Copyright (c) John Nesky and contributing authors.

    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this software and associated documentation files (the "Software"), to deal in
    the Software without restriction, including without limitation the rights to
    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
    of the Software, and to permit persons to whom the Software is furnished to do
    so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
    */class e{static t(){const t=new Float32Array(e.sineWaveLength+1);for(let n=0;n<e.sineWaveLength+1;n++)t[n]=Math.sin(n*Math.PI*2/e.sineWaveLength);return t}}function n(t){let e=0;for(let n=0;n<t.length;n++)e+=t[n];const n=e/t.length;for(let e=0;e<t.length;e++)t[e]-=n;return s(t),t.push(0),new Float32Array(t)}function s(t){let e=0;for(let n=0;n<t.length;n++){const s=t[n];t[n]=e,e+=s}}function i(t){return.5*Math.pow(.5,(e.pulseWidthRange-1-t)*e.pulseWidthStepPower)}function r(t,n,s){let i=e.chipNoises[t].samples;if(null==i){if(i=new Float32Array(e.chipNoiseLength+1),e.chipNoises[t].samples=i,0==t){let t=1;for(let n=0;n<e.chipNoiseLength;n++){i[n]=2*(1&t)-1;let e=t>>1;1==(t+e&1)&&(e+=16384),t=e}}else if(1==t)for(let t=0;t<e.chipNoiseLength;t++)i[t]=2*Math.random()-1;else if(2==t){let t=1;for(let n=0;n<e.chipNoiseLength;n++){i[n]=2*(1&t)-1;let e=t>>1;1==(t+e&1)&&(e+=32768),t=e}}else if(3==t){let t=1;for(let n=0;n<e.chipNoiseLength;n++){i[n]=2*(1&t)-1;let e=t>>1;1==(t+e&1)&&(e+=40),t=e}}else{if(4!=t)throw new Error("Unrecognized drum index: "+t);a(i,e.chipNoiseLength,10,11,1,1,0),a(i,e.chipNoiseLength,11,14,.6578,.6578,0),n(i,e.chipNoiseLength),s(i,1/Math.sqrt(e.chipNoiseLength))}i[e.chipNoiseLength]=i[0]}return i}function a(t,e,n,s,i,a,o){const h=0|Math.pow(2,n),l=Math.min(e>>1,0|Math.pow(2,s)),c=r(0,null,null);let u=0;for(let r=h;r<l;r++){let h=i+(a-i)*(Math.log2(r)-n)/(s-n),l=Math.pow(2,7*(h-1)+1)*h;l*=Math.pow(r/2048,o),u+=l,l*=c[r];const p=.61803398875*r*r*Math.PI*2;t[r]=Math.cos(p)*l,t[e-r]=Math.sin(p)*l}return u}function o(t,n,s){const i=e.rhythms[n].arpeggioPatterns[t-1];return null!=i?i[s%i.length]:s%t}function h(t){const e={};for(let n=0;n<t.length;n++){const s=t[n];s.index=n,e[s.name]=s}const n=t;return n.dictionary=e,n}function l(t){return 0!=(1024&t)}function c(t){return 0!=(2048&t)}function u(t){return 0!=(128&t)}function p(t){return 0!=(256&t)}function f(t){return 0!=(512&t)}function m(t){return 0!=(32&t)}function d(t){return 0!=(8&t)}function y(t){return 0!=(16&t)}function v(t){return 0!=(4&t)}function M(t){return 0!=(2&t)}function b(t){return 0!=(64&t)}function S(t){return 0!=(1&t)}e.scales=h([{name:"easy :)",realName:"pentatonic major",flags:[!0,!1,!0,!1,!0,!1,!1,!0,!1,!0,!1,!1]},{name:"easy :(",realName:"pentatonic minor",flags:[!0,!1,!1,!0,!1,!0,!1,!0,!1,!1,!0,!1]},{name:"island :)",realName:"ryukyu",flags:[!0,!1,!1,!1,!0,!0,!1,!0,!1,!1,!1,!0]},{name:"island :(",realName:"pelog selisir",flags:[!0,!0,!1,!0,!1,!1,!1,!0,!0,!1,!1,!1]},{name:"blues :)",realName:"blues major",flags:[!0,!1,!0,!0,!0,!1,!1,!0,!1,!0,!1,!1]},{name:"blues :(",realName:"blues",flags:[!0,!1,!1,!0,!1,!0,!0,!0,!1,!1,!0,!1]},{name:"normal :)",realName:"ionian",flags:[!0,!1,!0,!1,!0,!0,!1,!0,!1,!0,!1,!0]},{name:"normal :(",realName:"aeolian",flags:[!0,!1,!0,!0,!1,!0,!1,!0,!0,!1,!0,!1]},{name:"double harmonic :)",realName:"double harmonic major",flags:[!0,!0,!1,!1,!0,!0,!1,!0,!0,!1,!1,!0]},{name:"double harmonic :(",realName:"double harmonic minor",flags:[!0,!1,!0,!0,!1,!1,!0,!0,!0,!1,!1,!0]},{name:"strange",realName:"whole tone",flags:[!0,!1,!0,!1,!0,!1,!0,!1,!0,!1,!0,!1]},{name:"expert",realName:"chromatic",flags:[!0,!0,!0,!0,!0,!0,!0,!0,!0,!0,!0,!0]}]),e.keys=h([{name:"C",isWhiteKey:!0,basePitch:12},{name:"C♯",isWhiteKey:!1,basePitch:13},{name:"D",isWhiteKey:!0,basePitch:14},{name:"D♯",isWhiteKey:!1,basePitch:15},{name:"E",isWhiteKey:!0,basePitch:16},{name:"F",isWhiteKey:!0,basePitch:17},{name:"F♯",isWhiteKey:!1,basePitch:18},{name:"G",isWhiteKey:!0,basePitch:19},{name:"G♯",isWhiteKey:!1,basePitch:20},{name:"A",isWhiteKey:!0,basePitch:21},{name:"A♯",isWhiteKey:!1,basePitch:22},{name:"B",isWhiteKey:!0,basePitch:23}]),e.blackKeyNameParents=[-1,1,-1,1,-1,1,-1,-1,1,-1,1,-1],e.tempoMin=30,e.tempoMax=300,e.echoDelayRange=24,e.echoDelayStepTicks=4,e.echoSustainRange=8,e.echoShelfHz=4e3,e.echoShelfGain=Math.pow(2,-.5),e.reverbShelfHz=8e3,e.reverbShelfGain=Math.pow(2,-1.5),e.reverbRange=4,e.reverbDelayBufferSize=16384,e.reverbDelayBufferMask=e.reverbDelayBufferSize-1,e.beatsPerBarMin=3,e.beatsPerBarMax=16,e.barCountMin=1,e.barCountMax=24,e.instrumentCountMin=1,e.layeredInstrumentCountMax=1,e.patternInstrumentCountMax=24,e.partsPerBeat=24,e.ticksPerPart=2,e.rhythms=h([{name:"÷3 (triplets)",stepsPerBeat:3,ticksPerArpeggio:4,arpeggioPatterns:[[0],[0,0,1,1],[0,1,2,1]],roundUpThresholds:[5,12,18]},{name:"÷4 (standard)",stepsPerBeat:4,ticksPerArpeggio:3,arpeggioPatterns:[[0],[0,0,1,1],[0,1,2,1]],roundUpThresholds:[3,9,17,21]},{name:"÷6",stepsPerBeat:6,ticksPerArpeggio:4,arpeggioPatterns:[[0],[0,1],[0,1,2,1]],roundUpThresholds:null},{name:"÷8",stepsPerBeat:8,ticksPerArpeggio:3,arpeggioPatterns:[[0],[0,1],[0,1,2,1]],roundUpThresholds:null},{name:"freehand",stepsPerBeat:24,ticksPerArpeggio:3,arpeggioPatterns:[[0],[0,1],[0,1,2,1]],roundUpThresholds:null}]),e.instrumentTypeNames=["chip","FM","noise","spectrum","drumset","harmonics","PWM","Picked String","supersaw"],e.instrumentTypeHasSpecialInterval=[!0,!0,!1,!1,!1,!0,!1,!1,!1],e.chipBaseExpression=.03375,e.fmBaseExpression=.03,e.noiseBaseExpression=.19,e.spectrumBaseExpression=.3,e.drumsetBaseExpression=.45,e.harmonicsBaseExpression=.025,e.pwmBaseExpression=.04725,e.supersawBaseExpression=.061425,e.pickedStringBaseExpression=.025,e.distortionBaseVolume=.011,e.bitcrusherBaseVolume=.01,e.chipWaves=h([{name:"rounded",expression:.94,samples:n([0,.2,.4,.5,.6,.7,.8,.85,.9,.95,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,.95,.9,.85,.8,.7,.6,.5,.4,.2,0,-.2,-.4,-.5,-.6,-.7,-.8,-.85,-.9,-.95,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-.95,-.9,-.85,-.8,-.7,-.6,-.5,-.4,-.2])},{name:"triangle",expression:1,samples:n([1/15,.2,5/15,7/15,.6,11/15,13/15,1,1,13/15,11/15,.6,7/15,5/15,.2,1/15,-1/15,-.2,-5/15,-7/15,-.6,-11/15,-13/15,-1,-1,-13/15,-11/15,-.6,-7/15,-5/15,-.2,-1/15])},{name:"square",expression:.5,samples:n([1,-1])},{name:"1/4 pulse",expression:.5,samples:n([1,-1,-1,-1])},{name:"1/8 pulse",expression:.5,samples:n([1,-1,-1,-1,-1,-1,-1,-1])},{name:"sawtooth",expression:.65,samples:n([1/31,3/31,5/31,7/31,9/31,11/31,13/31,15/31,17/31,19/31,21/31,23/31,25/31,27/31,29/31,1,-1,-29/31,-27/31,-25/31,-23/31,-21/31,-19/31,-17/31,-15/31,-13/31,-11/31,-9/31,-7/31,-5/31,-3/31,-1/31])},{name:"double saw",expression:.5,samples:n([0,-.2,-.4,-.6,-.8,-1,1,-.8,-.6,-.4,-.2,1,.8,.6,.4,.2])},{name:"double pulse",expression:.4,samples:n([1,1,1,1,1,-1,-1,-1,1,1,1,1,-1,-1,-1,-1])},{name:"spiky",expression:.4,samples:n([1,-1,1,-1,1,0])}]),e.chipNoises=h([{name:"retro",expression:.25,basePitch:69,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"white",expression:1,basePitch:69,pitchFilterMult:8,isSoft:!0,samples:null},{name:"clang",expression:.4,basePitch:69,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"buzz",expression:.3,basePitch:69,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"hollow",expression:1.5,basePitch:96,pitchFilterMult:1,isSoft:!0,samples:null}]),e.filterFreqStep=1/4,e.filterFreqRange=34,e.filterFreqReferenceSetting=28,e.filterFreqReferenceHz=8e3,e.filterFreqMaxHz=e.filterFreqReferenceHz*Math.pow(2,e.filterFreqStep*(e.filterFreqRange-1-e.filterFreqReferenceSetting)),e.filterFreqMinHz=8,e.filterGainRange=15,e.filterGainCenter=7,e.filterGainStep=.5,e.filterMaxPoints=8,e.filterTypeNames=["low-pass","high-pass","peak"],e.fadeInRange=10,e.fadeOutTicks=[-24,-12,-6,-3,-1,6,12,24,48,72,96],e.fadeOutNeutral=4,e.drumsetFadeOutTicks=48,e.transitions=h([{name:"normal",isSeamless:!1,continues:!1,slides:!1,slideTicks:3,includeAdjacentPatterns:!1},{name:"interrupt",isSeamless:!0,continues:!1,slides:!1,slideTicks:3,includeAdjacentPatterns:!0},{name:"continue",isSeamless:!0,continues:!0,slides:!1,slideTicks:3,includeAdjacentPatterns:!0},{name:"slide",isSeamless:!0,continues:!1,slides:!0,slideTicks:3,includeAdjacentPatterns:!0},{name:"slide in pattern",isSeamless:!0,continues:!1,slides:!0,slideTicks:3,includeAdjacentPatterns:!1}]),e.vibratos=h([{name:"none",amplitude:0,periodsSeconds:[.14],delayTicks:0},{name:"light",amplitude:.15,periodsSeconds:[.14],delayTicks:0},{name:"delayed",amplitude:.3,periodsSeconds:[.14],delayTicks:37},{name:"heavy",amplitude:.45,periodsSeconds:[.14],delayTicks:0},{name:"shaky",amplitude:.1,periodsSeconds:[.11,.17798,.33],delayTicks:0}]),e.unisons=h([{name:"none",voices:1,spread:0,offset:0,expression:1.4,sign:1},{name:"shimmer",voices:2,spread:.018,offset:0,expression:.8,sign:1},{name:"hum",voices:2,spread:.045,offset:0,expression:1,sign:1},{name:"honky tonk",voices:2,spread:.09,offset:0,expression:1,sign:1},{name:"dissonant",voices:2,spread:.25,offset:0,expression:.9,sign:1},{name:"fifth",voices:2,spread:3.5,offset:3.5,expression:.9,sign:1},{name:"octave",voices:2,spread:6,offset:6,expression:.8,sign:1},{name:"bowed",voices:2,spread:.02,offset:0,expression:1,sign:-1},{name:"piano",voices:2,spread:.01,offset:0,expression:1,sign:.7}]),e.effectNames=["reverb","chorus","panning","distortion","bitcrusher","note filter","echo","pitch shift","detune","vibrato","transition type","chord type"],e.effectOrder=[10,11,7,8,9,5,3,4,2,1,6,0],e.noteSizeMax=3,e.volumeRange=8,e.volumeLogScale=-.5,e.panCenter=4,e.panMax=2*e.panCenter,e.panDelaySecondsMax=5e-4,e.chorusRange=4,e.chorusPeriodSeconds=2,e.chorusDelayRange=.0034,e.chorusDelayOffsets=[[1.51,2.1,3.35],[1.47,2.15,3.25]],e.chorusPhaseOffsets=[[0,2.1,4.2],[3.2,5.3,1]],e.chorusMaxDelay=e.chorusDelayRange*(1+e.chorusDelayOffsets[0].concat(e.chorusDelayOffsets[1]).reduce(((t,e)=>Math.max(t,e)))),e.chords=h([{name:"simultaneous",customInterval:!1,arpeggiates:!1,strumParts:0,singleTone:!1},{name:"strum",customInterval:!1,arpeggiates:!1,strumParts:1,singleTone:!1},{name:"arpeggio",customInterval:!1,arpeggiates:!0,strumParts:0,singleTone:!0},{name:"custom interval",customInterval:!0,arpeggiates:!1,strumParts:0,singleTone:!0}]),e.maxChordSize=4,e.operatorCount=4,e.maxPitchOrOperatorCount=Math.max(e.maxChordSize,e.operatorCount),e.algorithms=h([{name:"1←(2 3 4)",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2,3,4],[],[],[]]},{name:"1←(2 3←4)",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2,3],[],[4],[]]},{name:"1←2←(3 4)",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2],[3,4],[],[]]},{name:"1←(2 3)←4",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2,3],[4],[4],[]]},{name:"1←2←3←4",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2],[3],[4],[]]},{name:"1←3 2←4",carrierCount:2,associatedCarrier:[1,2,1,2],modulatedBy:[[3],[4],[],[]]},{name:"1 2←(3 4)",carrierCount:2,associatedCarrier:[1,2,2,2],modulatedBy:[[],[3,4],[],[]]},{name:"1 2←3←4",carrierCount:2,associatedCarrier:[1,2,2,2],modulatedBy:[[],[3],[4],[]]},{name:"(1 2)←3←4",carrierCount:2,associatedCarrier:[1,2,2,2],modulatedBy:[[3],[3],[4],[]]},{name:"(1 2)←(3 4)",carrierCount:2,associatedCarrier:[1,2,2,2],modulatedBy:[[3,4],[3,4],[],[]]},{name:"1 2 3←4",carrierCount:3,associatedCarrier:[1,2,3,3],modulatedBy:[[],[],[4],[]]},{name:"(1 2 3)←4",carrierCount:3,associatedCarrier:[1,2,3,3],modulatedBy:[[4],[4],[4],[]]},{name:"1 2 3 4",carrierCount:4,associatedCarrier:[1,2,3,4],modulatedBy:[[],[],[],[]]}]),e.operatorCarrierInterval=[0,.04,-.073,.091],e.operatorAmplitudeMax=15,e.operatorFrequencies=h([{name:"1×",mult:1,hzOffset:0,amplitudeSign:1},{name:"~1×",mult:1,hzOffset:1.5,amplitudeSign:-1},{name:"2×",mult:2,hzOffset:0,amplitudeSign:1},{name:"~2×",mult:2,hzOffset:-1.3,amplitudeSign:-1},{name:"3×",mult:3,hzOffset:0,amplitudeSign:1},{name:"4×",mult:4,hzOffset:0,amplitudeSign:1},{name:"5×",mult:5,hzOffset:0,amplitudeSign:1},{name:"6×",mult:6,hzOffset:0,amplitudeSign:1},{name:"7×",mult:7,hzOffset:0,amplitudeSign:1},{name:"8×",mult:8,hzOffset:0,amplitudeSign:1},{name:"9×",mult:9,hzOffset:0,amplitudeSign:1},{name:"11×",mult:11,hzOffset:0,amplitudeSign:1},{name:"13×",mult:13,hzOffset:0,amplitudeSign:1},{name:"16×",mult:16,hzOffset:0,amplitudeSign:1},{name:"20×",mult:20,hzOffset:0,amplitudeSign:1}]),e.envelopes=h([{name:"none",type:1,speed:0},{name:"note size",type:0,speed:0},{name:"punch",type:2,speed:0},{name:"flare 1",type:3,speed:32},{name:"flare 2",type:3,speed:8},{name:"flare 3",type:3,speed:2},{name:"twang 1",type:4,speed:32},{name:"twang 2",type:4,speed:8},{name:"twang 3",type:4,speed:2},{name:"swell 1",type:5,speed:32},{name:"swell 2",type:5,speed:8},{name:"swell 3",type:5,speed:2},{name:"tremolo1",type:6,speed:4},{name:"tremolo2",type:6,speed:2},{name:"tremolo3",type:6,speed:1},{name:"tremolo4",type:7,speed:4},{name:"tremolo5",type:7,speed:2},{name:"tremolo6",type:7,speed:1},{name:"decay 1",type:8,speed:10},{name:"decay 2",type:8,speed:7},{name:"decay 3",type:8,speed:4}]),e.feedbacks=h([{name:"1⟲",indices:[[1],[],[],[]]},{name:"2⟲",indices:[[],[2],[],[]]},{name:"3⟲",indices:[[],[],[3],[]]},{name:"4⟲",indices:[[],[],[],[4]]},{name:"1⟲ 2⟲",indices:[[1],[2],[],[]]},{name:"3⟲ 4⟲",indices:[[],[],[3],[4]]},{name:"1⟲ 2⟲ 3⟲",indices:[[1],[2],[3],[]]},{name:"2⟲ 3⟲ 4⟲",indices:[[],[2],[3],[4]]},{name:"1⟲ 2⟲ 3⟲ 4⟲",indices:[[1],[2],[3],[4]]},{name:"1→2",indices:[[],[1],[],[]]},{name:"1→3",indices:[[],[],[1],[]]},{name:"1→4",indices:[[],[],[],[1]]},{name:"2→3",indices:[[],[],[2],[]]},{name:"2→4",indices:[[],[],[],[2]]},{name:"3→4",indices:[[],[],[],[3]]},{name:"1→3 2→4",indices:[[],[],[1],[2]]},{name:"1→4 2→3",indices:[[],[],[2],[1]]},{name:"1→2→3→4",indices:[[],[1],[2],[3]]}]),e.chipNoiseLength=32768,e.spectrumNoiseLength=32768,e.spectrumBasePitch=24,e.spectrumControlPoints=30,e.spectrumControlPointsPerOctave=7,e.spectrumControlPointBits=3,e.spectrumMax=(1<<e.spectrumControlPointBits)-1,e.harmonicsControlPoints=28,e.harmonicsRendered=64,e.harmonicsRenderedForPickedString=256,e.harmonicsControlPointBits=3,e.harmonicsMax=(1<<e.harmonicsControlPointBits)-1,e.harmonicsWavelength=2048,e.pulseWidthRange=8,e.pulseWidthStepPower=.5,e.supersawVoiceCount=7,e.supersawDynamismMax=6,e.supersawSpreadMax=12,e.supersawShapeMax=6,e.pitchChannelCountMin=1,e.pitchChannelCountMax=6,e.noiseChannelCountMin=0,e.noiseChannelCountMax=2,e.noiseInterval=6,e.pitchesPerOctave=12,e.drumCount=12,e.pitchOctaves=7,e.maxPitch=e.pitchOctaves*e.pitchesPerOctave,e.maximumTonesPerChannel=2*e.maxChordSize,e.justIntonationSemitones=[.5,8/15,9/16,.6,5/8,2/3,32/45,3/4,.8,5/6,8/9,15/16,1,16/15,9/8,1.2,5/4,4/3,45/32,1.5,1.6,5/3,16/9,15/8,2].map((t=>Math.log2(t)*e.pitchesPerOctave)),e.pitchShiftRange=e.justIntonationSemitones.length,e.pitchShiftCenter=e.pitchShiftRange>>1,e.detuneCenter=9,e.detuneMax=2*e.detuneCenter,e.sineWaveLength=256,e.sineWaveMask=e.sineWaveLength-1,e.sineWave=e.t(),e.pickedStringDispersionCenterFreq=6e3,e.pickedStringDispersionFreqScale=.3,e.pickedStringDispersionFreqMult=4,e.pickedStringShelfHz=4e3,e.stringSustainRange=15,e.stringDecayRate=.12,e.enableAcousticSustain=!1,e.sustainTypeNames=["bright","acoustic"],e.distortionRange=8,e.bitcrusherFreqRange=14,e.bitcrusherOctaveStep=.5,e.bitcrusherQuantizationRange=8,e.maxEnvelopeCount=12,e.defaultAutomationRange=13,e.instrumentAutomationTargets=h([{name:"none",computeIndex:null,displayName:"none",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:null},{name:"noteVolume",computeIndex:0,displayName:"note volume",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:null},{name:"pulseWidth",computeIndex:2,displayName:"pulse width",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[6,8]},{name:"stringSustain",computeIndex:3,displayName:"sustain",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[7]},{name:"unison",computeIndex:4,displayName:"unison",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[0,5,7]},{name:"operatorFrequency",computeIndex:5,displayName:"fm# freq",interleave:!0,isFilter:!1,maxCount:e.operatorCount,effect:null,compatibleInstruments:[1]},{name:"operatorAmplitude",computeIndex:9,displayName:"fm# volume",interleave:!1,isFilter:!1,maxCount:e.operatorCount,effect:null,compatibleInstruments:[1]},{name:"feedbackAmplitude",computeIndex:13,displayName:"fm feedback",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[1]},{name:"pitchShift",computeIndex:14,displayName:"pitch shift",interleave:!1,isFilter:!1,maxCount:1,effect:7,compatibleInstruments:null},{name:"detune",computeIndex:15,displayName:"detune",interleave:!1,isFilter:!1,maxCount:1,effect:8,compatibleInstruments:null},{name:"vibratoDepth",computeIndex:16,displayName:"vibrato range",interleave:!1,isFilter:!1,maxCount:1,effect:9,compatibleInstruments:null},{name:"noteFilterAllFreqs",computeIndex:1,displayName:"n. filter freqs",interleave:!1,isFilter:!0,maxCount:1,effect:5,compatibleInstruments:null},{name:"noteFilterFreq",computeIndex:17,displayName:"n. filter # freq",interleave:!1,isFilter:!0,maxCount:e.filterMaxPoints,effect:5,compatibleInstruments:null},{name:"noteFilterGain",computeIndex:null,displayName:"n. filter # vol",interleave:!1,isFilter:!0,maxCount:e.filterMaxPoints,effect:5,compatibleInstruments:null},{name:"supersawDynamism",computeIndex:33,displayName:"dynamism",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[8]},{name:"supersawSpread",computeIndex:34,displayName:"spread",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[8]},{name:"supersawShape",computeIndex:35,displayName:"saw↔pulse",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[8]}]);var g=t&&t.i||function(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],s=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&s>=t.length&&(t=void 0),{value:t&&t[s++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},F=t&&t.o||function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var s,i,r=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(s=r.next()).done;)a.push(s.value)}catch(t){i={error:t}}finally{try{s&&!s.done&&(n=r.return)&&n.call(r)}finally{if(i)throw i.error}}return a},I=t&&t.h||function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(F(arguments[e]));return t};function D(t,e){var n,s,i,r,a,o;try{for(var h=g(e),l=h.next();!l.done;l=h.next()){var c=l.value;if(c instanceof Node)t.appendChild(c);else if("string"==typeof c)t.appendChild(document.createTextNode(c));else if("function"==typeof c)D(t,[c()]);else if(Array.isArray(c))D(t,c);else if(c&&"undefined"!=typeof Symbol&&"function"==typeof c[Symbol.iterator])D(t,I(c));else if(c&&c.constructor===Object&&t instanceof Element)try{for(var u=(i=void 0,g(Object.keys(c))),p=u.next();!p.done;p=u.next()){var f=p.value,m=c[f];if("class"===f)"string"==typeof m?t.setAttribute("class",m):Array.isArray(c)||m&&"undefined"!=typeof Symbol&&"function"==typeof m[Symbol.iterator]?t.setAttribute("class",I(m).join(" ")):console.warn("Invalid "+f+' value "'+m+'" on '+t.tagName+" element.");else if("style"===f)if(m&&m.constructor===Object)try{for(var d=(a=void 0,g(Object.keys(m))),y=d.next();!y.done;y=d.next()){var v=y.value;v in t.style?t.style[v]=m[v]:t.style.setProperty(v,m[v])}}catch(t){a={error:t}}finally{try{y&&!y.done&&(o=d.return)&&o.call(d)}finally{if(a)throw a.error}}else t.setAttribute(f,m);else"function"==typeof m?t[f]=m:"boolean"==typeof m?m?t.setAttribute(f,""):t.removeAttribute(f):t.setAttribute(f,m)}}catch(t){i={error:t}}finally{try{p&&!p.done&&(r=u.return)&&r.call(u)}finally{if(i)throw i.error}}else t.appendChild(document.createTextNode(c))}}catch(t){n={error:t}}finally{try{l&&!l.done&&(s=h.return)&&s.call(h)}finally{if(n)throw n.error}}return t}var P="http://www.w3.org/2000/svg";var w,x,k,T,L=t&&t.i||function(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],s=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&s>=t.length&&(t=void 0),{value:t&&t[s++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},O=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return document.createRange().createContextualFragment(t.join())},C=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];for(var n=document.createDocumentFragment(),s=(new DOMParser).parseFromString('<svg xmlns="http://www.w3.org/2000/svg">'+t.join()+"</svg>","image/svg+xml").documentElement;null!==s.firstChild;)document.importNode(s.firstChild,!0),n.appendChild(s.firstChild);return n},B=function(t){O[t]=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return D(document.createElement(t),e)}};try{for(var A=L("a abbr address area article aside audio b base bdi bdo blockquote br button canvas caption cite code col colgroup datalist dd del details dfn dialog div dl dt em embed fieldset figcaption figure footer form h1 h2 h3 h4 h5 h6 header hr i iframe img input ins kbd label legend li link main map mark menu menuitem meta meter nav noscript object ol optgroup option output p param picture pre progress q rp rt ruby s samp script section select small source span strong style sub summary sup table tbody td template textarea tfoot th thead time title tr track u ul var video wbr".split(" ")),R=A.next();!R.done;R=A.next()){B(R.value)}}catch(t){w={error:t}}finally{try{R&&!R.done&&(x=A.return)&&x.call(A)}finally{if(w)throw w.error}}var N=function(t){if(C[t]=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return D(document.createElementNS(P,t),e)},/-/.test(t)){var e=t.replace(/-/g,"_");C[e]=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return D(document.createElementNS(P,t),e)}}};try{for(var E=L("a altGlyph altGlyphDef altGlyphItem animate animateMotion animateTransform circle clipPath color-profile cursor defs desc discard ellipse feBlend feColorMatrix feComponentTransfer feComposite feConvolveMatrix feDiffuseLighting feDisplacementMap feDistantLight feDropShadow feFlood feFuncA feFuncB feFuncG feFuncR feGaussianBlur feImage feMerge feMergeNode feMorphology feOffset fePointLight feSpecularLighting feSpotLight feTile feTurbulence filter font font-face font-face-format font-face-name font-face-src font-face-uri foreignObject g glyph glyphRef hkern image line linearGradient marker mask metadata missing-glyph mpath path pattern polygon polyline radialGradient rect script set stop style svg switch symbol text textPath title tref tspan use view vkern".split(" ")),z=E.next();!z.done;z=E.next()){N(z.value)}}catch(t){k={error:t}}finally{try{z&&!z.done&&(T=E.return)&&T.call(E)}finally{if(k)throw k.error}}class V{static getChannelColor(t,e){return e<t.pitchChannelCount?V.pitchChannels[e%V.pitchChannels.length]:V.noiseChannels[(e-t.pitchChannelCount)%V.noiseChannels.length]}static setTheme(t){let e=this.themes[t];null==e&&(e=this.themes["dark classic"]),this.l.textContent=e;const n=document.querySelector("meta[name='theme-color']");null!=n&&n.setAttribute("content",getComputedStyle(document.documentElement).getPropertyValue("--ui-widget-background"))}}function W(t,e){for(let n=0;n<t.length;n++)t[n]*=e}function G(t){if(!function(t){return!(!t||t&t-1)}(t))throw new Error("FFT array length must be a power of 2.");return Math.round(Math.log(t)/Math.log(2))}function j(t,e){const n=G(e);if(e<4)throw new Error("FFT array length must be at least 4.");for(let s=n-1;s>=2;s--){const n=1<<s,i=n>>1,r=n<<1,a=2*Math.PI/r,o=Math.cos(a),h=Math.sin(a),l=2*o;for(let s=0;s<e;s+=r){const e=s,r=e+i,a=e+n,c=a+i,u=a+n,p=t[e],f=t[a];t[e]=p+f,t[r]*=2,t[a]=p-f,t[c]*=2;let m=o,d=-h,y=1,v=0;for(let n=1;n<i;n++){const s=e+n,i=a-n,r=a+n,o=u-n,h=t[s],c=t[i],p=t[r],f=t[o],M=h-c,b=p+f;t[s]=h+c,t[i]=f-p,t[r]=M*m-b*d,t[o]=b*m+M*d;const S=l*m-y,g=l*d-v;y=m,v=d,m=S,d=g}}}for(let n=0;n<e;n+=4){const e=n+1,s=n+2,i=n+3,r=t[n],a=2*t[e],o=t[s],h=2*t[i],l=r+o,c=r-o;t[n]=l+a,t[e]=l-a,t[s]=c+h,t[i]=c-h}!function(t,e){const n=32-G(e);for(let s=0;s<e;s++){let e;if(e=s>>1&1431655765|(1431655765&s)<<1,e=e>>2&858993459|(858993459&e)<<2,e=e>>4&252645135|(252645135&e)<<4,e=e>>8&16711935|(16711935&e)<<8,e=e>>16&65535|(65535&e)<<16,e>>>=n,e>s){let n=t[s];t[s]=t[e],t[e]=n}}}(t,e)}V.themes={"dark classic":"\n\t\t\t:root {\n\t\t\t\t--page-margin: black;\n\t\t\t\t--editor-background: black;\n\t\t\t\t--hover-preview: white;\n\t\t\t\t--playhead: white;\n\t\t\t\t--primary-text: white;\n\t\t\t\t--secondary-text: #999;\n\t\t\t\t--inverted-text: black;\n\t\t\t\t--text-selection: rgba(119,68,255,0.99);\n\t\t\t\t--box-selection-fill: rgba(255,255,255,0.2);\n\t\t\t\t--loop-accent: #74f;\n\t\t\t\t--link-accent: #98f;\n\t\t\t\t--ui-widget-background: #444;\n\t\t\t\t--ui-widget-focus: #777;\n\t\t\t\t--pitch-background: #444;\n\t\t\t\t--tonic: #864;\n\t\t\t\t--fifth-note: #468;\n\t\t\t\t--white-piano-key: #bbb;\n\t\t\t\t--black-piano-key: #444;\n\t\t\t\t--pitch1-secondary-channel: #0099A1;\n\t\t\t\t--pitch1-primary-channel:   #25F3FF;\n\t\t\t\t--pitch1-secondary-note:    #00BDC7;\n\t\t\t\t--pitch1-primary-note:      #92F9FF;\n\t\t\t\t--pitch2-secondary-channel: #A1A100;\n\t\t\t\t--pitch2-primary-channel:   #FFFF25;\n\t\t\t\t--pitch2-secondary-note:    #C7C700;\n\t\t\t\t--pitch2-primary-note:      #FFFF92;\n\t\t\t\t--pitch3-secondary-channel: #C75000;\n\t\t\t\t--pitch3-primary-channel:   #FF9752;\n\t\t\t\t--pitch3-secondary-note:    #FF771C;\n\t\t\t\t--pitch3-primary-note:      #FFCDAB;\n\t\t\t\t--pitch4-secondary-channel: #00A100;\n\t\t\t\t--pitch4-primary-channel:   #50FF50;\n\t\t\t\t--pitch4-secondary-note:    #00C700;\n\t\t\t\t--pitch4-primary-note:      #A0FFA0;\n\t\t\t\t--pitch5-secondary-channel: #D020D0;\n\t\t\t\t--pitch5-primary-channel:   #FF90FF;\n\t\t\t\t--pitch5-secondary-note:    #E040E0;\n\t\t\t\t--pitch5-primary-note:      #FFC0FF;\n\t\t\t\t--pitch6-secondary-channel: #7777B0;\n\t\t\t\t--pitch6-primary-channel:   #A0A0FF;\n\t\t\t\t--pitch6-secondary-note:    #8888D0;\n\t\t\t\t--pitch6-primary-note:      #D0D0FF;\n\t\t\t\t--pitch7-secondary-channel: #8AA100;\n\t\t\t\t--pitch7-primary-channel:   #DEFF25;\n\t\t\t\t--pitch7-secondary-note:    #AAC700;\n\t\t\t\t--pitch7-primary-note:      #E6FF92;\n\t\t\t\t--pitch8-secondary-channel: #DF0019;\n\t\t\t\t--pitch8-primary-channel:   #FF98A4;\n\t\t\t\t--pitch8-secondary-note:    #FF4E63;\n\t\t\t\t--pitch8-primary-note:      #FFB2BB;\n\t\t\t\t--pitch9-secondary-channel: #00A170;\n\t\t\t\t--pitch9-primary-channel:   #50FFC9;\n\t\t\t\t--pitch9-secondary-note:    #00C78A;\n\t\t\t\t--pitch9-primary-note:      #83FFD9;\n\t\t\t\t--pitch10-secondary-channel:#A11FFF;\n\t\t\t\t--pitch10-primary-channel:  #CE8BFF;\n\t\t\t\t--pitch10-secondary-note:   #B757FF;\n\t\t\t\t--pitch10-primary-note:     #DFACFF;\n\t\t\t\t--noise1-secondary-channel: #6F6F6F;\n\t\t\t\t--noise1-primary-channel:   #AAAAAA;\n\t\t\t\t--noise1-secondary-note:    #A7A7A7;\n\t\t\t\t--noise1-primary-note:      #E0E0E0;\n\t\t\t\t--noise2-secondary-channel: #996633;\n\t\t\t\t--noise2-primary-channel:   #DDAA77;\n\t\t\t\t--noise2-secondary-note:    #CC9966;\n\t\t\t\t--noise2-primary-note:      #F0D0BB;\n\t\t\t\t--noise3-secondary-channel: #4A6D8F;\n\t\t\t\t--noise3-primary-channel:   #77AADD;\n\t\t\t\t--noise3-secondary-note:    #6F9FCF;\n\t\t\t\t--noise3-primary-note:      #BBD7FF;\n\t\t\t\t--noise4-secondary-channel: #7A4F9A;\n\t\t\t\t--noise4-primary-channel:   #AF82D2;\n\t\t\t\t--noise4-secondary-note:    #9E71C1;\n\t\t\t\t--noise4-primary-note:      #D4C1EA;\n\t\t\t\t--noise5-secondary-channel: #607837;\n\t\t\t\t--noise5-primary-channel:   #A2BB77;\n\t\t\t\t--noise5-secondary-note:    #91AA66;\n\t\t\t\t--noise5-primary-note:      #C5E2B2;\n\t\t\t}\n\t\t","light classic":"\n\t\t\t:root {\n\t\t\t\t-webkit-text-stroke-width: 0.5px;\n\t\t\t\t--page-margin: #685d88;\n\t\t\t\t--editor-background: white;\n\t\t\t\t--hover-preview: black;\n\t\t\t\t--playhead: rgba(0,0,0,0.5);\n\t\t\t\t--primary-text: black;\n\t\t\t\t--secondary-text: #777;\n\t\t\t\t--inverted-text: white;\n\t\t\t\t--text-selection: rgba(200,170,255,0.99);\n\t\t\t\t--box-selection-fill: rgba(0,0,0,0.1);\n\t\t\t\t--loop-accent: #98f;\n\t\t\t\t--link-accent: #74f;\n\t\t\t\t--ui-widget-background: #ececec;\n\t\t\t\t--ui-widget-focus: #eee;\n\t\t\t\t--pitch-background: #ececec;\n\t\t\t\t--tonic: #f0d6b6;\n\t\t\t\t--fifth-note: #bbddf0;\n\t\t\t\t--white-piano-key: #eee;\n\t\t\t\t--black-piano-key: #666;\n\t\t\t\t--pitch1-secondary-channel: #6CD9ED;\n\t\t\t\t--pitch1-primary-channel:   #00A0BD;\n\t\t\t\t--pitch1-secondary-note:    #34C2DC;\n\t\t\t\t--pitch1-primary-note:      #00758A;\n\t\t\t\t--pitch2-secondary-channel: #E3C941;\n\t\t\t\t--pitch2-primary-channel:   #B49700;\n\t\t\t\t--pitch2-secondary-note:    #D1B628;\n\t\t\t\t--pitch2-primary-note:      #836E00;\n\t\t\t\t--pitch3-secondary-channel: #FF9D61;\n\t\t\t\t--pitch3-primary-channel:   #E14E00;\n\t\t\t\t--pitch3-secondary-note:    #F67D3C;\n\t\t\t\t--pitch3-primary-note:      #B64000;\n\t\t\t\t--pitch4-secondary-channel: #4BE24B;\n\t\t\t\t--pitch4-primary-channel:   #00A800;\n\t\t\t\t--pitch4-secondary-note:    #2DC82D;\n\t\t\t\t--pitch4-primary-note:      #008000;\n\t\t\t\t--pitch5-secondary-channel: #FF90FF;\n\t\t\t\t--pitch5-primary-channel:   #E12EDF;\n\t\t\t\t--pitch5-secondary-note:    #EC6EEC;\n\t\t\t\t--pitch5-primary-note:      #A600A5;\n\t\t\t\t--pitch6-secondary-channel: #B5B5FE;\n\t\t\t\t--pitch6-primary-channel:   #6969FD;\n\t\t\t\t--pitch6-secondary-note:    #9393FE;\n\t\t\t\t--pitch6-primary-note:      #4A4AD7;\n\t\t\t\t--pitch7-secondary-channel: #C2D848;\n\t\t\t\t--pitch7-primary-channel:   #8EA800;\n\t\t\t\t--pitch7-secondary-note:    #B0C82D;\n\t\t\t\t--pitch7-primary-note:      #6C8000;\n\t\t\t\t--pitch8-secondary-channel: #FF90A4;\n\t\t\t\t--pitch8-primary-channel:   #E12E4D;\n\t\t\t\t--pitch8-secondary-note:    #EC6E85;\n\t\t\t\t--pitch8-primary-note:      #A6001D;\n\t\t\t\t--pitch9-secondary-channel: #41E3B5;\n\t\t\t\t--pitch9-primary-channel:   #00B481;\n\t\t\t\t--pitch9-secondary-note:    #28D1A1;\n\t\t\t\t--pitch9-primary-note:      #00835E;\n\t\t\t\t--pitch10-secondary-channel:#CA77FF;\n\t\t\t\t--pitch10-primary-channel:  #9609FF;\n\t\t\t\t--pitch10-secondary-note:   #B54FFF;\n\t\t\t\t--pitch10-primary-note:     #8400E3;\n\t\t\t\t--noise1-secondary-channel: #C1C1C1;\n\t\t\t\t--noise1-primary-channel:   #898989;\n\t\t\t\t--noise1-secondary-note:    #ADADAD;\n\t\t\t\t--noise1-primary-note:      #6C6C6C;\n\t\t\t\t--noise2-secondary-channel: #E8BB8C;\n\t\t\t\t--noise2-primary-channel:   #BD7D3A;\n\t\t\t\t--noise2-secondary-note:    #D1A374;\n\t\t\t\t--noise2-primary-note:      #836342;\n\t\t\t\t--noise3-secondary-channel: #9BC4EB;\n\t\t\t\t--noise3-primary-channel:   #4481BE;\n\t\t\t\t--noise3-secondary-note:    #7CA7D3;\n\t\t\t\t--noise3-primary-note:      #476685;\n\t\t\t\t--noise4-secondary-channel: #C5A5E0;\n\t\t\t\t--noise4-primary-channel:   #8553AE;\n\t\t\t\t--noise4-secondary-note:    #B290CC;\n\t\t\t\t--noise4-primary-note:      #684F7D;\n\t\t\t\t--noise5-secondary-channel: #B8CE93;\n\t\t\t\t--noise5-primary-channel:   #87A74F;\n\t\t\t\t--noise5-secondary-note:    #ABC183;\n\t\t\t\t--noise5-primary-note:      #68784C;\n\t\t\t}\n\t\t\t\n\t\t\t.beepboxEditor button, .beepboxEditor select {\n\t\t\t\tbox-shadow: inset 0 0 0 1px var(--secondary-text);\n\t\t\t}\n\t\t"},V.pageMargin="var(--page-margin)",V.editorBackground="var(--editor-background)",V.hoverPreview="var(--hover-preview)",V.playhead="var(--playhead)",V.primaryText="var(--primary-text)",V.secondaryText="var(--secondary-text)",V.invertedText="var(--inverted-text)",V.textSelection="var(--text-selection)",V.boxSelectionFill="var(--box-selection-fill)",V.loopAccent="var(--loop-accent)",V.linkAccent="var(--link-accent)",V.uiWidgetBackground="var(--ui-widget-background)",V.uiWidgetFocus="var(--ui-widget-focus)",V.pitchBackground="var(--pitch-background)",V.tonic="var(--tonic)",V.fifthNote="var(--fifth-note)",V.whitePianoKey="var(--white-piano-key)",V.blackPianoKey="var(--black-piano-key)",V.pitchChannels=h([{name:"pitch1",secondaryChannel:"var(--pitch1-secondary-channel)",primaryChannel:"var(--pitch1-primary-channel)",secondaryNote:"var(--pitch1-secondary-note)",primaryNote:"var(--pitch1-primary-note)"},{name:"pitch2",secondaryChannel:"var(--pitch2-secondary-channel)",primaryChannel:"var(--pitch2-primary-channel)",secondaryNote:"var(--pitch2-secondary-note)",primaryNote:"var(--pitch2-primary-note)"},{name:"pitch3",secondaryChannel:"var(--pitch3-secondary-channel)",primaryChannel:"var(--pitch3-primary-channel)",secondaryNote:"var(--pitch3-secondary-note)",primaryNote:"var(--pitch3-primary-note)"},{name:"pitch4",secondaryChannel:"var(--pitch4-secondary-channel)",primaryChannel:"var(--pitch4-primary-channel)",secondaryNote:"var(--pitch4-secondary-note)",primaryNote:"var(--pitch4-primary-note)"},{name:"pitch5",secondaryChannel:"var(--pitch5-secondary-channel)",primaryChannel:"var(--pitch5-primary-channel)",secondaryNote:"var(--pitch5-secondary-note)",primaryNote:"var(--pitch5-primary-note)"},{name:"pitch6",secondaryChannel:"var(--pitch6-secondary-channel)",primaryChannel:"var(--pitch6-primary-channel)",secondaryNote:"var(--pitch6-secondary-note)",primaryNote:"var(--pitch6-primary-note)"},{name:"pitch7",secondaryChannel:"var(--pitch7-secondary-channel)",primaryChannel:"var(--pitch7-primary-channel)",secondaryNote:"var(--pitch7-secondary-note)",primaryNote:"var(--pitch7-primary-note)"},{name:"pitch8",secondaryChannel:"var(--pitch8-secondary-channel)",primaryChannel:"var(--pitch8-primary-channel)",secondaryNote:"var(--pitch8-secondary-note)",primaryNote:"var(--pitch8-primary-note)"},{name:"pitch9",secondaryChannel:"var(--pitch9-secondary-channel)",primaryChannel:"var(--pitch9-primary-channel)",secondaryNote:"var(--pitch9-secondary-note)",primaryNote:"var(--pitch9-primary-note)"},{name:"pitch10",secondaryChannel:"var(--pitch10-secondary-channel)",primaryChannel:"var(--pitch10-primary-channel)",secondaryNote:"var(--pitch10-secondary-note)",primaryNote:"var(--pitch10-primary-note)"}]),V.noiseChannels=h([{name:"noise1",secondaryChannel:"var(--noise1-secondary-channel)",primaryChannel:"var(--noise1-primary-channel)",secondaryNote:"var(--noise1-secondary-note)",primaryNote:"var(--noise1-primary-note)"},{name:"noise2",secondaryChannel:"var(--noise2-secondary-channel)",primaryChannel:"var(--noise2-primary-channel)",secondaryNote:"var(--noise2-secondary-note)",primaryNote:"var(--noise2-primary-note)"},{name:"noise3",secondaryChannel:"var(--noise3-secondary-channel)",primaryChannel:"var(--noise3-primary-channel)",secondaryNote:"var(--noise3-secondary-note)",primaryNote:"var(--noise3-primary-note)"},{name:"noise4",secondaryChannel:"var(--noise4-secondary-channel)",primaryChannel:"var(--noise4-primary-channel)",secondaryNote:"var(--noise4-secondary-note)",primaryNote:"var(--noise4-primary-note)"},{name:"noise5",secondaryChannel:"var(--noise5-secondary-channel)",primaryChannel:"var(--noise5-primary-channel)",secondaryNote:"var(--noise5-secondary-note)",primaryNote:"var(--noise5-primary-note)"}]),V.l=document.head.appendChild(O.style({type:"text/css"}));class q{constructor(){this.u=1,this.p=[void 0],this.m=0,this.v=0,this.M=0}pushFront(t){this.M>=this.u&&this.S(),this.v=this.v-1&this.m,this.p[this.v]=t,this.M++}pushBack(t){this.M>=this.u&&this.S(),this.p[this.v+this.M&this.m]=t,this.M++}popFront(){if(this.M<=0)throw new Error("No elements left to pop.");const t=this.p[this.v];return this.p[this.v]=void 0,this.v=this.v+1&this.m,this.M--,t}popBack(){if(this.M<=0)throw new Error("No elements left to pop.");this.M--;const t=this.v+this.M&this.m,e=this.p[t];return this.p[t]=void 0,e}peakFront(){if(this.M<=0)throw new Error("No elements left to pop.");return this.p[this.v]}peakBack(){if(this.M<=0)throw new Error("No elements left to pop.");return this.p[this.v+this.M-1&this.m]}count(){return this.M}set(t,e){if(t<0||t>=this.M)throw new Error("Invalid index");this.p[this.v+t&this.m]=e}get(t){if(t<0||t>=this.M)throw new Error("Invalid index");return this.p[this.v+t&this.m]}remove(t){if(t<0||t>=this.M)throw new Error("Invalid index");if(t<=this.M>>1){for(;t>0;)this.set(t,this.get(t-1)),t--;this.popFront()}else{for(t++;t<this.M;)this.set(t-1,this.get(t)),t++;this.popBack()}}S(){if(this.u>=1073741824)throw new Error("Capacity too big.");this.u=this.u<<1;const t=this.p,e=new Array(this.u),n=0|this.M,s=0|this.v;for(let i=0;i<n;i++)e[i]=t[s+i&this.m];for(let t=n;t<this.u;t++)e[t]=void 0;this.v=0,this.p=e,this.m=this.u-1}}class ${constructor(){this.a=[1],this.b=[1],this.order=0}linearGain0thOrder(t){this.b[0]=t,this.order=0}lowPass1stOrderButterworth(t){const e=1/Math.tan(.5*t),n=1+e;this.a[1]=(1-e)/n,this.b[1]=this.b[0]=1/n,this.order=1}lowPass1stOrderSimplified(t){const e=2*Math.sin(.5*t);this.a[1]=e-1,this.b[0]=e,this.b[1]=0,this.order=1}highPass1stOrderButterworth(t){const e=1/Math.tan(.5*t),n=1+e;this.a[1]=(1-e)/n,this.b[0]=e/n,this.b[1]=-e/n,this.order=1}highShelf1stOrder(t,e){const n=Math.tan(.5*t),s=Math.sqrt(e),i=(n*s-1)/(n*s+1);this.a[1]=i/1,this.b[0]=(1+i+e*(1-i))/2,this.b[1]=(1+i-e*(1-i))/2,this.order=1}allPass1stOrderInvertPhaseAbove(t){const e=(Math.sin(t)-1)/Math.cos(t);this.a[1]=e,this.b[0]=e,this.b[1]=1,this.order=1}allPass1stOrderFractionalDelay(t){const e=(1-t)/(1+t);this.a[1]=e,this.b[0]=e,this.b[1]=1,this.order=1}lowPass2ndOrderButterworth(t,e){const n=Math.sin(t)/(2*e),s=Math.cos(t),i=1+n;this.a[1]=-2*s/i,this.a[2]=(1-n)/i,this.b[2]=this.b[0]=(1-s)/(2*i),this.b[1]=(1-s)/i,this.order=2}lowPass2ndOrderSimplified(t,e){const n=2*Math.sin(t/2),s=1-1/(2*e),i=s+s/(1-n);this.a[1]=2*n+(n-1)*n*i-2,this.a[2]=(n-1)*(n-n*i-1),this.b[0]=n*n,this.b[1]=0,this.b[2]=0,this.order=2}highPass2ndOrderButterworth(t,e){const n=Math.sin(t)/(2*e),s=Math.cos(t),i=1+n;this.a[1]=-2*s/i,this.a[2]=(1-n)/i,this.b[2]=this.b[0]=(1+s)/(2*i),this.b[1]=-(1+s)/i,this.order=2}highShelf2ndOrder(t,e,n){const s=Math.sqrt(e),i=Math.cos(t),r=s+1,a=s-1,o=.5*Math.sin(t)*Math.sqrt(r/s*(1/n-1)+2),h=2*Math.sqrt(s)*o,l=r-a*i+h;this.a[1]=2*(a-r*i)/l,this.a[2]=(r-a*i-h)/l,this.b[0]=s*(r+a*i+h)/l,this.b[1]=-2*s*(a+r*i)/l,this.b[2]=s*(r+a*i-h)/l,this.order=2}peak2ndOrder(t,e,n){const s=Math.sqrt(e),i=n*t/(s>=1?s:1/s),r=Math.tan(.5*i),a=1+r/s;this.b[0]=(1+r*s)/a,this.b[1]=this.a[1]=-2*Math.cos(t)/a,this.b[2]=(1-r*s)/a,this.a[2]=(1-r/s)/a,this.order=2}}class U{constructor(){this.real=0,this.imag=0,this.denom=1}analyze(t,e){this.analyzeComplex(t,Math.cos(e),Math.sin(e))}analyzeComplex(t,e,n){const s=t.a,i=t.b,r=e,a=-n;let o=i[0]+i[1]*r,h=i[1]*a,l=1+s[1]*r,c=s[1]*a,u=r,p=a;for(let e=2;e<=t.order;e++){const t=u*a+p*r;u=u*r-p*a,p=t,o+=i[e]*u,h+=i[e]*p,l+=s[e]*u,c+=s[e]*p}this.denom=l*l+c*c,this.real=o*l+h*c,this.imag=h*l-o*c}magnitude(){return Math.sqrt(this.real*this.real+this.imag*this.imag)/this.denom}angle(){return Math.atan2(this.imag,this.real)}}class J{constructor(){this.a1=0,this.a2=0,this.b0=1,this.b1=0,this.b2=0,this.a1Delta=0,this.a2Delta=0,this.b0Delta=0,this.b1Delta=0,this.b2Delta=0,this.output1=0,this.output2=0,this.useMultiplicativeInputCoefficients=!1}resetOutput(){this.output1=0,this.output2=0}loadCoefficientsWithGradient(t,e,n,s){if(2!=t.order||2!=e.order)throw new Error;this.a1=t.a[1],this.a2=t.a[2],this.b0=t.b[0],this.b1=t.b[1],this.b2=t.b[2],this.a1Delta=(e.a[1]-t.a[1])*n,this.a2Delta=(e.a[2]-t.a[2])*n,s?(this.b0Delta=Math.pow(e.b[0]/t.b[0],n),this.b1Delta=Math.pow(e.b[1]/t.b[1],n),this.b2Delta=Math.pow(e.b[2]/t.b[2],n)):(this.b0Delta=(e.b[0]-t.b[0])*n,this.b1Delta=(e.b[1]-t.b[1])*n,this.b2Delta=(e.b[2]-t.b[2])*n),this.useMultiplicativeInputCoefficients=s}}function H(t){return 2*Math.atan(.5*t)}const K=1e-24;function Q(t,e,n){return n<=(e-=1)?n>=t?n:t:e}function _(t,e,n){if(t<=n&&n<=e)return n;throw new Error(`Value ${n} not in range [${t}, ${e}]`)}const X=[48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,45,95],Y=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,62,0,0,1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,0,0,0,0,63,0,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,0,0,0,0,0];class Z{constructor(t,e,n){this.g=[],this.I=0;for(let s=e;s<n;s++){const e=Y[t.charCodeAt(s)];this.g.push(e>>5&1),this.g.push(e>>4&1),this.g.push(e>>3&1),this.g.push(e>>2&1),this.g.push(e>>1&1),this.g.push(1&e)}}read(t){let e=0;for(;t>0;)e<<=1,e+=this.g[this.I++],t--;return e}readLongTail(t,e){let n=t,s=e;for(;this.g[this.I++];)n+=1<<s,s++;for(;s>0;)s--,this.g[this.I++]&&(n+=1<<s);return n}readPartDuration(){return this.readLongTail(1,3)}readLegacyPartDuration(){return this.readLongTail(1,2)}readPinCount(){return this.readLongTail(1,0)}readPitchInterval(){return this.read(1)?-this.readLongTail(1,3):this.readLongTail(1,3)}}class tt{constructor(){this.P=0,this.g=[]}clear(){this.P=0}write(t,e){for(t--;t>=0;)this.g[this.P++]=e>>>t&1,t--}writeLongTail(t,e,n){if(n<t)throw new Error("value out of bounds");n-=t;let s=e;for(;n>=1<<s;)this.g[this.P++]=1,n-=1<<s,s++;for(this.g[this.P++]=0;s>0;)s--,this.g[this.P++]=n>>>s&1}writePartDuration(t){this.writeLongTail(1,3,t)}writePinCount(t){this.writeLongTail(1,0,t)}writePitchInterval(t){t<0?(this.write(1,1),this.writeLongTail(1,3,-t)):(this.write(1,0),this.writeLongTail(1,3,t))}concat(t){for(let e=0;e<t.P;e++)this.g[this.P++]=t.g[e]}encodeBase64(t){for(let e=0;e<this.P;e+=6){const n=this.g[e]<<5|this.g[e+1]<<4|this.g[e+2]<<3|this.g[e+3]<<2|this.g[e+4]<<1|this.g[e+5];t.push(X[n])}return t}lengthBase64(){return Math.ceil(this.P/6)}}function et(t,e,n){return{interval:t,time:e,size:n}}class nt{constructor(t,e,n,s,i=!1){this.pitches=[t],this.pins=[et(0,0,s),et(0,n-e,i?0:s)],this.start=e,this.end=n,this.continuesLastPattern=!1}pickMainInterval(){let t=0,e=0;for(let n=1;n<this.pins.length;n++){const s=this.pins[n-1],i=this.pins[n];if(s.interval==i.interval){const n=i.time-s.time;t<n&&(t=n,e=s.interval)}}if(0==t){let t=0;for(let n=0;n<this.pins.length;n++){const s=this.pins[n];t<s.size&&(t=s.size,e=s.interval)}}return e}clone(){const t=new nt(-1,this.start,this.end,e.noteSizeMax);t.pitches=this.pitches.concat(),t.pins=[];for(const e of this.pins)t.pins.push(et(e.interval,e.time,e.size));return t.continuesLastPattern=this.continuesLastPattern,t}getEndPinIndex(t){let e;for(e=1;e<this.pins.length-1&&!(this.pins[e].time+this.start>t);e++);return e}}class st{constructor(){this.notes=[],this.instruments=[0]}cloneNotes(){const t=[];for(const e of this.notes)t.push(e.clone());return t}reset(){this.notes.length=0,this.instruments[0]=0,this.instruments.length=1}toJsonObject(t){const n=[];for(const s of this.notes){const i=[];for(const n of s.pins)i.push({tick:(n.time+s.start)*e.rhythms[t.rhythm].stepsPerBeat/e.partsPerBeat,pitchBend:n.interval,volume:Math.round(100*n.size/3)});const r={pitches:s.pitches,points:i};0==s.start&&(r.continuesLastPattern=s.continuesLastPattern),n.push(r)}const s={notes:n};return t.patternInstruments&&(s.instruments=this.instruments.map((t=>t+1))),s}fromJsonObject(t,n,s,i,r){if(n.patternInstruments)if(Array.isArray(t.instruments)){const i=t.instruments,r=Q(e.instrumentCountMin,n.getMaxInstrumentsPerPatternForChannel(s)+1,i.length);for(let t=0;t<r;t++)this.instruments[t]=Q(0,s.instruments.length,(0|i[t])-1);this.instruments.length=r}else this.instruments[0]=Q(0,s.instruments.length,(0|t.instrument)-1),this.instruments.length=1;if(t.notes&&t.notes.length>0){const s=Math.min(n.beatsPerBar*e.partsPerBeat,t.notes.length>>>0);let a=0;for(let o=0;o<t.notes.length&&!(o>=s);o++){const s=t.notes[o];if(!(s&&s.pitches&&s.pitches.length>=1&&s.points&&s.points.length>=2))continue;const h=new nt(0,0,0,0);h.pitches=[],h.pins=[];for(let t=0;t<s.pitches.length;t++){const n=0|s.pitches[t];if(-1==h.pitches.indexOf(n)&&(h.pitches.push(n),h.pitches.length>=e.maxChordSize))break}if(h.pitches.length<1)continue;let l=a,c=0;for(let t=0;t<s.points.length;t++){const r=s.points[t];if(null==r||null==r.tick)continue;const a=null==r.pitchBend?0:0|r.pitchBend,o=Math.round(+r.tick*e.partsPerBeat/i),u=null==r.volume?3:Math.max(0,Math.min(3,Math.round(3*(0|r.volume)/100)));if(!(o>n.beatsPerBar*e.partsPerBeat)){if(0==h.pins.length){if(o<l)continue;h.start=o,c=a}else if(o<=l)continue;l=o,h.pins.push(et(a-c,o-h.start,u))}}if(h.pins.length<2)continue;h.end=h.pins[h.pins.length-1].time+h.start;const u=r?e.drumCount-1:e.maxPitch;let p=u,f=0;for(let t=0;t<h.pitches.length;t++)h.pitches[t]+=c,(h.pitches[t]<0||h.pitches[t]>u)&&(h.pitches.splice(t,1),t--),h.pitches[t]<p&&(p=h.pitches[t]),h.pitches[t]>f&&(f=h.pitches[t]);if(!(h.pitches.length<1)){for(let t=0;t<h.pins.length;t++){const e=h.pins[t];e.interval+p<0&&(e.interval=-p),e.interval+f>u&&(e.interval=u-f),t>=2&&e.interval==h.pins[t-1].interval&&e.interval==h.pins[t-2].interval&&e.size==h.pins[t-1].size&&e.size==h.pins[t-2].size&&(h.pins.splice(t-1,1),t--)}0==h.start?h.continuesLastPattern=!0===s.continuesLastPattern:h.continuesLastPattern=!1,this.notes.push(h),a=h.end}}}}}class it{constructor(t){this.frequency=0,this.amplitude=0,this.reset(t)}reset(t){this.frequency=0,this.amplitude=t<=1?e.operatorAmplitudeMax:0}}class rt{constructor(t){this.spectrum=[],this.hash=-1,this.reset(t)}reset(t){for(let n=0;n<e.spectrumControlPoints;n++)if(t)this.spectrum[n]=Math.round(e.spectrumMax*(1/Math.sqrt(1+n/3)));else{const t=0==n||7==n||11==n||14==n||16==n||18==n||21==n||23==n||n>=25;this.spectrum[n]=t?Math.max(0,Math.round(e.spectrumMax*(1-n/30))):0}this.markCustomWaveDirty()}markCustomWaveDirty(){const t=St.fittingPowerOfTwo(e.spectrumMax+2)-1;let n=0;for(const e of this.spectrum)n=n*t+e>>>0;this.hash=n}}class at{constructor(){this.wave=null,this.k=-1}getCustomWave(t,n){if(this.k==t.hash)return this.wave;this.k=t.hash;const s=e.spectrumNoiseLength;null!=this.wave&&this.wave.length==s+1||(this.wave=new Float32Array(s+1));const i=this.wave;for(let t=0;t<s;t++)i[t]=0;const r=[0,1/7,Math.log2(5/4),3/7,Math.log2(1.5),5/7,6/7];function o(t){return n+Math.floor(t/e.spectrumControlPointsPerOctave)+r[(t+e.spectrumControlPointsPerOctave)%e.spectrumControlPointsPerOctave]}let h=1;for(let n=0;n<e.spectrumControlPoints+1;n++){const r=n<=0?0:t.spectrum[n-1],l=n>=e.spectrumControlPoints?t.spectrum[e.spectrumControlPoints-1]:t.spectrum[n],c=o(n-1);let u=o(n);n>=e.spectrumControlPoints&&(u=14+.25*(u-14)),0==r&&0==l||(h+=.02*a(i,s,c,u,r/e.spectrumMax,l/e.spectrumMax,-.5))}return t.spectrum[e.spectrumControlPoints-1]>0&&(h+=.02*a(i,s,14+.25*(o(e.spectrumControlPoints)-14),14,t.spectrum[e.spectrumControlPoints-1]/e.spectrumMax,0,-.5)),j(i,s),W(i,5/(Math.sqrt(s)*Math.pow(h,.75))),i[s]=i[0],i}}class ot{constructor(){this.harmonics=[],this.hash=-1,this.reset()}reset(){for(let t=0;t<e.harmonicsControlPoints;t++)this.harmonics[t]=0;this.harmonics[0]=e.harmonicsMax,this.harmonics[3]=e.harmonicsMax,this.harmonics[6]=e.harmonicsMax,this.markCustomWaveDirty()}markCustomWaveDirty(){const t=St.fittingPowerOfTwo(e.harmonicsMax+2)-1;let n=0;for(const e of this.harmonics)n=n*t+e>>>0;this.hash=n}}class ht{constructor(){this.wave=null,this.k=-1}getCustomWave(t,n){if(this.k==t.hash&&this.T==n)return this.wave;this.k=t.hash,this.T=n;const i=7==n?e.harmonicsRenderedForPickedString:e.harmonicsRendered,a=e.harmonicsWavelength,o=r(0,null,null);null!=this.wave&&this.wave.length==a+1||(this.wave=new Float32Array(a+1));const h=this.wave;for(let t=0;t<a;t++)h[t]=0;let l=1;for(let n=0;n<i;n++){const s=n+1;let r=n<e.harmonicsControlPoints?t.harmonics[n]:t.harmonics[e.harmonicsControlPoints-1];n>=e.harmonicsControlPoints&&(r*=1-(n-e.harmonicsControlPoints)/(i-e.harmonicsControlPoints));const c=r/e.harmonicsMax;let u=Math.pow(2,r-e.harmonicsMax+1)*Math.sqrt(c);n<e.harmonicsControlPoints&&(l+=u),u*=Math.pow(s,-.25),u*=o[n+589],h[a-s]=u}j(h,a);const c=1/Math.pow(l,.7);for(let t=0;t<h.length;t++)h[t]*=c;return s(h),h[a]=h[0],h}}class lt{constructor(){this.freq=0,this.gain=e.filterGainCenter,this.type=2}set(t,e){this.freq=t,this.gain=e}getHz(){return lt.getHzFromSettingValue(this.freq)}static getHzFromSettingValue(t){return e.filterFreqReferenceHz*Math.pow(2,(t-e.filterFreqReferenceSetting)*e.filterFreqStep)}static getSettingValueFromHz(t){return Math.log2(t/e.filterFreqReferenceHz)/e.filterFreqStep+e.filterFreqReferenceSetting}static getRoundedSettingValueFromHz(t){return Math.max(0,Math.min(e.filterFreqRange-1,Math.round(lt.getSettingValueFromHz(t))))}getLinearGain(t=1){const n=(this.gain-e.filterGainCenter)*e.filterGainStep,s=2==this.type?0:-.5,i=s+(n-s)*t;return Math.pow(2,i)}static getRoundedSettingValueFromLinearGain(t){return Math.max(0,Math.min(e.filterGainRange-1,Math.round(Math.log2(t)/e.filterGainStep+e.filterGainCenter)))}toCoefficients(t,n,s=1,i=1){const r=2*Math.PI*Math.max(e.filterFreqMinHz,Math.min(e.filterFreqMaxHz,s*this.getHz()))/n,a=this.getLinearGain(i);switch(this.type){case 0:t.lowPass2ndOrderButterworth(r,a);break;case 1:t.highPass2ndOrderButterworth(r,a);break;case 2:t.peak2ndOrder(r,a,1);break;default:throw new Error}}getVolumeCompensationMult(){const t=(this.freq-e.filterFreqReferenceSetting)*e.filterFreqStep,n=(this.gain-e.filterGainCenter)*e.filterGainStep;switch(this.type){case 0:const s=Math.pow(2,t)*e.filterFreqReferenceHz/8e3,i=(Math.sqrt(1+4*s)-1)/2,r=Math.log2(i);return Math.pow(.5,.2*Math.max(0,n+1)+Math.min(0,Math.max(-3,.595*r+.35*Math.min(0,n+1))));case 1:return Math.pow(.5,.125*Math.max(0,n+1)+Math.min(0,.3*(-t-Math.log2(e.filterFreqReferenceHz/125))+.2*Math.min(0,n+1)));case 2:const a=t+Math.log2(e.filterFreqReferenceHz/2e3),o=Math.pow(1/(1+Math.pow(a/3,2)),2);return Math.pow(.5,.125*Math.max(0,n)+.1*o*Math.min(0,n));default:throw new Error}}}class ct{constructor(){this.controlPoints=[],this.controlPointCount=0,this.reset()}reset(){this.controlPointCount=0}addPoint(t,e,n){let s;this.controlPoints.length<=this.controlPointCount?(s=new lt,this.controlPoints[this.controlPointCount]=s):s=this.controlPoints[this.controlPointCount],this.controlPointCount++,s.type=t,s.set(e,n)}toJsonObject(){const t=[];for(let n=0;n<this.controlPointCount;n++){const s=this.controlPoints[n];t.push({type:e.filterTypeNames[s.type],cutoffHz:Math.round(100*s.getHz())/100,linearGain:Math.round(1e4*s.getLinearGain())/1e4})}return t}fromJsonObject(t){if(this.controlPoints.length=0,t)for(const n of t){const t=new lt;t.type=e.filterTypeNames.indexOf(n.type),-1==t.type&&(t.type=2),null!=n.cutoffHz?t.freq=lt.getRoundedSettingValueFromHz(n.cutoffHz):t.freq=0,null!=n.linearGain?t.gain=lt.getRoundedSettingValueFromLinearGain(n.linearGain):t.gain=e.filterGainCenter,this.controlPoints.push(t)}this.controlPointCount=this.controlPoints.length}convertLegacySettings(t,e,n){this.reset();const s=2*Math.asin(.475),i=e>1,r=0==e,a=10==t,o=3==n.type||4==n.type||8==n.type||0==n.type,h=48e3,l=8e3*Math.pow(2,.5*(t-10)),c=Math.min(s,2*Math.PI*l/h);if(1==n.type&&!i&&a);else if(r){const t=3.5,e=c*Math.pow(2,t),n=h*(e/(1+e/Math.PI))/(2*Math.PI),s=lt.getRoundedSettingValueFromHz(n),i=lt.getHzFromSettingValue(s),r=2*Math.PI*i/h,a=new $;a.lowPass1stOrderSimplified(c);const l=new U;l.analyze(a,r);const u=l.magnitude();let p=Math.log2(u);p=.82*(p+t)-t,o&&(p=Math.min(p,-1));const f=Math.pow(2,p),m=lt.getRoundedSettingValueFromLinearGain(f);this.addPoint(0,s,m)}else{const t=.5/(1-.95*Math.sqrt(Math.max(0,e-1)/6)),n=.5/t,s=c+(c*(c/(2*Math.PI*8e3/h)*Math.pow(n,.9)+1)-c)*n;let r;r=o?h*Math.min(s,c*Math.pow(2,.25))/(2*Math.PI):h*s/(2*Math.PI);const a=lt.getRoundedSettingValueFromHz(r);let l;if(o)l=t;else{const e=new $;e.lowPass2ndOrderSimplified(c,t);const n=new U;n.analyze(e,s),l=n.magnitude()}i||(l=Math.min(l,Math.sqrt(.5)));const u=lt.getRoundedSettingValueFromLinearGain(l);this.addPoint(0,a,u)}}}class ut{constructor(){this.target=0,this.index=0,this.envelope=0,this.reset()}reset(){this.target=0,this.index=0,this.envelope=0}toJsonObject(){const t={target:e.instrumentAutomationTargets[this.target].name,envelope:e.envelopes[this.envelope].name};return e.instrumentAutomationTargets[this.target].maxCount>1&&(t.index=this.index),t}fromJsonObject(t){this.reset();let n=e.instrumentAutomationTargets.dictionary[t.target];null==n&&(n=e.instrumentAutomationTargets.dictionary.noteVolume),this.target=n.index;let s=e.envelopes.dictionary[t.envelope];null==s&&(s=e.envelopes.dictionary.none),this.envelope=s.index,null!=t.index?this.index=Q(0,e.instrumentAutomationTargets[this.target].maxCount,0|t.index):this.index=0}}class pt{constructor(t){this.type=0,this.preset=0,this.chipWave=2,this.chipNoise=1,this.eqFilter=new ct,this.noteFilter=new ct,this.envelopes=[],this.envelopeCount=0,this.fadeIn=0,this.fadeOut=e.fadeOutNeutral,this.transition=e.transitions.dictionary.normal.index,this.pitchShift=0,this.detune=0,this.vibrato=0,this.unison=0,this.effects=0,this.chord=1,this.volume=0,this.pan=e.panCenter,this.pulseWidth=e.pulseWidthRange-1,this.supersawDynamism=e.supersawDynamismMax,this.supersawSpread=Math.ceil(e.supersawSpreadMax/2),this.supersawShape=0,this.stringSustain=10,this.stringSustainType=1,this.distortion=0,this.bitcrusherFreq=0,this.bitcrusherQuantization=0,this.chorus=0,this.reverb=0,this.echoSustain=0,this.echoDelay=0,this.algorithm=0,this.feedbackType=0,this.feedbackAmplitude=0,this.operators=[],this.harmonicsWave=new ot,this.drumsetEnvelopes=[],this.drumsetSpectrumWaves=[],this.spectrumWave=new rt(t);for(let t=0;t<e.operatorCount;t++)this.operators[t]=new it(t);for(let t=0;t<e.drumCount;t++)this.drumsetEnvelopes[t]=e.envelopes.dictionary["twang 2"].index,this.drumsetSpectrumWaves[t]=new rt(!0)}setTypeAndReset(t,n){switch(this.type=t,this.preset=t,this.volume=0,this.effects=0,this.chorus=e.chorusRange-1,this.reverb=2,this.echoSustain=Math.floor(.5*(e.echoSustainRange-1)),this.echoDelay=Math.floor(.5*(e.echoDelayRange-1)),this.eqFilter.reset(),this.noteFilter.reset(),this.distortion=Math.floor(.75*(e.distortionRange-1)),this.bitcrusherFreq=Math.floor(.5*(e.bitcrusherFreqRange-1)),this.bitcrusherQuantization=Math.floor(.5*(e.bitcrusherQuantizationRange-1)),this.pan=e.panCenter,this.pitchShift=e.pitchShiftCenter,this.detune=e.detuneCenter,this.vibrato=0,this.unison=0,this.stringSustain=10,this.stringSustainType=e.enableAcousticSustain?1:0,this.fadeIn=0,this.fadeOut=e.fadeOutNeutral,this.transition=e.transitions.dictionary.normal.index,this.envelopeCount=0,t){case 0:this.chipWave=2,this.chord=e.chords.dictionary.arpeggio.index;break;case 1:this.chord=e.chords.dictionary["custom interval"].index,this.algorithm=0,this.feedbackType=0,this.feedbackAmplitude=0;for(let t=0;t<this.operators.length;t++)this.operators[t].reset(t);break;case 2:this.chipNoise=1,this.chord=e.chords.dictionary.arpeggio.index;break;case 3:this.chord=e.chords.dictionary.simultaneous.index,this.spectrumWave.reset(n);break;case 4:this.chord=e.chords.dictionary.simultaneous.index;for(let t=0;t<e.drumCount;t++)this.drumsetEnvelopes[t]=e.envelopes.dictionary["twang 2"].index,this.drumsetSpectrumWaves[t].reset(n);break;case 5:this.chord=e.chords.dictionary.simultaneous.index,this.harmonicsWave.reset();break;case 6:this.chord=e.chords.dictionary.arpeggio.index,this.pulseWidth=e.pulseWidthRange-1;break;case 7:this.chord=e.chords.dictionary.strum.index,this.harmonicsWave.reset();break;case 8:this.chord=e.chords.dictionary.arpeggio.index,this.supersawDynamism=e.supersawDynamismMax,this.supersawSpread=Math.ceil(e.supersawSpreadMax/2),this.supersawShape=0,this.pulseWidth=e.pulseWidthRange-1;break;default:throw new Error("Unrecognized instrument type: "+t)}this.chord!=e.chords.dictionary.simultaneous.index&&(this.effects=2048|this.effects)}convertLegacySettings(t){let n=t.filterCutoff,s=t.filterResonance,i=t.filterEnvelope,r=t.pulseEnvelope,a=t.operatorEnvelopes,o=t.feedbackEnvelope;null==n&&(n=0==this.type?6:10),null==s&&(s=0),null==i&&(i=e.envelopes.dictionary.none),null==r&&(r=e.envelopes.dictionary[6==this.type?"twang 2":"none"]),null==a&&(a=[e.envelopes.dictionary[1==this.type?"note size":"none"],e.envelopes.dictionary.none,e.envelopes.dictionary.none,e.envelopes.dictionary.none]),null==o&&(o=e.envelopes.dictionary.none);10==n&&2==i.type&&(i=e.envelopes.dictionary.none);const h=e.algorithms[this.algorithm].carrierCount;let l=!0,c=!0,u=0==i.type||0==r.type;if(1==this.type){u=u||0==o.type;for(let t=0;t<a.length;t++)t<h?0!=a[t].type?c=!1:l=!1:u=u||0==a[t].type}this.envelopeCount=0,1==this.type&&(c&&u?this.addEnvelope(e.instrumentAutomationTargets.dictionary.noteVolume.index,0,e.envelopes.dictionary["note size"].index):l&&!u&&this.addEnvelope(e.instrumentAutomationTargets.dictionary.none.index,0,e.envelopes.dictionary["note size"].index)),1==i.type?(this.noteFilter.reset(),this.eqFilter.convertLegacySettings(n,s,i),this.effects&=-33):(this.eqFilter.reset(),this.noteFilter.convertLegacySettings(n,s,i),this.effects|=32,this.addEnvelope(e.instrumentAutomationTargets.dictionary.noteFilterAllFreqs.index,0,i.index)),1!=r.type&&this.addEnvelope(e.instrumentAutomationTargets.dictionary.pulseWidth.index,0,r.index);for(let t=0;t<a.length;t++)t<h&&c||1!=a[t].type&&this.addEnvelope(e.instrumentAutomationTargets.dictionary.operatorAmplitude.index,t,a[t].index);1!=o.type&&this.addEnvelope(e.instrumentAutomationTargets.dictionary.feedbackAmplitude.index,0,o.index)}toJsonObject(){const t={type:e.instrumentTypeNames[this.type],volume:20*(5-this.volume),eqFilter:this.eqFilter.toJsonObject()};this.preset!=this.type&&(t.preset=this.preset);const n=[];for(const t of e.effectOrder)this.effects&1<<t&&n.push(e.effectNames[t]);if(t.effects=n,l(this.effects)&&(t.transition=e.transitions[this.transition].name),c(this.effects)&&(t.chord=this.getChord().name),u(this.effects)&&(t.pitchShiftSemitones=this.pitchShift),p(this.effects)&&(t.detuneCents=St.detuneToCents(this.detune-e.detuneCenter)),f(this.effects)&&(t.vibrato=e.vibratos[this.vibrato].name),m(this.effects)&&(t.noteFilter=this.noteFilter.toJsonObject()),d(this.effects)&&(t.distortion=Math.round(100*this.distortion/(e.distortionRange-1))),y(this.effects)&&(t.bitcrusherOctave=(e.bitcrusherFreqRange-1-this.bitcrusherFreq)*e.bitcrusherOctaveStep,t.bitcrusherQuantization=Math.round(100*this.bitcrusherQuantization/(e.bitcrusherQuantizationRange-1))),v(this.effects)&&(t.pan=Math.round(100*(this.pan-e.panCenter)/e.panCenter)),M(this.effects)&&(t.chorus=Math.round(100*this.chorus/(e.chorusRange-1))),b(this.effects)&&(t.echoSustain=Math.round(100*this.echoSustain/(e.echoSustainRange-1)),t.echoDelayBeats=Math.round(1e3*(this.echoDelay+1)*e.echoDelayStepTicks/(e.ticksPerPart*e.partsPerBeat))/1e3),S(this.effects)&&(t.reverb=Math.round(100*this.reverb/(e.reverbRange-1))),4!=this.type&&(t.fadeInSeconds=Math.round(1e4*St.fadeInSettingToSeconds(this.fadeIn))/1e4,t.fadeOutTicks=St.fadeOutSettingToTicks(this.fadeOut)),5==this.type||7==this.type){t.harmonics=[];for(let n=0;n<e.harmonicsControlPoints;n++)t.harmonics[n]=Math.round(100*this.harmonicsWave.harmonics[n]/e.harmonicsMax)}if(2==this.type)t.wave=e.chipNoises[this.chipNoise].name;else if(3==this.type){t.spectrum=[];for(let n=0;n<e.spectrumControlPoints;n++)t.spectrum[n]=Math.round(100*this.spectrumWave.spectrum[n]/e.spectrumMax)}else if(4==this.type){t.drums=[];for(let n=0;n<e.drumCount;n++){const s=[];for(let t=0;t<e.spectrumControlPoints;t++)s[t]=Math.round(100*this.drumsetSpectrumWaves[n].spectrum[t]/e.spectrumMax);t.drums[n]={filterEnvelope:this.getDrumsetEnvelope(n).name,spectrum:s}}}else if(0==this.type)t.wave=e.chipWaves[this.chipWave].name,t.unison=e.unisons[this.unison].name;else if(6==this.type)t.pulseWidth=Math.round(100*i(this.pulseWidth)*1e5)/1e5;else if(8==this.type)t.pulseWidth=Math.round(100*i(this.pulseWidth)*1e5)/1e5,t.dynamism=Math.round(100*this.supersawDynamism/e.supersawDynamismMax),t.spread=Math.round(100*this.supersawSpread/e.supersawSpreadMax),t.shape=Math.round(100*this.supersawShape/e.supersawShapeMax);else if(7==this.type)t.unison=e.unisons[this.unison].name,t.stringSustain=Math.round(100*this.stringSustain/(e.stringSustainRange-1)),e.enableAcousticSustain&&(t.stringSustainType=e.sustainTypeNames[this.stringSustainType]);else if(5==this.type)t.unison=e.unisons[this.unison].name;else{if(1!=this.type)throw new Error("Unrecognized instrument type");{const n=[];for(const t of this.operators)n.push({frequency:e.operatorFrequencies[t.frequency].name,amplitude:t.amplitude});t.algorithm=e.algorithms[this.algorithm].name,t.feedbackType=e.feedbacks[this.feedbackType].name,t.feedbackAmplitude=this.feedbackAmplitude,t.operators=n}}const s=[];for(let t=0;t<this.envelopeCount;t++)s.push(this.envelopes[t].toJsonObject());return t.envelopes=s,t}fromJsonObject(t,n,s=0){null==t&&(t={});let i=e.instrumentTypeNames.indexOf(t.type);if(-1==i&&(i=n?2:0),this.setTypeAndReset(i,n),null!=t.preset&&(this.preset=t.preset>>>0),null!=t.volume?this.volume=Q(0,e.volumeRange,Math.round(5-(0|t.volume)/20)):this.volume=0,Array.isArray(t.effects)){let n=0;for(let s=0;s<t.effects.length;s++)n|=1<<e.effectNames.indexOf(t.effects[s]);this.effects=4095&n}else{const e=["none","reverb","chorus","chorus & reverb"];this.effects=e.indexOf(t.effects),-1==this.effects&&(this.effects=2==this.type?0:1)}this.transition=e.transitions.dictionary.normal.index;const r=t.transition||t.envelope;if(null!=r){let n=e.transitions.dictionary[r];if(null==t.fadeInSeconds||null==t.fadeOutTicks){const t={binary:{transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-1},seamless:{transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-1},sudden:{transition:"normal",fadeInSeconds:0,fadeOutTicks:-3},hard:{transition:"normal",fadeInSeconds:0,fadeOutTicks:-3},smooth:{transition:"normal",fadeInSeconds:.025,fadeOutTicks:-3},soft:{transition:"normal",fadeInSeconds:.025,fadeOutTicks:-3},slide:{transition:"slide in pattern",fadeInSeconds:.025,fadeOutTicks:-3},"cross fade":{transition:"normal",fadeInSeconds:.04,fadeOutTicks:6},"hard fade":{transition:"normal",fadeInSeconds:0,fadeOutTicks:48},"medium fade":{transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72},"soft fade":{transition:"normal",fadeInSeconds:.06,fadeOutTicks:96}}[r];null!=t&&(n=e.transitions.dictionary[t.transition],this.fadeIn=St.secondsToFadeInSetting(t.fadeInSeconds),this.fadeOut=St.ticksToFadeOutSetting(t.fadeOutTicks))}null!=n&&(this.transition=n.index),this.transition!=e.transitions.dictionary.normal.index&&(this.effects=1024|this.effects)}null!=t.fadeInSeconds&&(this.fadeIn=St.secondsToFadeInSetting(+t.fadeInSeconds)),null!=t.fadeOutTicks&&(this.fadeOut=St.ticksToFadeOutSetting(+t.fadeOutTicks));{const n=t.chord,s={harmony:"simultaneous"},i=e.chords.dictionary[s[n]]||e.chords.dictionary[n];null!=i?this.chord=i.index:2==this.type?this.chord=e.chords.dictionary.arpeggio.index:7==this.type?this.chord=e.chords.dictionary.strum.index:0==this.type?this.chord=e.chords.dictionary.arpeggio.index:1==this.type?this.chord=e.chords.dictionary["custom interval"].index:this.chord=e.chords.dictionary.simultaneous.index}this.unison=e.unisons.dictionary.none.index;const a=t.unison||t.interval||t.chorus;if(null!=a){const t={union:"none",fifths:"fifth",octaves:"octave"},n=e.unisons.dictionary[t[a]]||e.unisons.dictionary[a];null!=n&&(this.unison=n.index)}"custom harmony"==t.chorus&&(this.unison=e.unisons.dictionary.hum.index,this.chord=e.chords.dictionary["custom interval"].index),this.chord==e.chords.dictionary.simultaneous.index||Array.isArray(t.effects)||(this.effects=2048|this.effects),null!=t.pitchShiftSemitones&&(this.pitchShift=Q(0,e.pitchShiftRange,Math.round(+t.pitchShiftSemitones))),null!=t.detuneCents&&(this.detune=Q(0,e.detuneMax+1,Math.round(e.detuneCenter+St.centsToDetune(+t.detuneCents)))),this.vibrato=e.vibratos.dictionary.none.index;const o=t.vibrato||t.effect;if(null!=o){const t={"vibrato light":"light","vibrato delayed":"delayed","vibrato heavy":"heavy"},n=e.vibratos.dictionary[t[a]]||e.vibratos.dictionary[o];null!=n&&(this.vibrato=n.index),n!=e.vibratos.dictionary.none&&(this.effects=512|this.effects)}if(null!=t.pan?(this.pan=Q(0,e.panMax+1,Math.round(e.panCenter+(0|t.pan)*e.panCenter/100)),this.pan!=e.panCenter&&(this.effects=4|this.effects)):this.pan=e.panCenter,null!=t.distortion&&(this.distortion=Q(0,e.distortionRange,Math.round((e.distortionRange-1)*(0|t.distortion)/100))),null!=t.bitcrusherOctave&&(this.bitcrusherFreq=e.bitcrusherFreqRange-1-+t.bitcrusherOctave/e.bitcrusherOctaveStep),null!=t.bitcrusherQuantization&&(this.bitcrusherQuantization=Q(0,e.bitcrusherQuantizationRange,Math.round((e.bitcrusherQuantizationRange-1)*(0|t.bitcrusherQuantization)/100))),null!=t.echoSustain&&(this.echoSustain=Q(0,e.echoSustainRange,Math.round((e.echoSustainRange-1)*(0|t.echoSustain)/100))),null!=t.echoDelayBeats&&(this.echoDelay=Q(0,e.echoDelayRange,Math.round(+t.echoDelayBeats*(e.ticksPerPart*e.partsPerBeat)/e.echoDelayStepTicks-1))),isNaN(t.chorus)||(this.chorus=Q(0,e.chorusRange,Math.round((e.chorusRange-1)*(0|t.chorus)/100))),null!=t.reverb?this.reverb=Q(0,e.reverbRange,Math.round((e.reverbRange-1)*(0|t.reverb)/100)):0==s?this.effects=-2&this.effects:this.reverb=s,null!=t.pulseWidth?this.pulseWidth=Q(0,e.pulseWidthRange,Math.round(Math.log2(+t.pulseWidth/50)/.5-1+8)):this.pulseWidth=e.pulseWidthRange-1,null!=t.dynamism?this.supersawDynamism=Q(0,e.supersawDynamismMax+1,Math.round(e.supersawDynamismMax*(0|t.dynamism)/100)):this.supersawDynamism=e.supersawDynamismMax,null!=t.spread?this.supersawSpread=Q(0,e.supersawSpreadMax+1,Math.round(e.supersawSpreadMax*(0|t.spread)/100)):this.supersawSpread=Math.ceil(e.supersawSpreadMax/2),null!=t.shape?this.supersawShape=Q(0,e.supersawShapeMax+1,Math.round(e.supersawShapeMax*(0|t.shape)/100)):this.supersawShape=0,null!=t.harmonics){for(let n=0;n<e.harmonicsControlPoints;n++)this.harmonicsWave.harmonics[n]=Math.max(0,Math.min(e.harmonicsMax,Math.round(e.harmonicsMax*+t.harmonics[n]/100)));this.harmonicsWave.markCustomWaveDirty()}else this.harmonicsWave.reset();if(null!=t.spectrum){for(let n=0;n<e.spectrumControlPoints;n++)this.spectrumWave.spectrum[n]=Math.max(0,Math.min(e.spectrumMax,Math.round(e.spectrumMax*+t.spectrum[n]/100)));this.spectrumWave.markCustomWaveDirty()}else this.spectrumWave.reset(n);null!=t.stringSustain?this.stringSustain=Q(0,e.stringSustainRange,Math.round((e.stringSustainRange-1)*(0|t.stringSustain)/100)):this.stringSustain=10,this.stringSustainType=e.enableAcousticSustain?e.sustainTypeNames.indexOf(t.stringSustainType):0,-1==this.stringSustainType&&(this.stringSustainType=0),2==this.type&&(this.chipNoise=e.chipNoises.findIndex((e=>e.name==t.wave)),-1==this.chipNoise&&(this.chipNoise=1));const h={custom:"note size",steady:"none","pluck 1":"twang 1","pluck 2":"twang 2","pluck 3":"twang 3"},l=t=>null!=h[t]?e.envelopes.dictionary[h[t]]:e.envelopes.dictionary[t];if(4==this.type&&null!=t.drums)for(let n=0;n<e.drumCount;n++){const s=t.drums[n];if(null!=s){if(this.drumsetEnvelopes[n]=e.envelopes.dictionary["twang 2"].index,null!=s.filterEnvelope){const t=l(s.filterEnvelope);null!=t&&(this.drumsetEnvelopes[n]=t.index)}if(null!=s.spectrum)for(let t=0;t<e.spectrumControlPoints;t++)this.drumsetSpectrumWaves[n].spectrum[t]=Math.max(0,Math.min(e.spectrumMax,Math.round(e.spectrumMax*+s.spectrum[t]/100)))}}if(0==this.type){const n={triangle:1,square:2,"pulse wide":3,"pulse narrow":4,sawtooth:5,"double saw":6,"double pulse":7,spiky:8,plateau:0};this.chipWave=null!=n[t.wave]?n[t.wave]:e.chipWaves.findIndex((e=>e.name==t.wave)),-1==this.chipWave&&(this.chipWave=1)}if(1==this.type){this.algorithm=e.algorithms.findIndex((e=>e.name==t.algorithm)),-1==this.algorithm&&(this.algorithm=0),this.feedbackType=e.feedbacks.findIndex((e=>e.name==t.feedbackType)),-1==this.feedbackType&&(this.feedbackType=0),null!=t.feedbackAmplitude?this.feedbackAmplitude=Q(0,e.operatorAmplitudeMax+1,0|t.feedbackAmplitude):this.feedbackAmplitude=0;for(let n=0;n<e.operatorCount;n++){const s=this.operators[n];let i;null!=t.operators&&(i=t.operators[n]),null==i&&(i={}),s.frequency=e.operatorFrequencies.findIndex((t=>t.name==i.frequency)),-1==s.frequency&&(s.frequency=0),null!=i.amplitude?s.amplitude=Q(0,e.operatorAmplitudeMax+1,0|i.amplitude):s.amplitude=0}}if(null!=t.noteFilter?this.noteFilter.fromJsonObject(t.noteFilter):this.noteFilter.reset(),Array.isArray(t.eqFilter))this.eqFilter.fromJsonObject(t.eqFilter);else{this.eqFilter.reset();const n={},s=8e3,i=11,r=8;if(null!=t.filterCutoffHz?n.filterCutoff=Q(0,i,Math.round(i-1+2*Math.log((0|t.filterCutoffHz)/s)/Math.LN2)):n.filterCutoff=0==this.type?6:10,null!=t.filterResonance?n.filterResonance=Q(0,r,Math.round((r-1)*(0|t.filterResonance)/100)):n.filterResonance=0,n.filterEnvelope=l(t.filterEnvelope),n.pulseEnvelope=l(t.pulseEnvelope),n.feedbackEnvelope=l(t.feedbackEnvelope),Array.isArray(t.operators)){n.operatorEnvelopes=[];for(let s=0;s<e.operatorCount;s++){let i;null!=t.operators[s]&&(i=l(t.operators[s].envelope)),n.operatorEnvelopes[s]=null!=i?i:e.envelopes.dictionary.none}}if(null!=t.filter){const e=[10,6,3,0,8,5,2],s=["none","none","none","none","decay 1","decay 2","decay 3"],i=["none","bright","medium","soft","decay bright","decay medium","decay soft"],r={"sustain sharp":1,"sustain medium":2,"sustain soft":3,"decay sharp":4};let a=null!=r[t.filter]?r[t.filter]:i.indexOf(t.filter);-1==a&&(a=0),n.filterCutoff=e[a],n.filterEnvelope=l(s[a]),n.filterResonance=0}this.convertLegacySettings(n)}if(Array.isArray(t.envelopes)){const n=t.envelopes;for(let t=0;t<n.length&&!(this.envelopeCount>=e.maxEnvelopeCount);t++){const e=new ut;e.fromJsonObject(n[t]),this.addEnvelope(e.target,e.index,e.envelope)}}}static frequencyFromPitch(t){return 440*Math.pow(2,(t-69)/12)}addEnvelope(t,n,s){if(!this.supportsEnvelopeTarget(t,n))throw new Error;if(this.envelopeCount>=e.maxEnvelopeCount)throw new Error;for(;this.envelopes.length<=this.envelopeCount;)this.envelopes[this.envelopes.length]=new ut;const i=this.envelopes[this.envelopeCount];i.target=t,i.index=n,i.envelope=s,this.envelopeCount++}supportsEnvelopeTarget(t,n){const s=e.instrumentAutomationTargets[t];return(null!=s.computeIndex||"none"==s.name)&&(!(n>=s.maxCount)&&((null==s.compatibleInstruments||-1!=s.compatibleInstruments.indexOf(this.type))&&((null==s.effect||0!=(this.effects&1<<s.effect))&&!(s.isFilter&&n>=this.noteFilter.controlPointCount))))}clearInvalidEnvelopeTargets(){for(let t=0;t<this.envelopeCount;t++){const n=this.envelopes[t].target,s=this.envelopes[t].index;this.supportsEnvelopeTarget(n,s)||(this.envelopes[t].target=e.instrumentAutomationTargets.dictionary.none.index,this.envelopes[t].index=0)}}getTransition(){return l(this.effects)?e.transitions[this.transition]:e.transitions.dictionary.normal}getFadeInSeconds(){return 4==this.type?0:St.fadeInSettingToSeconds(this.fadeIn)}getFadeOutTicks(){return 4==this.type?e.drumsetFadeOutTicks:St.fadeOutSettingToTicks(this.fadeOut)}getChord(){return c(this.effects)?e.chords[this.chord]:e.chords.dictionary.simultaneous}getDrumsetEnvelope(t){if(4!=this.type)throw new Error("Can't getDrumsetEnvelope() for non-drumset.");return e.envelopes[this.drumsetEnvelopes[t]]}}class ft{constructor(){this.octave=0,this.instruments=[],this.patterns=[],this.bars=[],this.muted=!1}}class mt{constructor(t){this.channels=[],null!=t?this.fromBase64String(t):this.initToDefault(!0)}getChannelCount(){return this.pitchChannelCount+this.noiseChannelCount}getMaxInstrumentsPerChannel(){return Math.max(this.layeredInstruments?e.layeredInstrumentCountMax:e.instrumentCountMin,this.patternInstruments?e.patternInstrumentCountMax:e.instrumentCountMin)}getMaxInstrumentsPerPattern(t){return this.getMaxInstrumentsPerPatternForChannel(this.channels[t])}getMaxInstrumentsPerPatternForChannel(t){return this.layeredInstruments?Math.min(e.layeredInstrumentCountMax,t.instruments.length):1}getChannelIsNoise(t){return t>=this.pitchChannelCount}initToDefault(t=!0){if(this.scale=0,this.key=0,this.loopStart=0,this.loopLength=4,this.tempo=150,this.beatsPerBar=8,this.barCount=4,this.patternsPerChannel=4,this.rhythm=1,this.layeredInstruments=!1,this.patternInstruments=!1,t){this.pitchChannelCount=1,this.noiseChannelCount=1;for(let t=0;t<this.getChannelCount();t++){const n=t>=this.pitchChannelCount;this.channels.length<=t&&(this.channels[t]=new ft);const s=this.channels[t];s.octave=n?0:4-t;for(let t=0;t<this.patternsPerChannel;t++)s.patterns.length<=t?s.patterns[t]=new st:s.patterns[t].reset();s.patterns.length=this.patternsPerChannel;for(let t=0;t<e.instrumentCountMin;t++)s.instruments.length<=t&&(s.instruments[t]=new pt(n)),s.instruments[t].setTypeAndReset(n?2:0,n);s.instruments.length=e.instrumentCountMin;for(let t=0;t<this.barCount;t++)s.bars[t]=t<4?1:0;s.bars.length=this.barCount}this.channels.length=this.getChannelCount()}}toRawBase64String(){let t,n=[];if(n.push(X[mt.L]),n.push(110,X[this.pitchChannelCount],X[this.noiseChannelCount]),n.push(115,X[this.scale]),n.push(107,X[this.key]),n.push(108,X[this.loopStart>>6],X[63&this.loopStart]),n.push(101,X[this.loopLength-1>>6],X[this.loopLength-1&63]),n.push(116,X[this.tempo>>6],X[63&this.tempo]),n.push(97,X[this.beatsPerBar-1]),n.push(103,X[this.barCount-1>>6],X[this.barCount-1&63]),n.push(106,X[this.patternsPerChannel-1>>6],X[this.patternsPerChannel-1&63]),n.push(114,X[this.rhythm]),n.push(105,X[this.layeredInstruments<<1|this.patternInstruments]),this.layeredInstruments||this.patternInstruments)for(let t=0;t<this.getChannelCount();t++)n.push(X[this.channels[t].instruments.length-e.instrumentCountMin]);n.push(111);for(let t=0;t<this.pitchChannelCount;t++)n.push(X[this.channels[t].octave]);for(let t=0;t<this.getChannelCount();t++)for(let s=0;s<this.channels[t].instruments.length;s++){const i=this.channels[t].instruments[s];n.push(84,X[i.type]),n.push(118,X[i.volume]),n.push(117,X[i.preset>>6],X[63&i.preset]),n.push(102,X[i.eqFilter.controlPointCount]);for(let t=0;t<i.eqFilter.controlPointCount;t++){const e=i.eqFilter.controlPoints[t];n.push(X[e.type],X[e.freq],X[e.gain])}if(n.push(113,X[i.effects>>6],X[63&i.effects]),m(i.effects)){n.push(X[i.noteFilter.controlPointCount]);for(let t=0;t<i.noteFilter.controlPointCount;t++){const e=i.noteFilter.controlPoints[t];n.push(X[e.type],X[e.freq],X[e.gain])}}if(l(i.effects)&&n.push(X[i.transition]),c(i.effects)&&n.push(X[i.chord]),u(i.effects)&&n.push(X[i.pitchShift]),p(i.effects)&&n.push(X[i.detune]),f(i.effects)&&n.push(X[i.vibrato]),d(i.effects)&&n.push(X[i.distortion]),y(i.effects)&&n.push(X[i.bitcrusherFreq],X[i.bitcrusherQuantization]),v(i.effects)&&n.push(X[i.pan]),M(i.effects)&&n.push(X[i.chorus]),b(i.effects)&&n.push(X[i.echoSustain],X[i.echoDelay]),S(i.effects)&&n.push(X[i.reverb]),4!=i.type&&n.push(100,X[i.fadeIn],X[i.fadeOut]),5==i.type||7==i.type){n.push(72);const t=new tt;for(let n=0;n<e.harmonicsControlPoints;n++)t.write(e.harmonicsControlPointBits,i.harmonicsWave.harmonics[n]);t.encodeBase64(n)}if(0==i.type)n.push(119,X[i.chipWave]),n.push(104,X[i.unison]);else if(1==i.type){n.push(65,X[i.algorithm]),n.push(70,X[i.feedbackType]),n.push(66,X[i.feedbackAmplitude]),n.push(81);for(let t=0;t<e.operatorCount;t++)n.push(X[i.operators[t].frequency]);n.push(80);for(let t=0;t<e.operatorCount;t++)n.push(X[i.operators[t].amplitude])}else if(2==i.type)n.push(119,X[i.chipNoise]);else if(3==i.type){n.push(83);const t=new tt;for(let n=0;n<e.spectrumControlPoints;n++)t.write(e.spectrumControlPointBits,i.spectrumWave.spectrum[n]);t.encodeBase64(n)}else if(4==i.type){n.push(122);for(let t=0;t<e.drumCount;t++)n.push(X[i.drumsetEnvelopes[t]]);n.push(83);const t=new tt;for(let n=0;n<e.drumCount;n++)for(let s=0;s<e.spectrumControlPoints;s++)t.write(e.spectrumControlPointBits,i.drumsetSpectrumWaves[n].spectrum[s]);t.encodeBase64(n)}else if(5==i.type)n.push(104,X[i.unison]);else if(6==i.type)n.push(87,X[i.pulseWidth]);else if(8==i.type)n.push(120,X[i.supersawDynamism],X[i.supersawSpread],X[i.supersawShape]),n.push(87,X[i.pulseWidth]);else{if(7!=i.type)throw new Error("Unknown instrument type.");if(n.push(104,X[i.unison]),e.stringSustainRange>32)throw new Error("Not enough bits to represent sustain value and type in same base64 character.");n.push(73,X[i.stringSustain|i.stringSustainType<<5])}n.push(69,X[i.envelopeCount]);for(let t=0;t<i.envelopeCount;t++)n.push(X[i.envelopes[t].target]),e.instrumentAutomationTargets[i.envelopes[t].target].maxCount>1&&n.push(X[i.envelopes[t].index]),n.push(X[i.envelopes[t].envelope])}n.push(98),t=new tt;let s=0;for(;1<<s<this.patternsPerChannel+1;)s++;for(let e=0;e<this.getChannelCount();e++)for(let n=0;n<this.barCount;n++)t.write(s,this.channels[e].bars[n]);t.encodeBase64(n),n.push(112),t=new tt;const i=new tt,r=mt.getNeededBits(e.noteSizeMax);for(let n=0;n<this.getChannelCount();n++){const s=this.channels[n],a=this.getMaxInstrumentsPerPattern(n),o=mt.getNeededBits(a-e.instrumentCountMin),h=mt.getNeededBits(s.instruments.length-1),l=this.getChannelIsNoise(n),c=l?0:s.octave*e.pitchesPerOctave;let u=l?4:c;const p=l?[4,6,7,2,3,8,0,10]:[0,7,12,19,24,-5,-12],f=[];for(let t=0;t<p.length;t++)p[t]+=c;for(const n of s.patterns){if(this.patternInstruments){const s=_(e.instrumentCountMin,a,n.instruments.length);t.write(o,s-e.instrumentCountMin);for(let e=0;e<s;e++)t.write(h,n.instruments[e])}if(n.notes.length>0){t.write(1,1);let s=0;for(const a of n.notes){a.start>s&&(t.write(2,0),t.writePartDuration(a.start-s)),i.clear();for(let t=1;t<a.pitches.length;t++)i.write(1,1);a.pitches.length<e.maxChordSize&&i.write(1,0),i.writePinCount(a.pins.length-1),i.write(r,a.pins[0].size);let n=0,o=a.pitches[0],h=o;const l=[];for(let t=1;t<a.pins.length;t++){const e=a.pins[t],s=o+e.interval;h!=s?(i.write(1,1),l.push(s),h=s):i.write(1,0),i.writePartDuration(e.time-n),n=e.time,i.write(r,e.size)}const c=String.fromCharCode.apply(null,i.encodeBase64([])),m=f.indexOf(c);-1==m?(t.write(2,1),t.concat(i)):(t.write(1,1),t.writeLongTail(0,0,m),f.splice(m,1)),f.unshift(c),f.length>10&&f.pop();const d=a.pitches.concat(l);for(let e=0;e<d.length;e++){const n=d[e],s=p.indexOf(n);if(-1==s){let e=0,s=u;if(s<n)for(;s!=n;)s++,-1==p.indexOf(s)&&e++;else for(;s!=n;)s--,-1==p.indexOf(s)&&e--;t.write(1,0),t.writePitchInterval(e)}else t.write(1,1),t.write(3,s),p.splice(s,1);p.unshift(n),p.length>8&&p.pop(),u=e==a.pitches.length-1?a.pitches[0]:n}0==a.start&&t.write(1,a.continuesLastPattern?1:0),s=a.end}s<this.beatsPerBar*e.partsPerBeat&&(t.write(2,0),t.writePartDuration(this.beatsPerBar*e.partsPerBeat-s))}else t.write(1,0)}}let a=t.lengthBase64(),o=[];for(;a>0;)o.unshift(X[63&a]),a>>=6;n.push(X[o.length]),Array.prototype.push.apply(n,o),t.encodeBase64(n);const h=64e3;if(n.length<h)return String.fromCharCode.apply(null,n);{let t="";for(let e=0;e<n.length;e+=h)t+=String.fromCharCode.apply(null,n.slice(e,e+h));return t}}static O(t){return 0==t?t=1:1==t&&(t=0),e.envelopes[Q(0,e.envelopes.length,t)]}fromRawBase64String(t){if(null==t||""==t)return void this.initToDefault(!0);let n=0;for(;t.charCodeAt(n)<=32;)n++;if(35==t.charCodeAt(n)&&n++,123==t.charCodeAt(n))return void this.fromJsonObject(JSON.parse(0==n?t:t.substring(n)));const s=Y[t.charCodeAt(n++)];if(-1==s||s>mt.L||s<mt.R)return;const i=s<3,r=s<4,a=s<5,o=s<6,h=s<7,g=s<8,F=s<9;if(this.initToDefault(F),i){for(const t of this.channels)t.instruments[0].transition=e.transitions.dictionary.interrupt.index,t.instruments[0].effects|=1024;this.channels[3].instruments[0].chipNoise=0}let I=null;if(F){I=[];for(let t=I.length;t<this.getChannelCount();t++){I[t]=[];for(let n=0;n<e.instrumentCountMin;n++)I[t][n]={}}}let D,P=0,w=0,x=-1;for(;n<t.length;)switch(D=t.charCodeAt(n++)){case 110:this.pitchChannelCount=Y[t.charCodeAt(n++)],this.noiseChannelCount=Y[t.charCodeAt(n++)],this.pitchChannelCount=_(e.pitchChannelCountMin,e.pitchChannelCountMax,this.pitchChannelCount),this.noiseChannelCount=_(e.noiseChannelCountMin,e.noiseChannelCountMax,this.noiseChannelCount);for(let t=this.channels.length;t<this.getChannelCount();t++)this.channels[t]=new ft;if(this.channels.length=this.getChannelCount(),F)for(let t=I.length;t<this.getChannelCount();t++){I[t]=[];for(let n=0;n<e.instrumentCountMin;n++)I[t][n]={}}break;case 115:this.scale=Y[t.charCodeAt(n++)],i&&10==this.scale&&(this.scale=11);break;case 107:this.key=Q(0,e.keys.length,h?11-Y[t.charCodeAt(n++)]:Y[t.charCodeAt(n++)]);break;case 108:this.loopStart=a?Y[t.charCodeAt(n++)]:(Y[t.charCodeAt(n++)]<<6)+Y[t.charCodeAt(n++)];break;case 101:this.loopLength=a?Y[t.charCodeAt(n++)]:(Y[t.charCodeAt(n++)]<<6)+Y[t.charCodeAt(n++)]+1;break;case 116:this.tempo=r?[95,120,151,190][Y[t.charCodeAt(n++)]]:h?[88,95,103,111,120,130,140,151,163,176,190,206,222,240,259][Y[t.charCodeAt(n++)]]:Y[t.charCodeAt(n++)]<<6|Y[t.charCodeAt(n++)],this.tempo=Q(e.tempoMin,e.tempoMax+1,this.tempo);break;case 109:F&&(P=Y[t.charCodeAt(n++)],P=Q(0,4,P));break;case 97:this.beatsPerBar=i?[6,7,8,9,10][Y[t.charCodeAt(n++)]]:Y[t.charCodeAt(n++)]+1,this.beatsPerBar=Math.max(e.beatsPerBarMin,Math.min(e.beatsPerBarMax,this.beatsPerBar));break;case 103:{const s=(Y[t.charCodeAt(n++)]<<6)+Y[t.charCodeAt(n++)]+1;this.barCount=_(e.barCountMin,e.barCountMax,s);for(let t=0;t<this.getChannelCount();t++){for(let e=this.channels[t].bars.length;e<this.barCount;e++)this.channels[t].bars[e]=1;this.channels[t].bars.length=this.barCount}}break;case 106:{let s;s=g?Y[t.charCodeAt(n++)]+1:(Y[t.charCodeAt(n++)]<<6)+Y[t.charCodeAt(n++)]+1,this.patternsPerChannel=_(1,e.barCountMax,s);const i=this.getChannelCount();for(let t=0;t<i;t++){const e=this.channels[t].patterns;for(let t=e.length;t<this.patternsPerChannel;t++)e[t]=new st;e.length=this.patternsPerChannel}}break;case 105:if(F){const s=_(e.instrumentCountMin,e.patternInstrumentCountMax,Y[t.charCodeAt(n++)]+e.instrumentCountMin);this.layeredInstruments=!1,this.patternInstruments=s>1;for(let t=0;t<this.getChannelCount();t++){const e=t>=this.pitchChannelCount;for(let n=this.channels[t].instruments.length;n<s;n++)this.channels[t].instruments[n]=new pt(e);if(this.channels[t].instruments.length=s,o)for(let n=0;n<s;n++)this.channels[t].instruments[n].setTypeAndReset(e?2:0,e);for(let e=I[t].length;e<s;e++)I[t][e]={}}}else{const s=Y[t.charCodeAt(n++)];this.layeredInstruments=0!=(2&s),this.patternInstruments=0!=(1&s);for(let s=0;s<this.getChannelCount();s++){let i=1;(this.layeredInstruments||this.patternInstruments)&&(i=_(e.instrumentCountMin,this.getMaxInstrumentsPerChannel(),Y[t.charCodeAt(n++)]+e.instrumentCountMin));const r=this.channels[s],a=this.getChannelIsNoise(s);for(let t=r.instruments.length;t<i;t++)r.instruments[t]=new pt(a);r.instruments.length=i}}break;case 114:this.rhythm=Y[t.charCodeAt(n++)];break;case 111:if(i){const s=Y[t.charCodeAt(n++)];this.channels[s].octave=Q(0,e.pitchOctaves,Y[t.charCodeAt(n++)]+1),s>=this.pitchChannelCount&&(this.channels[s].octave=0)}else if(F)for(let s=0;s<this.getChannelCount();s++)this.channels[s].octave=Q(0,e.pitchOctaves,Y[t.charCodeAt(n++)]+1),s>=this.pitchChannelCount&&(this.channels[s].octave=0);else{for(let s=0;s<this.pitchChannelCount;s++)this.channels[s].octave=Q(0,e.pitchOctaves,Y[t.charCodeAt(n++)]);for(let t=this.pitchChannelCount;t<this.getChannelCount();t++)this.channels[t].octave=0}break;case 84:{x++,x>=this.channels[w].instruments.length&&(w++,x=0),_(0,this.channels.length-1,w);const s=this.channels[w].instruments[x],i=_(0,8,Y[t.charCodeAt(n++)]);s.setTypeAndReset(i,w>=this.pitchChannelCount),h&&(s.effects=0,P>0&&!this.getChannelIsNoise(w)&&(s.reverb=P,s.effects|=1),s.chord!=e.chords.dictionary.simultaneous.index&&(s.effects|=2048))}break;case 117:{const e=Y[t.charCodeAt(n++)]<<6|Y[t.charCodeAt(n++)];this.channels[w].instruments[x].preset=e}break;case 119:if(i){const s=[1,2,3,4,5,6,7,8,0],i=Y[t.charCodeAt(n++)],r=this.channels[i].instruments[0];r.chipWave=Q(0,e.chipWaves.length,0|s[Y[t.charCodeAt(n++)]]),r.convertLegacySettings(I[i][0])}else if(o){const s=[1,2,3,4,5,6,7,8,0];for(let i=0;i<this.getChannelCount();i++)for(const r of this.channels[i].instruments)i>=this.pitchChannelCount?r.chipNoise=Q(0,e.chipNoises.length,Y[t.charCodeAt(n++)]):r.chipWave=Q(0,e.chipWaves.length,0|s[Y[t.charCodeAt(n++)]])}else if(h){const s=[1,2,3,4,5,6,7,8,0];w>=this.pitchChannelCount?this.channels[w].instruments[x].chipNoise=Q(0,e.chipNoises.length,Y[t.charCodeAt(n++)]):this.channels[w].instruments[x].chipWave=Q(0,e.chipWaves.length,0|s[Y[t.charCodeAt(n++)]])}else w>=this.pitchChannelCount?this.channels[w].instruments[x].chipNoise=Q(0,e.chipNoises.length,Y[t.charCodeAt(n++)]):this.channels[w].instruments[x].chipWave=Q(0,e.chipWaves.length,Y[t.charCodeAt(n++)]);break;case 102:if(F)if(h){const s=[10,6,3,0,8,5,2],r=["none","none","none","none","decay 1","decay 2","decay 3"];if(i){const i=Y[t.charCodeAt(n++)],a=this.channels[i].instruments[0],o=I[i][0],h=[1,3,4,5][Q(0,s.length,Y[t.charCodeAt(n++)])];o.filterCutoff=s[h],o.filterResonance=0,o.filterEnvelope=e.envelopes.dictionary[r[h]],a.convertLegacySettings(o)}else if(o)for(let i=0;i<this.getChannelCount();i++)for(let a=0;a<this.channels[i].instruments.length;a++){const o=this.channels[i].instruments[a],h=I[i][a],l=Q(0,s.length,Y[t.charCodeAt(n++)]+1);i<this.pitchChannelCount?(h.filterCutoff=s[l],h.filterResonance=0,h.filterEnvelope=e.envelopes.dictionary[r[l]]):(h.filterCutoff=10,h.filterResonance=0,h.filterEnvelope=e.envelopes.dictionary.none),o.convertLegacySettings(h)}else{const i=Q(0,s.length,Y[t.charCodeAt(n++)]),a=this.channels[w].instruments[x],o=I[w][x];o.filterCutoff=s[i],o.filterResonance=0,o.filterEnvelope=e.envelopes.dictionary[r[i]],a.convertLegacySettings(o)}}else{const e=11,s=this.channels[w].instruments[x],i=I[w][x];i.filterCutoff=Q(0,e,Y[t.charCodeAt(n++)]),s.convertLegacySettings(i)}else{const s=this.channels[w].instruments[x],i=Y[t.charCodeAt(n++)];s.eqFilter.controlPointCount=Q(0,e.filterMaxPoints+1,i);for(let t=s.eqFilter.controlPoints.length;t<s.eqFilter.controlPointCount;t++)s.eqFilter.controlPoints[t]=new lt;for(let i=0;i<s.eqFilter.controlPointCount;i++){const r=s.eqFilter.controlPoints[i];r.type=Q(0,3,Y[t.charCodeAt(n++)]),r.freq=Q(0,e.filterFreqRange,Y[t.charCodeAt(n++)]),r.gain=Q(0,e.filterGainRange,Y[t.charCodeAt(n++)])}for(let t=s.eqFilter.controlPointCount;t<i;t++)n+=3}break;case 121:if(F){const e=8,s=this.channels[w].instruments[x],i=I[w][x];i.filterResonance=Q(0,e,Y[t.charCodeAt(n++)]),s.convertLegacySettings(i)}break;case 122:{const s=this.channels[w].instruments[x];if(F)if(4==s.type)for(let i=0;i<e.drumCount;i++)s.drumsetEnvelopes[i]=mt.O(Y[t.charCodeAt(n++)]).index;else{const e=I[w][x];e.filterEnvelope=mt.O(Y[t.charCodeAt(n++)]),s.convertLegacySettings(e)}else for(let i=0;i<e.drumCount;i++)s.drumsetEnvelopes[i]=Q(0,e.envelopes.length,Y[t.charCodeAt(n++)])}break;case 87:{const s=this.channels[w].instruments[x];if(s.pulseWidth=Q(0,e.pulseWidthRange,Y[t.charCodeAt(n++)]),F){const e=I[w][x];e.pulseEnvelope=mt.O(Y[t.charCodeAt(n++)]),s.convertLegacySettings(e)}}break;case 120:{const s=this.channels[w].instruments[x];s.supersawDynamism=Q(0,e.supersawDynamismMax+1,Y[t.charCodeAt(n++)]),s.supersawSpread=Q(0,e.supersawSpreadMax+1,Y[t.charCodeAt(n++)]),s.supersawShape=Q(0,e.supersawShapeMax+1,Y[t.charCodeAt(n++)])}break;case 73:{const s=this.channels[w].instruments[x],i=Y[t.charCodeAt(n++)];s.stringSustain=Q(0,e.stringSustainRange,31&i),s.stringSustainType=e.enableAcousticSustain?Q(0,2,i>>5):0}break;case 100:if(F){const s=[{transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-1},{transition:"normal",fadeInSeconds:0,fadeOutTicks:-3},{transition:"normal",fadeInSeconds:.025,fadeOutTicks:-3},{transition:"slide in pattern",fadeInSeconds:.025,fadeOutTicks:-3},{transition:"normal",fadeInSeconds:.04,fadeOutTicks:6},{transition:"normal",fadeInSeconds:0,fadeOutTicks:48},{transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72},{transition:"normal",fadeInSeconds:.06,fadeOutTicks:96}];if(i){const i=Y[t.charCodeAt(n++)],r=s[Q(0,s.length,Y[t.charCodeAt(n++)])],a=this.channels[i].instruments[0];a.fadeIn=St.secondsToFadeInSetting(r.fadeInSeconds),a.fadeOut=St.ticksToFadeOutSetting(r.fadeOutTicks),a.transition=e.transitions.dictionary[r.transition].index,a.transition!=e.transitions.dictionary.normal.index&&(a.effects|=1024)}else if(o)for(let i=0;i<this.getChannelCount();i++)for(const r of this.channels[i].instruments){const i=s[Q(0,s.length,Y[t.charCodeAt(n++)])];r.fadeIn=St.secondsToFadeInSetting(i.fadeInSeconds),r.fadeOut=St.ticksToFadeOutSetting(i.fadeOutTicks),r.transition=e.transitions.dictionary[i.transition].index,r.transition!=e.transitions.dictionary.normal.index&&(r.effects|=1024)}else{const i=s[Q(0,s.length,Y[t.charCodeAt(n++)])],r=this.channels[w].instruments[x];r.fadeIn=St.secondsToFadeInSetting(i.fadeInSeconds),r.fadeOut=St.ticksToFadeOutSetting(i.fadeOutTicks),r.transition=e.transitions.dictionary[i.transition].index,r.transition!=e.transitions.dictionary.normal.index&&(r.effects|=1024)}}else{const s=this.channels[w].instruments[x];s.fadeIn=Q(0,e.fadeInRange,Y[t.charCodeAt(n++)]),s.fadeOut=Q(0,e.fadeOutTicks.length,Y[t.charCodeAt(n++)])}break;case 99:if(F)if(h)if(i){const s=[0,3,2,0],i=["none","none","none","tremolo2"],r=Y[t.charCodeAt(n++)],a=Q(0,s.length,Y[t.charCodeAt(n++)]),o=this.channels[r].instruments[0],h=I[r][0];o.vibrato=s[a],null!=h.filterEnvelope&&1!=h.filterEnvelope.type||(h.filterEnvelope=e.envelopes.dictionary[i[a]],o.convertLegacySettings(h)),o.vibrato!=e.vibratos.dictionary.none.index&&(o.effects|=512)}else if(o){const s=[0,1,2,3,0,0],i=["none","none","none","none","tremolo5","tremolo2"];for(let r=0;r<this.getChannelCount();r++)for(let a=0;a<this.channels[r].instruments.length;a++){const o=Q(0,s.length,Y[t.charCodeAt(n++)]),h=this.channels[r].instruments[a],l=I[r][a];h.vibrato=s[o],null!=l.filterEnvelope&&1!=l.filterEnvelope.type||(l.filterEnvelope=e.envelopes.dictionary[i[o]],h.convertLegacySettings(l)),h.vibrato!=e.vibratos.dictionary.none.index&&(h.effects|=512),0==P||this.getChannelIsNoise(r)||(h.effects|=1,h.reverb=P)}}else{const s=[0,1,2,3,0,0],i=["none","none","none","none","tremolo5","tremolo2"],r=Q(0,s.length,Y[t.charCodeAt(n++)]),a=this.channels[w].instruments[x],o=I[w][x];a.vibrato=s[r],null!=o.filterEnvelope&&1!=o.filterEnvelope.type||(o.filterEnvelope=e.envelopes.dictionary[i[r]],a.convertLegacySettings(o)),a.vibrato!=e.vibratos.dictionary.none.index&&(a.effects|=512),0!=P&&(a.effects|=1,a.reverb=P)}else{const s=this.channels[w].instruments[x],i=Q(0,e.vibratos.length,Y[t.charCodeAt(n++)]);s.vibrato=i,s.vibrato!=e.vibratos.dictionary.none.index&&(s.effects|=512)}break;case 104:if(i){const s=Y[t.charCodeAt(n++)];this.channels[s].instruments[0].unison=Q(0,e.unisons.length,Y[t.charCodeAt(n++)])}else if(o)for(let s=0;s<this.getChannelCount();s++)for(const i of this.channels[s].instruments){const s=Y[t.charCodeAt(n++)];let r=Q(0,e.unisons.length,s);8==s&&(r=2,i.chord=3),i.unison=r}else if(h){const s=Y[t.charCodeAt(n++)];let i=Q(0,e.unisons.length,s);8==s&&(i=2,this.channels[w].instruments[x].chord=3),this.channels[w].instruments[x].unison=i}else this.channels[w].instruments[x].unison=Q(0,e.unisons.length,Y[t.charCodeAt(n++)]);break;case 67:if(F){const s=this.channels[w].instruments[x];s.chord=Q(0,e.chords.length,Y[t.charCodeAt(n++)]),s.chord!=e.chords.dictionary.simultaneous.index&&(s.effects|=2048)}break;case 113:{const s=this.channels[w].instruments[x];if(F){s.effects=4095&Y[t.charCodeAt(n++)],0==P?s.effects&=-2:S(s.effects)&&(s.reverb=P),s.pan!=e.panCenter&&(s.effects|=4),s.vibrato!=e.vibratos.dictionary.none.index&&(s.effects|=4);const i=I[w][x];s.convertLegacySettings(i)}else{if(s.effects=Y[t.charCodeAt(n++)]<<6|Y[t.charCodeAt(n++)],m(s.effects)){const i=Y[t.charCodeAt(n++)];s.noteFilter.controlPointCount=Q(0,e.filterMaxPoints+1,i);for(let t=s.noteFilter.controlPoints.length;t<s.noteFilter.controlPointCount;t++)s.noteFilter.controlPoints[t]=new lt;for(let i=0;i<s.noteFilter.controlPointCount;i++){const r=s.noteFilter.controlPoints[i];r.type=Q(0,3,Y[t.charCodeAt(n++)]),r.freq=Q(0,e.filterFreqRange,Y[t.charCodeAt(n++)]),r.gain=Q(0,e.filterGainRange,Y[t.charCodeAt(n++)])}for(let t=s.noteFilter.controlPointCount;t<i;t++)n+=3}l(s.effects)&&(s.transition=Q(0,e.transitions.length,Y[t.charCodeAt(n++)])),c(s.effects)&&(s.chord=Q(0,e.chords.length,Y[t.charCodeAt(n++)])),u(s.effects)&&(s.pitchShift=Q(0,e.pitchShiftRange,Y[t.charCodeAt(n++)])),p(s.effects)&&(s.detune=Q(0,e.detuneMax+1,Y[t.charCodeAt(n++)])),f(s.effects)&&(s.vibrato=Q(0,e.vibratos.length,Y[t.charCodeAt(n++)])),d(s.effects)&&(s.distortion=Q(0,e.distortionRange,Y[t.charCodeAt(n++)])),y(s.effects)&&(s.bitcrusherFreq=Q(0,e.bitcrusherFreqRange,Y[t.charCodeAt(n++)]),s.bitcrusherQuantization=Q(0,e.bitcrusherQuantizationRange,Y[t.charCodeAt(n++)])),v(s.effects)&&(s.pan=Q(0,e.panMax+1,Y[t.charCodeAt(n++)])),M(s.effects)&&(s.chorus=Q(0,e.chorusRange,Y[t.charCodeAt(n++)])),b(s.effects)&&(s.echoSustain=Q(0,e.echoSustainRange,Y[t.charCodeAt(n++)]),s.echoDelay=Q(0,e.echoDelayRange,Y[t.charCodeAt(n++)])),S(s.effects)&&(s.reverb=Q(0,e.reverbRange,Y[t.charCodeAt(n++)]))}s.effects&=4095}break;case 118:if(i){const s=Y[t.charCodeAt(n++)],i=this.channels[s].instruments[0];i.volume=Q(0,e.volumeRange,Y[t.charCodeAt(n++)]),5==i.volume&&(i.volume=e.volumeRange-1)}else if(o)for(let s=0;s<this.getChannelCount();s++)for(const i of this.channels[s].instruments)i.volume=Q(0,e.volumeRange,Y[t.charCodeAt(n++)]),5==i.volume&&(i.volume=e.volumeRange-1);else if(h){const s=this.channels[w].instruments[x];s.volume=Q(0,e.volumeRange,Y[t.charCodeAt(n++)]),5==s.volume&&(s.volume=e.volumeRange-1)}else{this.channels[w].instruments[x].volume=Q(0,e.volumeRange,Y[t.charCodeAt(n++)])}break;case 76:if(F){this.channels[w].instruments[x].pan=Q(0,e.panMax+1,Y[t.charCodeAt(n++)])}break;case 65:{const s=this.channels[w].instruments[x];if(s.algorithm=Q(0,e.algorithms.length,Y[t.charCodeAt(n++)]),F){const t=I[w][x];s.convertLegacySettings(t)}}break;case 70:this.channels[w].instruments[x].feedbackType=Q(0,e.feedbacks.length,Y[t.charCodeAt(n++)]);break;case 66:this.channels[w].instruments[x].feedbackAmplitude=Q(0,e.operatorAmplitudeMax+1,Y[t.charCodeAt(n++)]);break;case 86:if(F){const e=this.channels[w].instruments[x],s=I[w][x];s.feedbackEnvelope=mt.O(Y[t.charCodeAt(n++)]),e.convertLegacySettings(s)}break;case 81:for(let s=0;s<e.operatorCount;s++)this.channels[w].instruments[x].operators[s].frequency=Q(0,e.operatorFrequencies.length,Y[t.charCodeAt(n++)]);break;case 80:for(let s=0;s<e.operatorCount;s++)this.channels[w].instruments[x].operators[s].amplitude=Q(0,e.operatorAmplitudeMax+1,Y[t.charCodeAt(n++)]);break;case 69:{const s=this.channels[w].instruments[x];if(F){const i=I[w][x];i.operatorEnvelopes=[];for(let s=0;s<e.operatorCount;s++)i.operatorEnvelopes[s]=mt.O(Y[t.charCodeAt(n++)]);s.convertLegacySettings(i)}else{const i=Q(0,e.maxEnvelopeCount+1,Y[t.charCodeAt(n++)]);for(let r=0;r<i;r++){const i=Q(0,e.instrumentAutomationTargets.length,Y[t.charCodeAt(n++)]);let r=0;const a=e.instrumentAutomationTargets[i].maxCount;a>1&&(r=Q(0,a,Y[t.charCodeAt(n++)]));const o=Q(0,e.envelopes.length,Y[t.charCodeAt(n++)]);s.addEnvelope(i,r,o)}}}break;case 83:{const s=this.channels[w].instruments[x];if(3==s.type){const i=Math.ceil(e.spectrumControlPoints*e.spectrumControlPointBits/6),r=new Z(t,n,n+i);for(let t=0;t<e.spectrumControlPoints;t++)s.spectrumWave.spectrum[t]=r.read(e.spectrumControlPointBits);s.spectrumWave.markCustomWaveDirty(),n+=i}else{if(4!=s.type)throw new Error("Unhandled instrument type for spectrum song tag code.");{const i=Math.ceil(e.drumCount*e.spectrumControlPoints*e.spectrumControlPointBits/6),r=new Z(t,n,n+i);for(let t=0;t<e.drumCount;t++){for(let n=0;n<e.spectrumControlPoints;n++)s.drumsetSpectrumWaves[t].spectrum[n]=r.read(e.spectrumControlPointBits);s.drumsetSpectrumWaves[t].markCustomWaveDirty()}n+=i}}}break;case 72:{const s=this.channels[w].instruments[x],i=Math.ceil(e.harmonicsControlPoints*e.harmonicsControlPointBits/6),r=new Z(t,n,n+i);for(let t=0;t<e.harmonicsControlPoints;t++)s.harmonicsWave.harmonics[t]=r.read(e.harmonicsControlPointBits);s.harmonicsWave.markCustomWaveDirty(),n+=i}break;case 98:{let e;if(i){const s=Y[t.charCodeAt(n++)],i=Y[t.charCodeAt(n++)];e=Math.ceil(.5*i);const r=new Z(t,n,n+e);for(let t=0;t<i;t++)this.channels[s].bars[t]=r.read(3)+1}else if(a){let s=0;for(;1<<s<this.patternsPerChannel;)s++;e=Math.ceil(this.getChannelCount()*this.barCount*s/6);const i=new Z(t,n,n+e);for(let t=0;t<this.getChannelCount();t++)for(let e=0;e<this.barCount;e++)this.channels[t].bars[e]=i.read(s)+1}else{let s=0;for(;1<<s<this.patternsPerChannel+1;)s++;e=Math.ceil(this.getChannelCount()*this.barCount*s/6);const i=new Z(t,n,n+e);for(let t=0;t<this.getChannelCount();t++)for(let e=0;e<this.barCount;e++)this.channels[t].bars[e]=i.read(s)}n+=e}break;case 112:{let s,r=0;if(i)s=Y[t.charCodeAt(n++)],n++,r=Y[t.charCodeAt(n++)],r<<=6,r+=Y[t.charCodeAt(n++)];else{s=0;let e=_(1,4,Y[t.charCodeAt(n++)]);for(;e>0;)r<<=6,r+=Y[t.charCodeAt(n++)],e--}const a=new Z(t,n,n+r);n+=r;const o=mt.getNeededBits(e.noteSizeMax);for(;;){const t=this.channels[s],n=this.getChannelIsNoise(s),r=this.getMaxInstrumentsPerPattern(s),l=mt.getNeededBits(r-e.instrumentCountMin),c=mt.getNeededBits(t.instruments.length-1),u=n?0:12*t.octave;let p=n?4:u;const f=n?[4,6,7,2,3,8,0,10]:[0,7,12,19,24,-5,-12],m=[];for(let t=0;t<f.length;t++)f[t]+=u;for(let n=0;n<this.patternsPerChannel;n++){const s=t.patterns[n];if(F)s.instruments[0]=_(0,t.instruments.length-1,a.read(c)),s.instruments.length=1;else if(this.patternInstruments){const n=_(e.instrumentCountMin,r,a.read(l)+e.instrumentCountMin);for(let e=0;e<n;e++)s.instruments[e]=_(0,t.instruments.length-1,a.read(c));s.instruments.length=n}else s.instruments[0]=0,s.instruments.length=e.instrumentCountMin;if(!i&&0==a.read(1)){s.notes.length=0;continue}let u=0;const d=s.notes;let y=0;for(;u<this.beatsPerBar*e.partsPerBeat;){const t=1==a.read(1);let n=!1,s=0;if(t?s=_(0,m.length-1,a.readLongTail(0,0)):n=1==a.read(1),t||n){let n,i,r;if(t)n=m[s],m.splice(s,1);else{for(n={},n.pitchCount=1;n.pitchCount<e.maxChordSize&&1==a.read(1);)n.pitchCount++;n.pinCount=a.readPinCount(),n.initialSize=a.read(o),n.pins=[],n.length=0,n.bendCount=0;for(let t=0;t<n.pinCount;t++){let t={};t.pitchBend=1==a.read(1),t.pitchBend&&n.bendCount++,n.length+=h?a.readLegacyPartDuration()*e.partsPerBeat/e.rhythms[this.rhythm].stepsPerBeat:a.readPartDuration(),t.time=n.length,t.size=a.read(o),n.pins.push(t)}}m.unshift(n),m.length>10&&m.pop(),d.length<=y?(i=new nt(0,u,u+n.length,n.initialSize),d[y++]=i):(i=d[y++],i.start=u,i.end=u+n.length,i.pins[0].size=n.initialSize);let l=0;const c=[];for(let t=0;t<n.pitchCount+n.bendCount;t++){if(1==a.read(1)){const t=_(0,f.length-1,a.read(3));r=f[t],f.splice(t,1)}else{r=p;let t=a.readPitchInterval();for(;t>0;){for(r++;-1!=f.indexOf(r);)r++;t--}for(;t<0;){for(r--;-1!=f.indexOf(r);)r--;t++}}f.unshift(r),f.length>8&&f.pop(),t<n.pitchCount?i.pitches[l++]=r:c.push(r),p=t==n.pitchCount-1?i.pitches[0]:r}i.pitches.length=l,c.unshift(i.pitches[0]);let v=1;for(const t of n.pins){t.pitchBend&&c.shift();const e=c[0]-i.pitches[0];if(i.pins.length<=v)i.pins[v++]=et(e,t.time,t.size);else{const n=i.pins[v++];n.interval=e,n.time=t.time,n.size=t.size}}i.pins.length=v,0!=i.start||F?i.continuesLastPattern=!1:i.continuesLastPattern=1==a.read(1),u=_(0,this.beatsPerBar*e.partsPerBeat,i.end)}else{u+=h?a.readLegacyPartDuration()*e.partsPerBeat/e.rhythms[this.rhythm].stepsPerBeat:a.readPartDuration()}}d.length=y}if(i)break;if(s++,s>=this.getChannelCount())break}}break;default:throw new Error("Unrecognized song tag code "+String.fromCharCode(D)+" at index "+(n-1))}}toJsonObject(t=!0,n=1,s=!0){const i=[];for(let e=0;e<this.getChannelCount();e++){const r=this.channels[e],a=[],o=this.getChannelIsNoise(e);for(const t of r.instruments)a.push(t.toJsonObject());const h=[];for(const t of r.patterns)h.push(t.toJsonObject(this));const l=[];if(t)for(let t=0;t<this.loopStart;t++)l.push(r.bars[t]);for(let t=0;t<n;t++)for(let t=this.loopStart;t<this.loopStart+this.loopLength;t++)l.push(r.bars[t]);if(s)for(let t=this.loopStart+this.loopLength;t<this.barCount;t++)l.push(r.bars[t]);const c={type:o?"drum":"pitch",instruments:a,patterns:h,sequence:l};o||(c.octaveScrollBar=r.octave-1),i.push(c)}return{format:mt.N,version:mt.L,scale:e.scales[this.scale].name,key:e.keys[this.key].name,introBars:this.loopStart,loopBars:this.loopLength,beatsPerBar:this.beatsPerBar,ticksPerBeat:e.rhythms[this.rhythm].stepsPerBeat,beatsPerMinute:this.tempo,layeredInstruments:this.layeredInstruments,patternInstruments:this.patternInstruments,channels:i}}fromJsonObject(t){if(this.initToDefault(!0),!t)return;if(this.scale=11,null!=t.scale){const n={"romani :)":"double harmonic :)","romani :(":"double harmonic :(","dbl harmonic :)":"double harmonic :)","dbl harmonic :(":"double harmonic :(",enigma:"strange"},s=null!=n[t.scale]?n[t.scale]:t.scale,i=e.scales.findIndex((t=>t.name==s));-1!=i&&(this.scale=i)}if(null!=t.key)if("number"==typeof t.key)this.key=(t.key+1200>>>0)%e.keys.length;else if("string"==typeof t.key){const e=t.key,n=e.charAt(0).toUpperCase(),s=e.charAt(1).toLowerCase();let i={C:0,D:2,E:4,F:5,G:7,A:9,B:11}[n];const r={"#":1,"♯":1,b:-1,"♭":-1}[s];null!=i&&(null!=r&&(i+=r),i<0&&(i+=12),i%=12,this.key=i)}null!=t.beatsPerMinute&&(this.tempo=Q(e.tempoMin,e.tempoMax+1,0|t.beatsPerMinute));let n=0;null!=t.reverb&&(n=Q(0,4,0|t.reverb)),null!=t.beatsPerBar&&(this.beatsPerBar=Math.max(e.beatsPerBarMin,Math.min(e.beatsPerBarMax,0|t.beatsPerBar)));let s=4;null!=t.ticksPerBeat&&(s=0|t.ticksPerBeat||4,this.rhythm=e.rhythms.findIndex((t=>t.stepsPerBeat==s)),-1==this.rhythm&&(this.rhythm=1));let i=1,r=1,a=1;if(null!=t.channels)for(const e of t.channels)e.instruments&&(i=Math.max(i,0|e.instruments.length)),e.patterns&&(r=Math.max(r,0|e.patterns.length)),e.sequence&&(a=Math.max(a,0|e.sequence.length));null!=t.layeredInstruments?this.layeredInstruments=!!t.layeredInstruments:this.layeredInstruments=!1,null!=t.patternInstruments?this.patternInstruments=!!t.patternInstruments:this.patternInstruments=i>1,this.patternsPerChannel=Math.min(r,e.barCountMax),this.barCount=Math.min(a,e.barCountMax),null!=t.introBars&&(this.loopStart=Q(0,this.barCount,0|t.introBars)),null!=t.loopBars&&(this.loopLength=Q(1,this.barCount-this.loopStart+1,0|t.loopBars));const o=[],h=[];if(null!=t.channels)for(let i=0;i<t.channels.length;i++){let r=t.channels[i];const a=new ft;let l=!1;if(l=null!=r.type?"drum"==r.type:i>=3,l?h.push(a):o.push(a),null!=r.octaveScrollBar&&(a.octave=Q(0,e.pitchOctaves,1+(0|r.octaveScrollBar)),l&&(a.octave=0)),Array.isArray(r.instruments)){const t=r.instruments;for(let e=0;e<t.length&&!(e>=this.getMaxInstrumentsPerChannel());e++){const s=new pt(l);a.instruments[e]=s,s.fromJsonObject(t[e],l,n)}}for(let t=0;t<this.patternsPerChannel;t++){const e=new st;let n;a.patterns[t]=e,r.patterns&&(n=r.patterns[t]),null!=n&&e.fromJsonObject(n,this,a,s,l)}a.patterns.length=this.patternsPerChannel;for(let t=0;t<this.barCount;t++)a.bars[t]=null!=r.sequence?Math.min(this.patternsPerChannel,r.sequence[t]>>>0):0;a.bars.length=this.barCount}o.length>e.pitchChannelCountMax&&(o.length=e.pitchChannelCountMax),h.length>e.noiseChannelCountMax&&(h.length=e.noiseChannelCountMax),this.pitchChannelCount=o.length,this.noiseChannelCount=h.length,this.channels.length=0,Array.prototype.push.apply(this.channels,o),Array.prototype.push.apply(this.channels,h)}toBase64String(t=null){let e=this.toRawBase64String();if(null!=t&&t){const t=new XMLHttpRequest;if(t.open("POST","https://"+mt.restDbHost+"/doots.json",!1),t.setRequestHeader("Content-Type","application/json"),t.send(JSON.stringify({date:(new Date).toISOString(),name:"Untitled",saved:!1,data:"#"+e})),200!==t.status||"null"===t.responseText)throw new Error("Song upload failed.");e="DB"+JSON.parse(t.responseText).name}return e}fromBase64String(t){const e=/^#?DB/;if(e.test(t)){const n=new XMLHttpRequest;if(n.open("GET","https://"+mt.restDbHost+"/doots/"+t.replace(e,"")+".json",!1),n.send(null),200!==n.status||"null"===n.responseText)throw new Error("Song download failed.");t=JSON.parse(n.responseText).data}this.fromRawBase64String(t)}getPattern(t,e){if(e<0||e>=this.barCount)return null;const n=this.channels[t].bars[e];return 0==n?null:this.channels[t].patterns[n-1]}getBeatsPerMinute(){return this.tempo}static getNeededBits(t){return 32-Math.clz32(Math.ceil(t+1)-1)}}mt.N="YipBox",mt.R=2,mt.L=9,mt.restDbHost="yipboxdb-default-rtdb.europe-west1.firebasedatabase.app";class dt{constructor(){this.delayLine=null,this.allPassG=0,this.allPassGDelta=0,this.sustainFilterA1=0,this.sustainFilterA1Delta=0,this.sustainFilterA2=0,this.sustainFilterA2Delta=0,this.sustainFilterB0=0,this.sustainFilterB0Delta=0,this.sustainFilterB1=0,this.sustainFilterB1Delta=0,this.sustainFilterB2=0,this.sustainFilterB2Delta=0,this.reset()}reset(){this.delayIndex=-1,this.allPassSample=0,this.allPassPrevInput=0,this.sustainFilterSample=0,this.sustainFilterPrevOutput2=0,this.sustainFilterPrevInput1=0,this.sustainFilterPrevInput2=0,this.fractionalDelaySample=0,this.prevDelayLength=-1,this.delayResetOffset=0}update(t,n,s,i,r,a,o,h){const l=2*Math.PI*e.pickedStringDispersionCenterFreq/t.samplesPerSecond,c=this.prevDelayLength,u=s.phaseDeltas[i],p=s.phaseDeltaScales[i],f=u*Math.pow(p,r),m=2*Math.PI*u,d=2*Math.PI*f,y=2*m,v=2*d,M=Math.min(Math.PI,m*e.pickedStringDispersionFreqMult*Math.pow(l/m,e.pickedStringDispersionFreqScale)),b=Math.min(Math.PI,d*e.pickedStringDispersionFreqMult*Math.pow(l/d,e.pickedStringDispersionFreqScale)),S=2*Math.PI*e.pickedStringShelfHz/t.samplesPerSecond,g=(Math.pow(100,a)-1)/99,F=(Math.pow(100,o)-1)/99,I=1==h?.25:0,D=15.6,P=3*t.samplesPerSecond/48e3,w=Math.pow(.5,g*Math.pow(S/(m*D),1+2*I)*D),x=Math.pow(.5,F*Math.pow(S/(d*D),1+2*I)*D),k=Math.pow(w,.002),T=Math.pow(x,.002);St.tempFilterStartCoefficients.allPass1stOrderInvertPhaseAbove(M),t.tempFrequencyResponse.analyze(St.tempFilterStartCoefficients,y);const L=St.tempFilterStartCoefficients.b[0],O=-t.tempFrequencyResponse.angle()/y;St.tempFilterEndCoefficients.allPass1stOrderInvertPhaseAbove(b),t.tempFrequencyResponse.analyze(St.tempFilterEndCoefficients,v);const C=St.tempFilterEndCoefficients.b[0],B=-t.tempFrequencyResponse.angle()/v,A=0==h?0:1;if(0==A){const t=Math.pow(w,e.stringDecayRate),n=Math.pow(x,e.stringDecayRate);St.tempFilterStartCoefficients.highShelf2ndOrder(S,t,.5),St.tempFilterEndCoefficients.highShelf2ndOrder(S,n,.5)}else{const e=Math.pow(1==A?0:1,.25),n=Math.pow(P*P*m*3.3*48e3/t.samplesPerSecond,.5+I)/P/Math.pow(g,.5),s=Math.pow(P*P*d*3.3*48e3/t.samplesPerSecond,.5+I)/P/Math.pow(F,.5),i=n*Math.pow(2,.5-1.75*(1-Math.pow(1-e,.85))),r=s*Math.pow(2,.5-1.75*(1-Math.pow(1-e,.85))),a=Math.pow(2,-Math.pow(2,-Math.pow(e,.9))),o=Math.pow(2,-Math.pow(2,-Math.pow(e,.9)));St.tempFilterStartCoefficients.lowPass2ndOrderButterworth(H(i),a),St.tempFilterEndCoefficients.lowPass2ndOrderButterworth(H(r),o)}t.tempFrequencyResponse.analyze(St.tempFilterStartCoefficients,y);const R=St.tempFilterStartCoefficients.a[1],N=St.tempFilterStartCoefficients.a[2],E=St.tempFilterStartCoefficients.b[0]*k,z=St.tempFilterStartCoefficients.b[1]*k,V=St.tempFilterStartCoefficients.b[2]*k,W=-t.tempFrequencyResponse.angle()/y;t.tempFrequencyResponse.analyze(St.tempFilterEndCoefficients,v);const G=St.tempFilterEndCoefficients.a[1],j=St.tempFilterEndCoefficients.a[2],q=St.tempFilterEndCoefficients.b[0]*T,$=St.tempFilterEndCoefficients.b[1]*T,U=St.tempFilterEndCoefficients.b[2]*T,J=-t.tempFrequencyResponse.angle()/v,K=1/u,Q=1/f,_=Math.ceil(2*Math.max(K,Q)),X=K-O-W,Y=Q-B-J;this.prevDelayLength=X,this.delayLengthDelta=(Y-X)/r,this.allPassG=L,this.sustainFilterA1=R,this.sustainFilterA2=N,this.sustainFilterB0=E,this.sustainFilterB1=z,this.sustainFilterB2=V,this.allPassGDelta=(C-L)/r,this.sustainFilterA1Delta=(G-R)/r,this.sustainFilterA2Delta=(j-N)/r,this.sustainFilterB0Delta=(q-E)/r,this.sustainFilterB1Delta=($-z)/r,this.sustainFilterB2Delta=(U-V)/r;const Z=Math.abs(Math.log2(X/c))>.01,tt=-1==this.delayIndex||Z;if(null==this.delayLine||this.delayLine.length<=_){const e=Math.ceil(2*t.samplesPerSecond/pt.frequencyFromPitch(12)),n=new Float32Array(St.fittingPowerOfTwo(Math.max(e,_)));if(!tt&&null!=this.delayLine){const t=this.delayLine.length-1>>0,e=this.delayIndex+this.delayResetOffset;this.delayIndex=this.delayLine.length-this.delayResetOffset;for(let s=0;s<this.delayLine.length;s++)n[s]=this.delayLine[e+s&t]}this.delayLine=n}const et=this.delayLine,nt=et.length-1>>0;if(tt){this.delayIndex=0,this.allPassSample=0,this.allPassPrevInput=0,this.sustainFilterSample=0,this.sustainFilterPrevOutput2=0,this.sustainFilterPrevInput1=0,this.sustainFilterPrevInput2=0,this.fractionalDelaySample=0;const e=-X,s=Math.floor(e-K/2),i=Math.ceil(s+2*K);this.delayResetOffset=i;for(let t=s;t<=i;t++)et[t&nt]=0;const r=n.wave,a=r.length-1,o=a/K,h=Math.min(.2*K,.003*t.samplesPerSecond),l=Math.ceil(e),c=e+K+h,u=c;let p=(l-e)*o,f=0;for(let t=l;t<=u;t++){const n=0|p,s=n%a;let i=r[s];const l=p-n;i+=(r[s+1]-i)*l;const u=(i-f)/o,m=Math.min(1,(t-e)/h)*Math.min(1,(c-t)/h),d=m*m*(3-2*m);et[t&nt]+=u*d,f=i,p+=o}}}}class yt{constructor(){this.noteSecondsStart=0,this.noteSecondsEnd=0,this.noteTicksStart=0,this.noteTicksEnd=0,this.noteSizeStart=e.noteSizeMax,this.noteSizeEnd=e.noteSizeMax,this.prevNoteSize=e.noteSizeMax,this.nextNoteSize=e.noteSizeMax,this.V=e.noteSizeMax,this.prevNoteSecondsStart=0,this.prevNoteSecondsEnd=0,this.prevNoteTicksStart=0,this.prevNoteTicksEnd=0,this.W=e.noteSizeMax,this.prevSlideStart=!1,this.prevSlideEnd=!1,this.nextSlideStart=!1,this.nextSlideEnd=!1,this.prevSlideRatioStart=0,this.prevSlideRatioEnd=0,this.nextSlideRatioStart=0,this.nextSlideRatioEnd=0,this.envelopeStarts=[],this.envelopeEnds=[],this.j=[],this.q=0,this.lowpassCutoffDecayVolumeCompensation=1;for(let t=0;t<36;t++)this.envelopeStarts[t]=1,this.envelopeEnds[t]=1;this.reset()}reset(){this.noteSecondsEnd=0,this.noteTicksEnd=0,this.V=e.noteSizeMax,this.prevNoteSecondsEnd=0,this.prevNoteTicksEnd=0,this.W=e.noteSizeMax,this.q=0}computeEnvelopes(t,n,s,i,r){const a=t.getTransition();null==r||!r.atNoteStart||a.continues||r.forceContinueAtStart||(this.prevNoteSecondsEnd=this.noteSecondsEnd,this.prevNoteTicksEnd=this.noteTicksEnd,this.W=this.V,this.noteSecondsEnd=0,this.noteTicksEnd=0),null!=r&&(null!=r.note?this.V=r.note.pins[r.note.pins.length-1].size:this.V=e.noteSizeMax);const o=s+1,h=this.noteSecondsEnd,l=h+i,c=this.noteTicksEnd,u=c+1,p=this.prevNoteSecondsEnd,f=p+i,m=this.prevNoteTicksEnd,d=m+1,y=1/(e.ticksPerPart*e.partsPerBeat),v=y*s,M=y*o;let b=this.V,S=this.V,g=this.W,F=0,I=!1,D=!1,P=!1,w=!1,x=0,k=0,T=0,L=0;if(null!=r&&null!=r.note&&!r.passedEndOfNote){const t=r.note.getEndPinIndex(n),i=r.note.pins[t-1],h=r.note.pins[t],l=(r.note.start+i.time)*e.ticksPerPart,c=(r.note.start+h.time)*e.ticksPerPart,u=(s-l)/(c-l),p=(o-l)/(c-l);if(b=i.size+(h.size-i.size)*u,S=i.size+(h.size-i.size)*p,a.slides){const t=r.noteStartPart*e.ticksPerPart,n=r.noteEndPart*e.ticksPerPart,i=.5*(n-t),h=Math.min(i,a.slideTicks);null==r.prevNote||r.forceContinueAtStart||(s-t<h&&(I=!0,x=.5*(1-(s-t)/h)),o-t<h&&(D=!0,k=.5*(1-(o-t)/h))),null==r.nextNote||r.forceContinueAtEnd||(F=r.nextNote.pins[0].size,n-s<h&&(P=!0,T=.5*(1-(n-s)/h)),n-o<h&&(w=!0,L=.5*(1-(n-o)/h)))}}let O=1,C=!1;for(let n=0;n<=t.envelopeCount;n++){let s,i,r;if(n==t.envelopeCount){if(C)break;s=e.instrumentAutomationTargets.dictionary.noteVolume,i=0,r=e.envelopes.dictionary["note size"]}else{let a=t.envelopes[n];s=e.instrumentAutomationTargets[a.target],i=a.index,r=e.envelopes[a.envelope],0==r.type&&(C=!0)}if(null!=s.computeIndex){const e=s.computeIndex+i;let n=yt.computeEnvelope(r,h,v,b),a=yt.computeEnvelope(r,l,M,S);if(I){n+=(yt.computeEnvelope(r,p,v,g)-n)*x}if(D){a+=(yt.computeEnvelope(r,f,M,g)-a)*k}if(P){n+=(yt.computeEnvelope(r,0,v,F)-n)*T}if(w){a+=(yt.computeEnvelope(r,0,M,F)-a)*L}if(this.envelopeStarts[e]*=n,this.envelopeEnds[e]*=a,this.j[this.q++]=e,s.isFilter){const e=t.noteFilter;e.controlPointCount>i&&0==e.controlPoints[i].type&&(O=Math.max(O,yt.getLowpassCutoffDecayVolumeCompensation(r)))}}}this.noteSecondsStart=h,this.noteSecondsEnd=l,this.noteTicksStart=c,this.noteTicksEnd=u,this.prevNoteSecondsStart=p,this.prevNoteSecondsEnd=f,this.prevNoteTicksStart=m,this.prevNoteTicksEnd=d,this.prevNoteSize=g,this.nextNoteSize=F,this.noteSizeStart=b,this.noteSizeEnd=S,this.prevSlideStart=I,this.prevSlideEnd=D,this.nextSlideStart=P,this.nextSlideEnd=w,this.prevSlideRatioStart=x,this.prevSlideRatioEnd=k,this.nextSlideRatioStart=T,this.nextSlideRatioEnd=L,this.lowpassCutoffDecayVolumeCompensation=O}clearEnvelopes(){for(let t=0;t<this.q;t++){const e=this.j[t];this.envelopeStarts[e]=1,this.envelopeEnds[e]=1}this.q=0}static computeEnvelope(t,e,n,s){switch(t.type){case 0:return St.noteSizeToVolumeMult(s);case 1:return 1;case 4:return 1/(1+e*t.speed);case 5:return 1-1/(1+e*t.speed);case 6:return.5-.5*Math.cos(2*n*Math.PI*t.speed);case 7:return.75-.25*Math.cos(2*n*Math.PI*t.speed);case 2:return Math.max(1,2-10*e);case 3:const i=.25/Math.sqrt(t.speed);return e<i?e/i:1/(1+(e-i)*t.speed);case 8:return Math.pow(2,-t.speed*e);default:throw new Error("Unrecognized operator envelope type.")}}static getLowpassCutoffDecayVolumeCompensation(t){return 8==t.type?1.25+.025*t.speed:4==t.type?1+.02*t.speed:1}}class vt{constructor(){this.pitches=Array(e.maxChordSize).fill(0),this.pitchCount=0,this.chordSize=0,this.drumsetPitch=null,this.note=null,this.prevNote=null,this.nextNote=null,this.prevNotePitchIndex=0,this.nextNotePitchIndex=0,this.freshlyAllocated=!0,this.atNoteStart=!1,this.isOnLastTick=!1,this.passedEndOfNote=!1,this.forceContinueAtStart=!1,this.forceContinueAtEnd=!1,this.noteStartPart=0,this.noteEndPart=0,this.ticksSinceReleased=0,this.liveInputSamplesHeld=0,this.lastInterval=0,this.noiseSample=0,this.phases=[],this.phaseDeltas=[],this.phaseDeltaScales=[],this.expression=0,this.expressionDelta=0,this.operatorExpressions=[],this.operatorExpressionDeltas=[],this.prevPitchExpressions=Array(e.maxPitchOrOperatorCount).fill(null),this.prevVibrato=null,this.prevStringDecay=null,this.pulseWidth=0,this.pulseWidthDelta=0,this.supersawDynamism=0,this.supersawDynamismDelta=0,this.supersawUnisonDetunes=[],this.supersawShape=0,this.supersawShapeDelta=0,this.supersawDelayLength=0,this.supersawDelayLengthDelta=0,this.supersawDelayLine=null,this.supersawDelayIndex=-1,this.supersawPrevPhaseDelta=null,this.pickedStrings=[],this.noteFilters=[],this.noteFilterCount=0,this.initialNoteFilterInput1=0,this.initialNoteFilterInput2=0,this.specialIntervalExpressionMult=1,this.feedbackOutputs=[],this.feedbackMult=0,this.feedbackDelta=0,this.envelopeComputer=new yt,this.reset()}reset(){this.noiseSample=0;for(let t=0;t<e.maxPitchOrOperatorCount;t++)this.phases[t]=0,this.feedbackOutputs[t]=0,this.prevPitchExpressions[t]=null;for(let t=0;t<this.noteFilterCount;t++)this.noteFilters[t].resetOutput();this.noteFilterCount=0,this.initialNoteFilterInput1=0,this.initialNoteFilterInput2=0,this.liveInputSamplesHeld=0,this.supersawDelayIndex=-1;for(const t of this.pickedStrings)t.reset();this.envelopeComputer.reset(),this.prevVibrato=null,this.prevStringDecay=null,this.supersawPrevPhaseDelta=null,this.drumsetPitch=null}}class Mt{constructor(){this.awake=!1,this.computed=!1,this.tonesAddedInThisTick=!1,this.flushingDelayLines=!1,this.deactivateAfterThisTick=!1,this.attentuationProgress=0,this.flushedSamples=0,this.activeTones=new q,this.releasedTones=new q,this.liveInputTones=new q,this.type=0,this.synthesizer=null,this.wave=null,this.noisePitchFilterMult=1,this.unison=null,this.chord=null,this.effects=0,this.eqFilterVolume=1,this.eqFilterVolumeDelta=0,this.mixVolume=1,this.mixVolumeDelta=0,this.delayInputMult=0,this.delayInputMultDelta=0,this.distortion=0,this.distortionDelta=0,this.distortionDrive=0,this.distortionDriveDelta=0,this.distortionFractionalInput1=0,this.distortionFractionalInput2=0,this.distortionFractionalInput3=0,this.distortionPrevInput=0,this.distortionNextOutput=0,this.bitcrusherPrevInput=0,this.bitcrusherCurrentOutput=0,this.bitcrusherPhase=1,this.bitcrusherPhaseDelta=0,this.bitcrusherPhaseDeltaScale=1,this.bitcrusherScale=1,this.bitcrusherScaleScale=1,this.bitcrusherFoldLevel=1,this.bitcrusherFoldLevelScale=1,this.eqFilters=[],this.eqFilterCount=0,this.initialEqFilterInput1=0,this.initialEqFilterInput2=0,this.panningDelayLine=null,this.panningDelayPos=0,this.panningVolumeL=0,this.panningVolumeR=0,this.panningVolumeDeltaL=0,this.panningVolumeDeltaR=0,this.panningOffsetL=0,this.panningOffsetR=0,this.panningOffsetDeltaL=0,this.panningOffsetDeltaR=0,this.chorusDelayLineL=null,this.chorusDelayLineR=null,this.chorusDelayLineDirty=!1,this.chorusDelayPos=0,this.chorusPhase=0,this.chorusVoiceMult=0,this.chorusVoiceMultDelta=0,this.chorusCombinedMult=0,this.chorusCombinedMultDelta=0,this.echoDelayLineL=null,this.echoDelayLineR=null,this.echoDelayLineDirty=!1,this.echoDelayPos=0,this.echoDelayOffsetStart=0,this.echoDelayOffsetEnd=null,this.echoDelayOffsetRatio=0,this.echoDelayOffsetRatioDelta=0,this.echoMult=0,this.echoMultDelta=0,this.echoShelfA1=0,this.echoShelfB0=0,this.echoShelfB1=0,this.echoShelfSampleL=0,this.echoShelfSampleR=0,this.echoShelfPrevInputL=0,this.echoShelfPrevInputR=0,this.reverbDelayLine=null,this.reverbDelayLineDirty=!1,this.reverbDelayPos=0,this.reverbMult=0,this.reverbMultDelta=0,this.reverbShelfA1=0,this.reverbShelfB0=0,this.reverbShelfB1=0,this.reverbShelfSample0=0,this.reverbShelfSample1=0,this.reverbShelfSample2=0,this.reverbShelfSample3=0,this.reverbShelfPrevInput0=0,this.reverbShelfPrevInput1=0,this.reverbShelfPrevInput2=0,this.reverbShelfPrevInput3=0,this.spectrumWave=new at,this.harmonicsWave=new ht,this.drumsetSpectrumWaves=[];for(let t=0;t<e.drumCount;t++)this.drumsetSpectrumWaves[t]=new at}allocateNecessaryBuffers(t,n,s){if(v(n.effects)&&(null==this.panningDelayLine||this.panningDelayLine.length<t.panningDelayBufferSize)&&(this.panningDelayLine=new Float32Array(t.panningDelayBufferSize)),M(n.effects)&&((null==this.chorusDelayLineL||this.chorusDelayLineL.length<t.chorusDelayBufferSize)&&(this.chorusDelayLineL=new Float32Array(t.chorusDelayBufferSize)),(null==this.chorusDelayLineR||this.chorusDelayLineR.length<t.chorusDelayBufferSize)&&(this.chorusDelayLineR=new Float32Array(t.chorusDelayBufferSize))),b(n.effects)){const t=Math.max(e.echoDelayRange>>1,n.echoDelay+1),i=2*St.fittingPowerOfTwo(t*e.echoDelayStepTicks*s);if(null==this.echoDelayLineL||null==this.echoDelayLineR)this.echoDelayLineL=new Float32Array(i),this.echoDelayLineR=new Float32Array(i);else if(this.echoDelayLineL.length<i||this.echoDelayLineR.length<i){const t=new Float32Array(i),e=new Float32Array(i),n=this.echoDelayLineL.length-1;for(let s=0;s<this.echoDelayLineL.length;s++)t[s]=this.echoDelayLineL[this.echoDelayPos+s&n],e[s]=this.echoDelayLineL[this.echoDelayPos+s&n];this.echoDelayPos=this.echoDelayLineL.length,this.echoDelayLineL=t,this.echoDelayLineR=e}}S(n.effects)&&null==this.reverbDelayLine&&(this.reverbDelayLine=new Float32Array(e.reverbDelayBufferSize))}deactivate(){this.bitcrusherPrevInput=0,this.bitcrusherCurrentOutput=0,this.bitcrusherPhase=1;for(let t=0;t<this.eqFilterCount;t++)this.eqFilters[t].resetOutput();if(this.eqFilterCount=0,this.initialEqFilterInput1=0,this.initialEqFilterInput2=0,this.distortionFractionalInput1=0,this.distortionFractionalInput2=0,this.distortionFractionalInput3=0,this.distortionPrevInput=0,this.distortionNextOutput=0,this.panningDelayPos=0,null!=this.panningDelayLine)for(let t=0;t<this.panningDelayLine.length;t++)this.panningDelayLine[t]=0;this.echoDelayOffsetEnd=null,this.echoShelfSampleL=0,this.echoShelfSampleR=0,this.echoShelfPrevInputL=0,this.echoShelfPrevInputR=0,this.reverbShelfSample0=0,this.reverbShelfSample1=0,this.reverbShelfSample2=0,this.reverbShelfSample3=0,this.reverbShelfPrevInput0=0,this.reverbShelfPrevInput1=0,this.reverbShelfPrevInput2=0,this.reverbShelfPrevInput3=0,this.awake=!1,this.flushingDelayLines=!1,this.deactivateAfterThisTick=!1,this.attentuationProgress=0,this.flushedSamples=0}resetAllEffects(){if(this.deactivate(),this.chorusDelayLineDirty){for(let t=0;t<this.chorusDelayLineL.length;t++)this.chorusDelayLineL[t]=0;for(let t=0;t<this.chorusDelayLineR.length;t++)this.chorusDelayLineR[t]=0}if(this.echoDelayLineDirty){for(let t=0;t<this.echoDelayLineL.length;t++)this.echoDelayLineL[t]=0;for(let t=0;t<this.echoDelayLineR.length;t++)this.echoDelayLineR[t]=0}if(this.reverbDelayLineDirty)for(let t=0;t<this.reverbDelayLine.length;t++)this.reverbDelayLine[t]=0;this.chorusPhase=0}compute(t,n,s,i,r){this.computed=!0,this.type=n.type,this.synthesizer=St.getInstrumentSynthFunction(n),this.unison=e.unisons[n.unison],this.chord=n.getChord(),this.noisePitchFilterMult=e.chipNoises[n.chipNoise].pitchFilterMult;let a=n.effects;0==n.distortion&&(a&=-9),n.pan==e.panCenter&&(a&=-5),0==n.chorus&&(a&=-3),0==n.echoSustain&&(a&=-65),0==n.reverb&&(a&=-2),this.effects=a,this.allocateNecessaryBuffers(t,n,s);const o=t.samplesPerSecond;this.updateWaves(n,o);const h=d(a),l=y(a),c=v(a),u=M(a),p=b(a),f=S(a);if(h){const t=Math.min(1,n.distortion/(e.distortionRange-1)),s=Math.min(1,n.distortion/(e.distortionRange-1)),r=Math.pow(1-.895*(Math.pow(20,t)-1)/19,2),a=Math.pow(1-.895*(Math.pow(20,s)-1)/19,2),o=(1+2*t)/e.distortionBaseVolume,h=(1+2*s)/e.distortionBaseVolume;this.distortion=r,this.distortionDelta=(a-r)/i,this.distortionDrive=o,this.distortionDriveDelta=(h-o)/i}if(l){const s=n.bitcrusherFreq,r=n.bitcrusherFreq,a=n.bitcrusherQuantization,h=n.bitcrusherQuantization,l=e.keys[t.song.key].basePitch,c=pt.frequencyFromPitch(l+60)*Math.pow(2,(e.bitcrusherFreqRange-1-s)*e.bitcrusherOctaveStep),u=pt.frequencyFromPitch(l+60)*Math.pow(2,(e.bitcrusherFreqRange-1-r)*e.bitcrusherOctaveStep),p=Math.min(1,c/o),f=Math.min(1,u/o);this.bitcrusherPhaseDelta=p,this.bitcrusherPhaseDeltaScale=Math.pow(f/p,1/i);const m=2*e.bitcrusherBaseVolume*Math.pow(2,1-Math.pow(2,.5*(e.bitcrusherQuantizationRange-1-a))),d=2*e.bitcrusherBaseVolume*Math.pow(2,1-Math.pow(2,.5*(e.bitcrusherQuantizationRange-1-h)));this.bitcrusherScale=m,this.bitcrusherScaleScale=Math.pow(d/m,1/i);const y=2*e.bitcrusherBaseVolume*Math.pow(1.5,e.bitcrusherQuantizationRange-1-a),v=2*e.bitcrusherBaseVolume*Math.pow(1.5,e.bitcrusherQuantizationRange-1-h);this.bitcrusherFoldLevel=y,this.bitcrusherFoldLevelScale=Math.pow(v/y,1/i)}let m=1;const g=n.eqFilter;for(let t=0;t<g.controlPointCount;t++){const e=g.controlPoints[t];e.toCoefficients(St.tempFilterStartCoefficients,o,1,1),e.toCoefficients(St.tempFilterEndCoefficients,o,1,1),this.eqFilters.length<=t&&(this.eqFilters[t]=new J),this.eqFilters[t].loadCoefficientsWithGradient(St.tempFilterStartCoefficients,St.tempFilterEndCoefficients,1/i,0==e.type),m*=e.getVolumeCompensationMult()}this.eqFilterCount=g.controlPointCount,m=Math.min(3,m);const F=St.instrumentVolumeToVolumeMult(n.volume);this.mixVolume=F;const I=F;this.mixVolumeDelta=(I-this.mixVolume)/i;let D=m,P=m,w=1,x=1;if(c){const s=(n.pan-e.panCenter)/e.panCenter,r=Math.max(-1,Math.min(1,s)),a=Math.max(-1,Math.min(1,s)),h=1.414*Math.cos((1+r)*Math.PI*.25),l=1.414*Math.cos((1-r)*Math.PI*.25),c=1.414*Math.cos((1+a)*Math.PI*.25),u=1.414*Math.cos((1-a)*Math.PI*.25),p=o*e.panDelaySecondsMax,f=r*p,m=a*p,d=Math.max(0,f),y=Math.max(0,-f),v=Math.max(0,m),M=Math.max(0,-m);this.panningVolumeL=h,this.panningVolumeR=l,this.panningVolumeDeltaL=(c-h)/i,this.panningVolumeDeltaR=(u-l)/i,this.panningOffsetL=this.panningDelayPos-d+t.panningDelayBufferSize,this.panningOffsetR=this.panningDelayPos-y+t.panningDelayBufferSize,this.panningOffsetDeltaL=(v-d)/i,this.panningOffsetDeltaR=(M-y)/i}if(u){let t=Math.min(1,n.chorus/(e.chorusRange-1)),s=Math.min(1,n.chorus/(e.chorusRange-1));t=.6*t+.4*Math.pow(t,6),s=.6*s+.4*Math.pow(s,6);const r=1/Math.sqrt(3*t*t+1),a=1/Math.sqrt(3*s*s+1);this.chorusVoiceMult=t,this.chorusVoiceMultDelta=(s-t)/i,this.chorusCombinedMult=r,this.chorusCombinedMultDelta=(a-r)/i}let k=0,T=0;if(p){const r=.9*Math.min(1,Math.pow(n.echoSustain/e.echoSustainRange,1.1)),a=.9*Math.min(1,Math.pow(n.echoSustain/e.echoSustainRange,1.1));this.echoMult=r,this.echoMultDelta=(a-r)/i,k=Math.max(r,a);const h=Math.round((n.echoDelay+1)*e.echoDelayStepTicks*s);null!=this.echoDelayOffsetEnd?this.echoDelayOffsetStart=this.echoDelayOffsetEnd:this.echoDelayOffsetStart=h,this.echoDelayOffsetEnd=h,T=.5*(this.echoDelayOffsetStart+this.echoDelayOffsetEnd)/o,this.echoDelayOffsetRatio=0,this.echoDelayOffsetRatioDelta=1/i;const l=2*Math.PI*e.echoShelfHz/t.samplesPerSecond;St.tempFilterStartCoefficients.highShelf1stOrder(l,e.echoShelfGain),this.echoShelfA1=St.tempFilterStartCoefficients.a[1],this.echoShelfB0=St.tempFilterStartCoefficients.b[0],this.echoShelfB1=St.tempFilterStartCoefficients.b[1]}let L=0;if(f){const s=.425*Math.min(1,Math.pow(n.reverb/e.reverbRange,.667)),r=.425*Math.min(1,Math.pow(n.reverb/e.reverbRange,.667));this.reverbMult=s,this.reverbMultDelta=(r-s)/i,L=Math.max(s,r);const a=2*Math.PI*e.reverbShelfHz/t.samplesPerSecond;St.tempFilterStartCoefficients.highShelf1stOrder(a,e.reverbShelfGain),this.reverbShelfA1=St.tempFilterStartCoefficients.a[1],this.reverbShelfB0=St.tempFilterStartCoefficients.b[0],this.reverbShelfB1=St.tempFilterStartCoefficients.b[1]}if(this.tonesAddedInThisTick)this.attentuationProgress=0,this.flushedSamples=0,this.flushingDelayLines=!1;else if(this.flushingDelayLines){D=0,P=0,w=0,x=0;let n=0;u&&(n+=t.chorusDelayBufferSize),p&&(n+=this.echoDelayLineL.length),f&&(n+=e.reverbDelayBufferSize),this.flushedSamples+=i,this.flushedSamples>=n&&(this.deactivateAfterThisTick=!0)}else{0==this.attentuationProgress||(D=0),P=0;const t=1/256,n=-Math.log2(t);let i=0;if(u&&(i+=e.chorusMaxDelay),p){const t=Math.pow(k,1/T);i+=-1/Math.log2(t)*n}if(f){const t=2*L,s=e.reverbDelayBufferSize/4/o,r=Math.pow(t,1/s);i+=-1/Math.log2(r)*n}const r=s/o/i,a=this.attentuationProgress+r;a>=1&&(x=0),this.attentuationProgress=a,this.attentuationProgress>=1&&(this.flushingDelayLines=!0)}this.eqFilterVolume=D,this.eqFilterVolumeDelta=(P-D)/i,this.delayInputMult=w,this.delayInputMultDelta=(x-w)/i}updateWaves(t,n){if(0==t.type)this.wave=e.chipWaves[t.chipWave].samples;else if(2==t.type)this.wave=r(t.chipNoise,j,W);else if(5==t.type)this.wave=this.harmonicsWave.getCustomWave(t.harmonicsWave,t.type);else if(7==t.type)this.wave=this.harmonicsWave.getCustomWave(t.harmonicsWave,t.type);else if(3==t.type)this.wave=this.spectrumWave.getCustomWave(t.spectrumWave,8);else if(4==t.type){for(let n=0;n<e.drumCount;n++)this.drumsetSpectrumWaves[n].getCustomWave(t.drumsetSpectrumWaves[n],Mt.$(n));this.wave=null}else this.wave=null}getDrumsetWave(t){if(4==this.type)return this.drumsetSpectrumWaves[t].wave;throw new Error("Unhandled instrument type in getDrumsetWave")}static drumsetIndexReferenceDelta(t){return pt.frequencyFromPitch(e.spectrumBasePitch+6*t)/44100}static $(t){return 15+Math.log2(Mt.drumsetIndexReferenceDelta(t))}}class bt{constructor(){this.instruments=[],this.muted=!1,this.singleSeamlessInstrument=null}}class St{syncSongState(){const t=this.song.getChannelCount();for(let e=this.channels.length;e<t;e++)this.channels[e]=new bt;this.channels.length=t;for(let e=0;e<t;e++){const t=this.song.channels[e],n=this.channels[e];for(let e=n.instruments.length;e<t.instruments.length;e++)n.instruments[e]=new Mt;if(n.instruments.length=t.instruments.length,n.muted!=t.muted&&(n.muted=t.muted,n.muted))for(const t of n.instruments)t.resetAllEffects()}}warmUpSynthesizer(t){if(null!=t){this.syncSongState();const e=this.getSamplesPerTick();for(let n=0;n<t.getChannelCount();n++)for(let s=0;s<t.channels[n].instruments.length;s++){const i=t.channels[n].instruments[s],r=this.channels[n].instruments[s];St.getInstrumentSynthFunction(i),r.updateWaves(i,this.samplesPerSecond),r.allocateNecessaryBuffers(this,i,e)}}}static operatorAmplitudeCurve(t){return(Math.pow(16,t/15)-1)/15}get playing(){return this.isPlayingSong}get recording(){return this.isRecording}get playhead(){return this.playheadInternal}set playhead(t){if(null!=this.song){this.playheadInternal=Math.max(0,Math.min(this.song.barCount,t));let n=this.playheadInternal;this.bar=Math.floor(n),n=this.song.beatsPerBar*(n-this.bar),this.beat=Math.floor(n),n=e.partsPerBeat*(n-this.beat),this.part=Math.floor(n),n=e.ticksPerPart*(n-this.part),this.tick=Math.floor(n),this.tickSampleCountdown=0,this.isAtStartOfTick=!0,this.prevBar=null}}getSamplesPerBar(){if(null==this.song)throw new Error;return this.getSamplesPerTick()*e.ticksPerPart*e.partsPerBeat*this.song.beatsPerBar}getTicksIntoBar(){return(this.beat*e.partsPerBeat+this.part)*e.ticksPerPart+this.tick}getCurrentPart(){return this.beat*e.partsPerBeat+this.part}getTotalBars(t,e){if(null==this.song)throw new Error;let n=this.song.loopLength*(this.loopRepeatCount+1);return t&&(n+=this.song.loopStart),e&&(n+=this.song.barCount-(this.song.loopStart+this.song.loopLength)),n}constructor(t=null){this.samplesPerSecond=44100,this.song=null,this.preferLowerLatency=!1,this.anticipatePoorPerformance=!1,this.liveInputDuration=0,this.liveInputStarted=!1,this.liveInputPitches=[],this.liveInputChannel=0,this.liveInputInstruments=[],this.loopRepeatCount=-1,this.volume=1,this.enableMetronome=!1,this.countInMetronome=!1,this.playheadInternal=0,this.bar=0,this.prevBar=null,this.nextBar=null,this.beat=0,this.part=0,this.tick=0,this.isAtStartOfTick=!0,this.tickSampleCountdown=0,this.isPlayingSong=!1,this.isRecording=!1,this.liveInputEndTime=0,this.browserAutomaticallyClearsAudioBuffer=!0,this.tempDrumSetControlPoint=new lt,this.tempFrequencyResponse=new U,this.channels=[],this.tonePool=new q,this.tempMatchedPitchTones=Array(e.maxChordSize).fill(null),this.startedMetronome=!1,this.metronomeSamplesRemaining=-1,this.metronomeAmplitude=0,this.metronomePrevAmplitude=0,this.metronomeFilter=0,this.limit=0,this.tempMonoInstrumentSampleBuffer=null,this.audioCtx=null,this.scriptNode=null,this.audioProcessCallback=t=>{const e=t.outputBuffer,n=e.getChannelData(0),s=e.getChannelData(1);if(!this.browserAutomaticallyClearsAudioBuffer||0==n[0]&&0==s[0]&&0==n[e.length-1]&&0==s[e.length-1]||(this.browserAutomaticallyClearsAudioBuffer=!1),!this.browserAutomaticallyClearsAudioBuffer){const t=e.length;for(let e=0;e<t;e++)n[e]=0,s[e]=0}!this.isPlayingSong&&performance.now()>=this.liveInputEndTime?this.deactivateAudio():this.synthesize(n,s,e.length,this.isPlayingSong)},this.computeDelayBufferSizes(),null!=t&&this.setSong(t)}setSong(t){"string"==typeof t?this.song=new mt(t):t instanceof mt&&(this.song=t),this.prevBar=null}computeDelayBufferSizes(){this.panningDelayBufferSize=St.fittingPowerOfTwo(this.samplesPerSecond*e.panDelaySecondsMax),this.panningDelayBufferMask=this.panningDelayBufferSize-1,this.chorusDelayBufferSize=St.fittingPowerOfTwo(this.samplesPerSecond*e.chorusMaxDelay),this.chorusDelayBufferMask=this.chorusDelayBufferSize-1}activateAudio(){const t=this.anticipatePoorPerformance?this.preferLowerLatency?2048:4096:this.preferLowerLatency?512:2048;if(null==this.audioCtx||null==this.scriptNode||this.scriptNode.bufferSize!=t){null!=this.scriptNode&&this.deactivateAudio();const e=this.anticipatePoorPerformance?this.preferLowerLatency?"balanced":"playback":this.preferLowerLatency?"interactive":"balanced";this.audioCtx=this.audioCtx||new(window.AudioContext||window.webkitAudioContext)({latencyHint:e}),this.samplesPerSecond=this.audioCtx.sampleRate,this.scriptNode=this.audioCtx.createScriptProcessor?this.audioCtx.createScriptProcessor(t,0,2):this.audioCtx.createJavaScriptNode(t,0,2),this.scriptNode.onaudioprocess=this.audioProcessCallback,this.scriptNode.channelCountMode="explicit",this.scriptNode.channelInterpretation="speakers",this.scriptNode.connect(this.audioCtx.destination),this.computeDelayBufferSizes()}this.audioCtx.resume()}deactivateAudio(){null!=this.audioCtx&&null!=this.scriptNode&&(this.scriptNode.disconnect(this.audioCtx.destination),this.scriptNode=null,this.audioCtx.close&&this.audioCtx.close(),this.audioCtx=null)}maintainLiveInput(){this.activateAudio(),this.liveInputEndTime=performance.now()+1e4}play(){this.isPlayingSong||(this.isPlayingSong=!0,this.warmUpSynthesizer(this.song),this.activateAudio())}pause(){this.isPlayingSong&&(this.isPlayingSong=!1,this.isRecording=!1)}startRecording(){this.preferLowerLatency=!0,this.isRecording=!0,this.play()}snapToStart(){this.bar=0,this.snapToBar()}goToBar(t){this.bar=t,this.playheadInternal=this.bar,this.prevBar=null}snapToBar(){this.playheadInternal=this.bar,this.beat=0,this.part=0,this.tick=0,this.tickSampleCountdown=0,this.isAtStartOfTick=!0,this.prevBar=null}resetEffects(){if(this.limit=0,this.freeAllTones(),null!=this.song)for(const t of this.channels)for(const e of t.instruments)e.resetAllEffects()}jumpIntoLoop(){if(this.song&&(this.bar<this.song.loopStart||this.bar>=this.song.loopStart+this.song.loopLength)){const t=this.bar;this.bar=this.song.loopStart,this.playheadInternal+=this.bar-t,this.prevBar=null}}goToNextBar(){if(!this.song)return;this.prevBar=this.bar;const t=this.bar;this.bar++,this.bar>=this.song.barCount&&(this.bar=0),this.playheadInternal+=this.bar-t}goToPrevBar(){if(!this.song)return;this.prevBar=null;const t=this.bar;this.bar--,(this.bar<0||this.bar>=this.song.barCount)&&(this.bar=this.song.barCount-1),this.playheadInternal+=this.bar-t}getNextBar(){let t=this.bar+1;return this.isRecording?t>=this.song.barCount&&(t=this.song.barCount-1):0!=this.loopRepeatCount&&t==this.song.loopStart+this.song.loopLength&&(t=this.song.loopStart),t}synthesize(t,n,s,i=!0){if(null==this.song){for(let e=0;e<s;e++)t[e]=0,n[e]=0;return void this.deactivateAudio()}const r=this.song,a=this.getSamplesPerTick();let o=!1;(this.tickSampleCountdown<=0||this.tickSampleCountdown>a)&&(this.tickSampleCountdown=a,this.isAtStartOfTick=!0),i&&(this.beat>=r.beatsPerBar&&(this.beat=0,this.part=0,this.tick=0,this.tickSampleCountdown=a,this.isAtStartOfTick=!0,this.prevBar=this.bar,this.bar=this.getNextBar(),this.bar<=this.prevBar&&this.loopRepeatCount>0&&this.loopRepeatCount--),this.bar>=r.barCount&&(this.bar=0,-1!=this.loopRepeatCount&&(o=!0,this.pause()))),this.syncSongState(),(null==this.tempMonoInstrumentSampleBuffer||this.tempMonoInstrumentSampleBuffer.length<s)&&(this.tempMonoInstrumentSampleBuffer=new Float32Array(s));const h=+this.volume,l=1-Math.pow(.5,4/this.samplesPerSecond),c=1-Math.pow(.5,4e3/this.samplesPerSecond);let u=+this.limit,p=0;for(;p<s&&!o;){this.nextBar=this.getNextBar(),this.nextBar>=r.barCount&&(this.nextBar=null);const f=s-p,m=Math.ceil(this.tickSampleCountdown),d=Math.min(m,f),y=p+d;for(let s=0;s<r.getChannelCount();s++){const o=r.channels[s],h=this.channels[s];this.isAtStartOfTick&&(this.determineCurrentActiveTones(r,s,a,i&&!this.countInMetronome),this.determineLiveInputTones(r,s,a));for(let i=0;i<o.instruments.length;i++){const l=o.instruments[i],c=h.instruments[i];if(this.isAtStartOfTick){let t=c.activeTones.count()+c.liveInputTones.count();for(let n=0;n<c.releasedTones.count();n++){const i=c.releasedTones.get(n);if(i.ticksSinceReleased>=Math.abs(l.getFadeOutTicks())){this.freeReleasedTone(c,n),n--;continue}const o=t>=e.maximumTonesPerChannel;this.computeTone(r,s,a,i,!0,o),t++}c.awake&&(c.computed||c.compute(this,l,a,Math.ceil(a),null),c.computed=!1)}for(let t=0;t<c.activeTones.count();t++){const e=c.activeTones.get(t);this.playTone(s,p,d,e)}for(let t=0;t<c.liveInputTones.count();t++){const e=c.liveInputTones.get(t);this.playTone(s,p,d,e)}for(let t=0;t<c.releasedTones.count();t++){const e=c.releasedTones.get(t);this.playTone(s,p,d,e)}c.awake&&St.effectsSynth(this,t,n,p,d,c)}}if(this.enableMetronome||this.countInMetronome)if(0==this.part){if(!this.startedMetronome){const t=r.beatsPerBar>4&&r.beatsPerBar%2==0&&this.beat==r.beatsPerBar/2,e=0==this.beat?8:t?6:4,n=0==this.beat?1600:t?1200:800,s=0==this.beat?.06:t?.05:.04,i=this.samplesPerSecond/n,a=2*Math.PI/i;this.metronomeSamplesRemaining=Math.floor(i*e),this.metronomeFilter=2*Math.cos(a),this.metronomeAmplitude=s*Math.sin(a),this.metronomePrevAmplitude=0,this.startedMetronome=!0}if(this.metronomeSamplesRemaining>0){const e=Math.min(y,p+this.metronomeSamplesRemaining);this.metronomeSamplesRemaining-=e-p;for(let s=p;s<e;s++){t[s]+=this.metronomeAmplitude,n[s]+=this.metronomeAmplitude;const e=this.metronomeFilter*this.metronomeAmplitude-this.metronomePrevAmplitude;this.metronomePrevAmplitude=this.metronomeAmplitude,this.metronomeAmplitude=e}}}else this.startedMetronome=!1;for(let e=p;e<y;e++){const s=t[e],i=n[e],r=Math.max(Math.abs(s),Math.abs(i));u+=(r-u)*(u<r?c:l*(1+u));const a=h/(u>=1?1.05*u:.8*u+.25);t[e]=s*a,n[e]=i*a}if(p+=d,this.isAtStartOfTick=!1,this.tickSampleCountdown-=d,this.tickSampleCountdown<=0){this.isAtStartOfTick=!0;for(const t of this.channels)for(const e of t.instruments){for(let t=0;t<e.releasedTones.count();t++){const n=e.releasedTones.get(t);n.isOnLastTick?(this.freeReleasedTone(e,t),t--):n.ticksSinceReleased++}e.deactivateAfterThisTick&&e.deactivate(),e.tonesAddedInThisTick=!1}this.tick++,this.tickSampleCountdown+=a,this.tick==e.ticksPerPart&&(this.tick=0,this.part++,this.liveInputDuration--,this.part==e.partsPerBeat&&(this.part=0,i&&(this.beat++,this.beat==r.beatsPerBar&&(this.beat=0,this.countInMetronome?this.countInMetronome=!1:(this.prevBar=this.bar,this.bar=this.getNextBar(),this.bar<=this.prevBar&&this.loopRepeatCount>0&&this.loopRepeatCount--,this.bar>=r.barCount&&(this.bar=0,-1!=this.loopRepeatCount&&(o=!0,this.resetEffects(),this.pause())))))))}}(!Number.isFinite(u)||Math.abs(u)<K)&&(u=0),this.limit=u,i&&!this.countInMetronome&&(this.playheadInternal=(((this.tick+1-this.tickSampleCountdown/a)/2+this.part)/e.partsPerBeat+this.beat)/r.beatsPerBar+this.bar)}freeTone(t){this.tonePool.pushBack(t)}newTone(){if(this.tonePool.count()>0){const t=this.tonePool.popBack();return t.freshlyAllocated=!0,t}return new vt}releaseTone(t,e){t.releasedTones.pushFront(e),e.atNoteStart=!1,e.passedEndOfNote=!0}freeReleasedTone(t,e){this.freeTone(t.releasedTones.get(e)),t.releasedTones.remove(e)}freeAllTones(){for(const t of this.channels)for(const e of t.instruments){for(;e.activeTones.count()>0;)this.freeTone(e.activeTones.popBack());for(;e.releasedTones.count()>0;)this.freeTone(e.releasedTones.popBack());for(;e.liveInputTones.count()>0;)this.freeTone(e.liveInputTones.popBack())}}determineLiveInputTones(t,e,n){const s=t.channels[e],i=this.channels[e],r=this.liveInputPitches;for(let a=0;a<s.instruments.length;a++){const o=i.instruments[a],h=o.liveInputTones;let l=0;if(this.liveInputDuration>0&&e==this.liveInputChannel&&r.length>0&&-1!=this.liveInputInstruments.indexOf(a)){const i=s.instruments[a];if(i.getChord().singleTone){let s;h.count()<=l?(s=this.newTone(),h.pushBack(s)):!i.getTransition().isSeamless&&this.liveInputStarted?(this.releaseTone(o,h.get(l)),s=this.newTone(),h.set(l,s)):s=h.get(l),l++;for(let t=0;t<r.length;t++)s.pitches[t]=r[t];s.pitchCount=r.length,s.chordSize=1,s.instrumentIndex=a,s.note=s.prevNote=s.nextNote=null,s.atNoteStart=this.liveInputStarted,s.forceContinueAtStart=!1,s.forceContinueAtEnd=!1,this.computeTone(t,e,n,s,!1,!1)}else{this.moveTonesIntoOrderedTempMatchedList(h,r);for(let s=0;s<r.length;s++){let i;null!=this.tempMatchedPitchTones[l]?(i=this.tempMatchedPitchTones[l],this.tempMatchedPitchTones[l]=null,1==i.pitchCount&&i.pitches[0]==r[s]||(this.releaseTone(o,i),i=this.newTone()),h.pushBack(i)):(i=this.newTone(),h.pushBack(i)),l++,i.pitches[0]=r[s],i.pitchCount=1,i.chordSize=r.length,i.instrumentIndex=a,i.note=i.prevNote=i.nextNote=null,i.atNoteStart=this.liveInputStarted,i.forceContinueAtStart=!1,i.forceContinueAtEnd=!1,this.computeTone(t,e,n,i,!1,!1)}}}for(;h.count()>l;)this.releaseTone(o,h.popBack());this.clearTempMatchedPitchTones(l,o)}this.liveInputStarted=!1}adjacentPatternHasCompatibleInstrumentTransition(t,e,n,s,i,r,a,o,h,l){if(t.patternInstruments&&-1==s.instruments.indexOf(i)){if(n.instruments.length>1||s.instruments.length>1)return null;const t=e.instruments[s.instruments[0]];if(l)return t.getChord();const i=t.getTransition();return r.includeAdjacentPatterns&&i.includeAdjacentPatterns&&i.slides==r.slides?t.getChord():null}return l||r.includeAdjacentPatterns?a:null}static adjacentNotesHaveMatchingPitches(t,e){if(t.pitches.length!=e.pitches.length)return!1;const n=t.pins[t.pins.length-1].interval;for(const s of t.pitches)if(-1==e.pitches.indexOf(s+n))return!1;return!0}moveTonesIntoOrderedTempMatchedList(t,e){for(let n=0;n<t.count();n++){const s=t.get(n),i=s.pitches[0]+s.lastInterval;for(let r=0;r<e.length;r++)if(e[r]==i){this.tempMatchedPitchTones[r]=s,t.remove(n),n--;break}}for(;t.count()>0;){const e=t.popFront();for(let t=0;t<this.tempMatchedPitchTones.length;t++)if(null==this.tempMatchedPitchTones[t]){this.tempMatchedPitchTones[t]=e;break}}}determineCurrentActiveTones(t,n,s,i){const r=t.channels[n],a=this.channels[n],o=t.getPattern(n,this.bar),h=this.getCurrentPart(),l=this.tick+e.ticksPerPart*h;let c=null,u=null,p=null;if(i&&null!=o&&!r.muted&&(!this.isRecording||this.liveInputChannel!=n)){for(let t=0;t<o.notes.length;t++)if(o.notes[t].end<=h)u=o.notes[t];else if(o.notes[t].start<=h&&o.notes[t].end>h)c=o.notes[t];else if(o.notes[t].start>h){p=o.notes[t];break}null!=c&&(null!=u&&u.end!=c.start&&(u=null),null!=p&&p.start!=c.end&&(p=null))}if(null!=o&&(!t.layeredInstruments||1==r.instruments.length||t.patternInstruments&&1==o.instruments.length)){const e=t.patternInstruments?o.instruments[0]:0;if(null!=a.singleSeamlessInstrument&&a.singleSeamlessInstrument!=e&&a.singleSeamlessInstrument<a.instruments.length){const t=a.instruments[a.singleSeamlessInstrument],n=a.instruments[e];for(;t.activeTones.count()>0;)n.activeTones.pushFront(t.activeTones.popBack())}a.singleSeamlessInstrument=e}else a.singleSeamlessInstrument=null;for(let i=0;i<r.instruments.length;i++){const f=a.instruments[i],m=f.activeTones;let d=0;if(null!=c&&(!t.patternInstruments||-1!=o.instruments.indexOf(i))){const a=r.instruments[i];let y=u,v=p;const M=e.partsPerBeat*t.beatsPerBar,b=a.getTransition(),S=a.getChord();let g=!1,F=!1,I=0,D=0;if(0==c.start){let e=null==this.prevBar?null:t.getPattern(n,this.prevBar);if(null!=e){const n=e.notes.length<=0?null:e.notes[e.notes.length-1];if(null!=n&&n.end==M){const s=c.continuesLastPattern&&St.adjacentNotesHaveMatchingPitches(n,c),a=this.adjacentPatternHasCompatibleInstrumentTransition(t,r,o,e,i,b,S,c,n,s);null!=a&&(y=n,I=a.singleTone?1:y.pitches.length,g=s)}}}else null!=y&&(I=S.singleTone?1:y.pitches.length);if(c.end==M){let e=null==this.nextBar?null:t.getPattern(n,this.nextBar);if(null!=e){const n=e.notes.length<=0?null:e.notes[0];if(null!=n&&0==n.start){const s=n.continuesLastPattern&&St.adjacentNotesHaveMatchingPitches(c,n),a=this.adjacentPatternHasCompatibleInstrumentTransition(t,r,o,e,i,b,S,c,n,s);null!=a&&(v=n,D=a.singleTone?1:v.pitches.length,F=s)}}}else null!=v&&(D=S.singleTone?1:v.pitches.length);if(S.singleTone){const r=e.ticksPerPart*c.start==l;let a;if(m.count()<=d)a=this.newTone(),m.pushBack(a);else if(!r||(b.isSeamless||g)&&null!=y)a=m.get(d);else{const t=m.get(d);t.isOnLastTick?this.freeTone(t):this.releaseTone(f,t),a=this.newTone(),m.set(d,a)}d++;for(let t=0;t<c.pitches.length;t++)a.pitches[t]=c.pitches[t];a.pitchCount=c.pitches.length,a.chordSize=1,a.instrumentIndex=i,a.note=c,a.noteStartPart=c.start,a.noteEndPart=c.end,a.prevNote=y,a.nextNote=v,a.prevNotePitchIndex=0,a.nextNotePitchIndex=0,a.atNoteStart=r,a.passedEndOfNote=!1,a.forceContinueAtStart=g,a.forceContinueAtEnd=F,this.computeTone(t,n,s,a,!1,!1)}else{const r=a.getTransition();(r.isSeamless&&!r.slides&&0==S.strumParts||g)&&e.ticksPerPart*c.start==l&&null!=y&&this.moveTonesIntoOrderedTempMatchedList(m,c.pitches);let o=0;for(let a=0;a<c.pitches.length;a++){let u=I>a?y:null,p=c,M=D>a?v:null,b=p.start+o,P=!1;if(b>h){if(!(m.count()>a&&(r.isSeamless||g)&&null!=u))break;M=p,p=u,u=null,b=p.start+o,P=!0}let w=p.end;(r.isSeamless||g)&&null!=M&&(w=Math.min(e.partsPerBeat*this.song.beatsPerBar,w+o)),(r.continues||g)&&null!=u||(o+=S.strumParts);const x=e.ticksPerPart*b==l;let k;if(null!=this.tempMatchedPitchTones[d])k=this.tempMatchedPitchTones[d],this.tempMatchedPitchTones[d]=null,m.pushBack(k);else if(m.count()<=d)k=this.newTone(),m.pushBack(k);else if(!x||(r.isSeamless||g)&&null!=u)k=m.get(d);else{const t=m.get(d);t.isOnLastTick?this.freeTone(t):this.releaseTone(f,t),k=this.newTone(),m.set(d,k)}d++,k.pitches[0]=p.pitches[a],k.pitchCount=1,k.chordSize=p.pitches.length,k.instrumentIndex=i,k.note=p,k.noteStartPart=b,k.noteEndPart=w,k.prevNote=u,k.nextNote=M,k.prevNotePitchIndex=a,k.nextNotePitchIndex=a,k.atNoteStart=x,k.passedEndOfNote=P,k.forceContinueAtStart=g&&null!=u,k.forceContinueAtEnd=F&&null!=M,this.computeTone(t,n,s,k,!1,!1)}}}for(;m.count()>d;){const e=m.popBack(),s=t.channels[n];if(e.instrumentIndex<s.instruments.length&&!e.isOnLastTick){const t=a.instruments[e.instrumentIndex];this.releaseTone(t,e)}else this.freeTone(e)}this.clearTempMatchedPitchTones(d,f)}}clearTempMatchedPitchTones(t,e){for(let n=t;n<this.tempMatchedPitchTones.length;n++){const t=this.tempMatchedPitchTones[n];null!=t&&(t.isOnLastTick?this.freeTone(t):this.releaseTone(e,t),this.tempMatchedPitchTones[n]=null)}}playTone(t,e,n,s){const i=this.channels[t].instruments[s.instrumentIndex];i.synthesizer(this,e,n,s,i),s.envelopeComputer.clearEnvelopes()}static computeChordExpression(t){return 1/(.25*(t-1)+1)}computeTone(t,n,s,r,a,h){const l=Math.ceil(s),c=t.channels[n],d=this.channels[n],y=c.instruments[r.instrumentIndex],v=d.instruments[r.instrumentIndex];v.awake=!0,v.tonesAddedInThisTick=!0,v.computed||v.compute(this,y,s,l,r);const M=t.getChannelIsNoise(n),b=y.getTransition(),S=y.getChord(),g=S.singleTone?1:St.computeChordExpression(r.chordSize),F=M?e.noiseInterval:1,I=e.ticksPerPart*s/this.samplesPerSecond,D=1/this.samplesPerSecond,P=1/e.partsPerBeat,w=this.getTicksIntoBar(),x=w/e.ticksPerPart,k=(w+1)/e.ticksPerPart,T=this.getCurrentPart();let L=1;r.specialIntervalExpressionMult=1;let O=h,C=0,B=0,A=1,R=1,N=g,E=g,z=16,V=e.keys[t.key].basePitch,W=1,G=48;if(3==y.type)W=e.spectrumBaseExpression,M&&(V=e.spectrumBasePitch,W*=2),z=e.spectrumBasePitch,G=28;else if(4==y.type)V=e.spectrumBasePitch,W=e.drumsetBaseExpression,z=V;else if(2==y.type)V=e.chipNoises[y.chipNoise].basePitch,W=e.noiseBaseExpression,z=V,G=e.chipNoises[y.chipNoise].isSoft?24:60;else if(1==y.type)W=e.fmBaseExpression;else if(0==y.type)W=e.chipBaseExpression;else if(5==y.type)W=e.harmonicsBaseExpression;else if(6==y.type)W=e.pwmBaseExpression;else if(8==y.type)W=e.supersawBaseExpression;else{if(7!=y.type)throw new Error("Unknown instrument type in computeTone.");W=e.pickedStringBaseExpression}(r.atNoteStart&&!b.isSeamless&&!r.forceContinueAtStart||r.freshlyAllocated)&&r.reset(),r.freshlyAllocated=!1;for(let t=0;t<e.maxPitchOrOperatorCount;t++)r.phaseDeltas[t]=0,r.phaseDeltaScales[t]=0,r.operatorExpressions[t]=0,r.operatorExpressionDeltas[t]=0;if(r.expression=0,r.expressionDelta=0,a){const t=r.ticksSinceReleased,n=r.ticksSinceReleased+1;C=B=r.lastInterval;const s=Math.abs(y.getFadeOutTicks());A=St.noteSizeToVolumeMult((1-t/s)*e.noteSizeMax),R=St.noteSizeToVolumeMult((1-n/s)*e.noteSizeMax),h&&(R=0),r.ticksSinceReleased+1>=s&&(O=!0)}else if(null==r.note)A=R=1,r.lastInterval=0,r.ticksSinceReleased=0,r.liveInputSamplesHeld+=l;else{const t=r.note,n=r.nextNote,s=r.noteStartPart,i=r.noteEndPart,a=t.getEndPinIndex(T),o=t.pins[a-1],h=t.pins[a],l=s*e.ticksPerPart,c=i*e.ticksPerPart,u=(t.start+o.time)*e.ticksPerPart,p=(t.start+h.time)*e.ticksPerPart;r.ticksSinceReleased=0;const f=T*e.ticksPerPart+this.tick,m=f+1,d=f-l,v=m-l,M=Math.min(1,(f-u)/(p-u)),S=Math.min(1,(m-u)/(p-u));if(A=1,R=1,C=o.interval+(h.interval-o.interval)*M,B=o.interval+(h.interval-o.interval)*S,r.lastInterval=B,!b.isSeamless&&!r.forceContinueAtEnd||null==n){const t=-y.getFadeOutTicks();if(t>0){const e=c-l;A*=Math.min(1,(e-d)/t),R*=Math.min(1,(e-v)/t),m>=l+e&&(O=!0)}}}r.isOnLastTick=O;const j=r.envelopeComputer;j.computeEnvelopes(y,T,e.ticksPerPart*x,s/this.samplesPerSecond,r);const q=r.envelopeComputer.envelopeStarts,$=r.envelopeComputer.envelopeEnds;if(null!=r.note&&b.slides){const t=r.prevNote,e=r.nextNote;if(null!=t){const e=t.pitches[r.prevNotePitchIndex]+t.pins[t.pins.length-1].interval-r.pitches[0];if(j.prevSlideStart&&(C+=e*j.prevSlideRatioStart),j.prevSlideEnd&&(B+=e*j.prevSlideRatioEnd),!S.singleTone){const e=t.pitches.length-r.chordSize;j.prevSlideStart&&(N=St.computeChordExpression(r.chordSize+e*j.prevSlideRatioStart)),j.prevSlideEnd&&(E=St.computeChordExpression(r.chordSize+e*j.prevSlideRatioEnd))}}if(null!=e){const t=e.pitches[r.nextNotePitchIndex]-(r.pitches[0]+r.note.pins[r.note.pins.length-1].interval);if(j.nextSlideStart&&(C+=t*j.nextSlideRatioStart),j.nextSlideEnd&&(B+=t*j.nextSlideRatioEnd),!S.singleTone){const t=e.pitches.length-r.chordSize;j.nextSlideStart&&(N=St.computeChordExpression(r.chordSize+t*j.nextSlideRatioStart)),j.nextSlideEnd&&(E=St.computeChordExpression(r.chordSize+t*j.nextSlideRatioEnd))}}}if(u(y.effects)){const t=e.justIntonationSemitones[y.pitchShift]/F;C+=t*q[14],B+=t*$[14]}if(p(y.effects)){const t=q[15],n=$[15];C+=St.detuneToCents((y.detune-e.detuneCenter)*t)*e.pitchesPerOctave/1200,B+=St.detuneToCents((y.detune-e.detuneCenter)*n)*e.pitchesPerOctave/1200}if(f(y.effects)){const t=e.vibratos[y.vibrato].delayTicks,n=e.vibratos[y.vibrato].amplitude;let s;if(null!=r.prevVibrato)s=r.prevVibrato;else{if(s=n*St.getLFOAmplitude(y,I*x)*q[16],t>0){const e=t-j.noteTicksStart;s*=Math.max(0,Math.min(1,1-e/2))}}let i=n*St.getLFOAmplitude(y,I*k)*$[16];if(t>0){const e=t-j.noteTicksEnd;i*=Math.max(0,Math.min(1,1-e/2))}r.prevVibrato=i,C+=s,B+=i}if(!b.isSeamless&&!r.forceContinueAtStart||null==r.prevNote){const t=y.getFadeInSeconds();t>0&&(A*=Math.min(1,j.noteSecondsStart/t),R*=Math.min(1,j.noteSecondsEnd/t))}4==y.type&&null==r.drumsetPitch&&(r.drumsetPitch=r.pitches[0],null!=r.note&&(r.drumsetPitch+=r.note.pickMainInterval()),r.drumsetPitch=Math.max(0,Math.min(e.drumCount-1,r.drumsetPitch)));let U=j.lowpassCutoffDecayVolumeCompensation;if(m(y.effects)){const t=y.noteFilter,e=q[1],n=$[1];for(let s=0;s<t.controlPointCount;s++){const i=q[17+s],a=$[17+s],o=q[25+s],h=$[25+s],c=t.controlPoints[s];c.toCoefficients(St.tempFilterStartCoefficients,this.samplesPerSecond,e*i,o),c.toCoefficients(St.tempFilterEndCoefficients,this.samplesPerSecond,n*a,h),r.noteFilters.length<=s&&(r.noteFilters[s]=new J),r.noteFilters[s].loadCoefficientsWithGradient(St.tempFilterStartCoefficients,St.tempFilterEndCoefficients,1/l,0==c.type),U*=c.getVolumeCompensationMult()}r.noteFilterCount=t.controlPointCount}else r.noteFilterCount=0;if(4==y.type){const t=y.getDrumsetEnvelope(r.drumsetPitch);U*=yt.getLowpassCutoffDecayVolumeCompensation(t);let e=yt.computeEnvelope(t,j.noteSecondsStart,P*x,j.noteSizeStart),n=yt.computeEnvelope(t,j.noteSecondsEnd,P*k,j.noteSizeEnd);if(j.prevSlideStart){e+=(yt.computeEnvelope(t,j.prevNoteSecondsStart,P*x,j.prevNoteSize)-e)*j.prevSlideRatioStart}if(j.prevSlideEnd){n+=(yt.computeEnvelope(t,j.prevNoteSecondsEnd,P*k,j.prevNoteSize)-n)*j.prevSlideRatioEnd}if(j.nextSlideStart){e+=(yt.computeEnvelope(t,0,P*x,j.nextNoteSize)-e)*j.nextSlideRatioStart}if(j.nextSlideEnd){n+=(yt.computeEnvelope(t,0,P*k,j.nextNoteSize)-n)*j.nextSlideRatioEnd}const s=this.tempDrumSetControlPoint;s.type=0,s.gain=lt.getRoundedSettingValueFromLinearGain(.5),s.freq=lt.getRoundedSettingValueFromHz(8e3),s.toCoefficients(St.tempFilterStartCoefficients,this.samplesPerSecond,e*(1+e),1),s.toCoefficients(St.tempFilterEndCoefficients,this.samplesPerSecond,n*(1+n),1),r.noteFilters.length==r.noteFilterCount&&(r.noteFilters[r.noteFilterCount]=new J),r.noteFilters[r.noteFilterCount].loadCoefficientsWithGradient(St.tempFilterStartCoefficients,St.tempFilterEndCoefficients,1/l,!0),r.noteFilterCount++}if(U=Math.min(3,U),1==y.type){let n=1,s=0,i=0;const a=S.arpeggiates;if(r.pitchCount>1&&a){const n=Math.floor((this.tick+this.part*e.ticksPerPart)/e.rhythms[t.rhythm].ticksPerArpeggio);i=r.pitches[o(r.pitchCount,t.rhythm,n)]-r.pitches[0]}const h=e.algorithms[y.algorithm].carrierCount;for(let t=0;t<e.operatorCount;t++){const o=e.algorithms[y.algorithm].associatedCarrier[t]-1,c=r.pitches[a?0:t<r.pitchCount?t:o<r.pitchCount?o:0],u=e.operatorFrequencies[y.operators[t].frequency].mult,p=e.operatorCarrierInterval[o]+i,f=V+(c+C)*F+p,m=V+(c+B)*F+p,d=pt.frequencyFromPitch(f),v=pt.frequencyFromPitch(m),M=e.operatorFrequencies[y.operators[t].frequency].hzOffset,b=u*d+M,S=u*v+M,g=q[5+t],I=$[5+t];let P,w;1!=g||1!=I?(P=Math.pow(2,Math.log2(b/d)*g)*d,w=Math.pow(2,Math.log2(S/v)*I)*v):(P=b,w=S),r.phaseDeltas[t]=P*D,r.phaseDeltaScales[t]=Math.pow(w/P,1/l);const x=St.operatorAmplitudeCurve(y.operators[t].amplitude),k=x*e.operatorFrequencies[y.operators[t].frequency].amplitudeSign;let T=k,L=k;if(t<h){let e;e=null!=r.prevPitchExpressions[t]?r.prevPitchExpressions[t]:Math.pow(2,-(f-z)/G);const n=Math.pow(2,-(m-z)/G);r.prevPitchExpressions[t]=n,T*=e,L*=n,s+=x}else T*=1.5*e.sineWaveLength,L*=1.5*e.sineWaveLength,n*=1-Math.min(1,y.operators[t].amplitude/15);T*=q[9+t],L*=$[9+t],r.operatorExpressions[t]=T,r.operatorExpressionDeltas[t]=(L-T)/l}n*=(Math.pow(2,2-1.4*y.feedbackAmplitude/15)-1)/3,n*=1-Math.min(1,Math.max(0,s-1)/2),n=1+3*n;const c=W*n*U*A*N*q[0],u=W*n*U*R*E*$[0];r.expression=c,r.expressionDelta=(u-c)/l;const p=.3*e.sineWaveLength*y.feedbackAmplitude/15;let f=p*q[13],m=p*$[13];r.feedbackMult=f,r.feedbackDelta=(m-f)/l}else{const n=Math.pow(2,(B-C)*F/12),s=Math.pow(n,1/l);let a=r.pitches[0];if(r.pitchCount>1&&(S.arpeggiates||S.customInterval)){const n=Math.floor((this.tick+this.part*e.ticksPerPart)/e.rhythms[t.rhythm].ticksPerArpeggio);if(S.customInterval){const e=r.pitches[1+o(r.pitchCount-1,t.rhythm,n)]-r.pitches[0];L=Math.pow(2,e/12),r.specialIntervalExpressionMult=Math.pow(2,-e/G)}else a=r.pitches[o(r.pitchCount,t.rhythm,n)]}const h=V+(a+C)*F,c=V+(a+B)*F;let u;u=null!=r.prevPitchExpressions[0]?r.prevPitchExpressions[0]:Math.pow(2,-(h-z)/G);const p=Math.pow(2,-(c-z)/G);r.prevPitchExpressions[0]=p;let f=W*U;if(2==y.type&&(f*=e.chipNoises[y.chipNoise].expression),0==y.type&&(f*=e.chipWaves[y.chipWave].expression),6==y.type){const t=i(y.pulseWidth),e=t*q[2],n=t*$[2];r.pulseWidth=e,r.pulseWidthDelta=(n-e)/l}7==y.type&&(f*=Math.pow(2,.7*(1-y.stringSustain/(e.stringSustainRange-1))));const m=pt.frequencyFromPitch(h);if(0==y.type||5==y.type||7==y.type){const t=e.unisons[y.unison],n=7==y.type?1:t.voices/2;f*=t.expression*n;const i=q[4],a=$[4],o=Math.pow(2,(t.offset+t.spread)*i/12),h=Math.pow(2,(t.offset+t.spread)*a/12),c=Math.pow(2,(t.offset-t.spread)*i/12)*L,u=Math.pow(2,(t.offset-t.spread)*a/12)*L;r.phaseDeltas[0]=m*D*o,r.phaseDeltas[1]=m*D*c,r.phaseDeltaScales[0]=s*Math.pow(h/o,1/l),r.phaseDeltaScales[1]=s*Math.pow(u/c,1/l)}else r.phaseDeltas[0]=m*D,r.phaseDeltaScales[0]=s;let d=1,M=1;if(8==y.type){const t=1/Math.sqrt(e.supersawVoiceCount),s=y.supersawDynamism/e.supersawDynamismMax,a=1-Math.pow(Math.max(0,1-s*q[33]),.2),o=1-Math.pow(Math.max(0,1-s*$[33]),.2),h=Math.pow(2,Math.log2(t)*a),c=Math.pow(2,Math.log2(t)*o),u=Math.sqrt((1/Math.pow(h,2)-1)/(e.supersawVoiceCount-1)),p=Math.sqrt((1/Math.pow(c,2)-1)/(e.supersawVoiceCount-1));r.supersawDynamism=u,r.supersawDynamismDelta=(p-u)/l;const f=-1==r.supersawDelayIndex;if(f){let t=0;for(let n=0;n<e.supersawVoiceCount;n++)r.phases[n]=t,t+=-Math.log(Math.random());const n=1+(e.supersawVoiceCount-1)*u;let s=0;for(let n=0;n<e.supersawVoiceCount;n++){const e=0==n?1:u,i=r.phases[n]/t;r.phases[n]=i,s+=(i-.5)*e}let i=1,a=0;for(let t=e.supersawVoiceCount-1;t>=0;t--){const e=1-r.phases[t],o=e-a;if(s<0){const t=-s/n;if(t<o){i=a+t;break}}s+=o*n-(0==t?1:u),a=e}for(let t=0;t<e.supersawVoiceCount;t++)r.phases[t]+=i;for(let t=1;t<e.supersawVoiceCount-1;t++){const n=t+Math.floor(Math.random()*(e.supersawVoiceCount-t)),s=r.phases[t];r.phases[t]=r.phases[n],r.phases[n]=s}}const v=y.supersawSpread/e.supersawSpreadMax,b=.5*(v*q[34]+v*$[34]),S=Math.pow(1-Math.sqrt(Math.max(0,1-b)),1.75);for(let t=0;t<e.supersawVoiceCount;t++){const n=0==t?0:Math.pow(((t+1>>1)-.5+.025*((2&t)-1))/(e.supersawVoiceCount>>1),1.1)*(2*(1&t)-1);r.supersawUnisonDetunes[t]=Math.pow(2,S*n/12)}const g=y.supersawShape/e.supersawShapeMax,F=g*q[35],I=g*$[35];r.supersawShape=F,r.supersawShapeDelta=(I-F)/l;const P=i(y.pulseWidth),w=P*q[2],x=P*$[2],k=null!=r.supersawPrevPhaseDelta?r.supersawPrevPhaseDelta:m*D,T=m*D*n;r.supersawPrevPhaseDelta=T;const L=w/k,O=x/T;r.supersawDelayLength=L,r.supersawDelayLengthDelta=(O-L)/l;const C=Math.ceil(Math.max(L,O))+2;if(null==r.supersawDelayLine||r.supersawDelayLine.length<=C){const t=Math.ceil(.5*this.samplesPerSecond/pt.frequencyFromPitch(24)),e=new Float32Array(St.fittingPowerOfTwo(Math.max(t,C)));if(!f&&null!=r.supersawDelayLine){const t=r.supersawDelayLine.length-1>>0,n=r.supersawDelayIndex;for(let s=0;s<r.supersawDelayLine.length;s++)e[s]=r.supersawDelayLine[n+s&t]}r.supersawDelayLine=e,r.supersawDelayIndex=r.supersawDelayLine.length}else f&&(r.supersawDelayLine.fill(0),r.supersawDelayIndex=r.supersawDelayLine.length);const B=e.pwmBaseExpression/e.supersawBaseExpression;d*=(1+(B-1)*F)/Math.sqrt(1+(e.supersawVoiceCount-1)*u*u),M*=(1+(B-1)*I)/Math.sqrt(1+(e.supersawVoiceCount-1)*p*p)}const g=f*A*N*u*q[0]*d,I=f*R*E*p*$[0]*M;if(r.expression=g,r.expressionDelta=(I-g)/l,7==y.type){let t;if(null!=r.prevStringDecay)t=r.prevStringDecay;else{const n=r.envelopeComputer.envelopeStarts[3];t=1-Math.min(1,n*y.stringSustain/(e.stringSustainRange-1))}const n=r.envelopeComputer.envelopeEnds[3];let s=1-Math.min(1,n*y.stringSustain/(e.stringSustainRange-1));r.prevStringDecay=s;const i=e.unisons[y.unison];for(let t=r.pickedStrings.length;t<i.voices;t++)r.pickedStrings[t]=new dt;if(r.atNoteStart&&!b.continues&&!r.forceContinueAtStart)for(const t of r.pickedStrings)t.delayIndex=-1;for(let e=0;e<i.voices;e++)r.pickedStrings[e].update(this,v,r,e,l,t,s,y.stringSustainType)}}}static getLFOAmplitude(t,n){let s=0;for(const i of e.vibratos[t.vibrato].periodsSeconds)s+=Math.sin(2*Math.PI*n/i);return s}static getInstrumentSynthFunction(t){if(1==t.type){const n=t.algorithm+"_"+t.feedbackType;if(null==St.fmSynthFunctionCache[n]){const s=[];for(const n of St.fmSourceTemplate)if(-1!=n.indexOf("// CARRIER OUTPUTS")){const i=[];for(let n=0;n<e.algorithms[t.algorithm].carrierCount;n++)i.push("operator"+n+"Scaled");s.push(n.replace("/*operator#Scaled*/",i.join(" + ")))}else if(-1!=n.indexOf("// INSERT OPERATOR COMPUTATION HERE"))for(let n=e.operatorCount-1;n>=0;n--)for(const i of St.operatorSourceTemplate)if(-1!=i.indexOf("/* + operator@Scaled*/")){let r="";for(const s of e.algorithms[t.algorithm].modulatedBy[n])r+=" + operator"+(s-1)+"Scaled";const a=e.feedbacks[t.feedbackType].indices[n];if(a.length>0){r+=" + feedbackMult * (";const t=[];for(const e of a)t.push("operator"+(e-1)+"Output");r+=t.join(" + ")+")"}s.push(i.replace(/\#/g,n+"").replace("/* + operator@Scaled*/",r))}else s.push(i.replace(/\#/g,n+""));else if(-1!=n.indexOf("#"))for(let t=0;t<e.operatorCount;t++)s.push(n.replace(/\#/g,t+""));else s.push(n);const i="return (synth, bufferIndex, runLength, tone, instrument) => {"+s.join("\n")+"}";St.fmSynthFunctionCache[n]=new Function("Config","Synth",i)(e,St)}return St.fmSynthFunctionCache[n]}if(0==t.type)return St.chipSynth;if(5==t.type)return St.harmonicsSynth;if(6==t.type)return St.pulseWidthSynth;if(8==t.type)return St.supersawSynth;if(7==t.type)return St.pickedStringSynth;if(2==t.type)return St.noiseSynth;if(3==t.type)return St.spectrumSynth;if(4==t.type)return St.drumsetSynth;throw new Error("Unrecognized instrument type: "+t.type)}static chipSynth(t,e,n,s,i){const r=t.tempMonoInstrumentSampleBuffer,a=i.wave,o=a.length-1,h=s.specialIntervalExpressionMult*i.unison.sign;1!=i.unison.voices||i.chord.customInterval||(s.phases[1]=s.phases[0]);let l=s.phaseDeltas[0]*o,c=s.phaseDeltas[1]*o;const u=+s.phaseDeltaScales[0],p=+s.phaseDeltaScales[1];let f=+s.expression;const m=+s.expressionDelta;let d=s.phases[0]%1*o,y=s.phases[1]%1*o;const v=s.noteFilters,M=0|s.noteFilterCount;let b=+s.initialNoteFilterInput1,S=+s.initialNoteFilterInput2;const g=St.applyFilters,F=0|d,I=0|y,D=F%o,P=I%o,w=d-F,x=y-I;let k=+a[D],T=+a[P];k+=(a[D+1]-k)*w,T+=(a[P+1]-T)*x;const L=e+n;for(let t=e;t<L;t++){d+=l,y+=c;const e=0|d,n=0|y,s=e%o,i=n%o;let F=a[s],I=a[i];const D=d-e,P=y-n;F+=(a[s+1]-F)*D,I+=(a[i+1]-I)*P;const w=(F-k)/l,x=(I-T)/c;k=F,T=I;const L=w+x*h,O=g(L,b,S,M,v);S=b,b=L,l*=u,c*=p;const C=O*f;f+=m,r[t]+=C}s.phases[0]=d/o,s.phases[1]=y/o,s.phaseDeltas[0]=l/o,s.phaseDeltas[1]=c/o,s.expression=f,t.sanitizeFilters(v),s.initialNoteFilterInput1=b,s.initialNoteFilterInput2=S}static harmonicsSynth(t,e,n,s,i){const r=t.tempMonoInstrumentSampleBuffer,a=i.wave,o=a.length-1,h=s.specialIntervalExpressionMult*i.unison.sign;1!=i.unison.voices||i.chord.customInterval||(s.phases[1]=s.phases[0]);let l=s.phaseDeltas[0]*o,c=s.phaseDeltas[1]*o;const u=+s.phaseDeltaScales[0],p=+s.phaseDeltaScales[1];let f=+s.expression;const m=+s.expressionDelta;let d=s.phases[0]%1*o,y=s.phases[1]%1*o;const v=s.noteFilters,M=0|s.noteFilterCount;let b=+s.initialNoteFilterInput1,S=+s.initialNoteFilterInput2;const g=St.applyFilters,F=0|d,I=0|y,D=F%o,P=I%o,w=d-F,x=y-I;let k=+a[D],T=+a[P];k+=(a[D+1]-k)*w,T+=(a[P+1]-T)*x;const L=e+n;for(let t=e;t<L;t++){d+=l,y+=c;const e=0|d,n=0|y,s=e%o,i=n%o;let F=a[s],I=a[i];const D=d-e,P=y-n;F+=(a[s+1]-F)*D,I+=(a[i+1]-I)*P;const w=(F-k)/l,x=(I-T)/c;k=F,T=I;const L=w+x*h,O=g(L,b,S,M,v);S=b,b=L,l*=u,c*=p;const C=O*f;f+=m,r[t]+=C}s.phases[0]=d/o,s.phases[1]=y/o,s.phaseDeltas[0]=l/o,s.phaseDeltas[1]=c/o,s.expression=f,t.sanitizeFilters(v),s.initialNoteFilterInput1=b,s.initialNoteFilterInput2=S}static pickedStringSynth(t,n,s,i,r){const a=r.unison.voices;let o=St.pickedStringFunctionCache[a];if(null==o){let t="return (synth, bufferIndex, runLength, tone, instrumentState) => {";t+="\n\t\t\t\tconst data = synth.tempMonoInstrumentSampleBuffer;\n\t\t\t\t\n\t\t\t\tlet pickedString# = tone.pickedStrings[#];\n\t\t\t\tlet allPassSample# = +pickedString#.allPassSample;\n\t\t\t\tlet allPassPrevInput# = +pickedString#.allPassPrevInput;\n\t\t\t\tlet sustainFilterSample# = +pickedString#.sustainFilterSample;\n\t\t\t\tlet sustainFilterPrevOutput2# = +pickedString#.sustainFilterPrevOutput2;\n\t\t\t\tlet sustainFilterPrevInput1# = +pickedString#.sustainFilterPrevInput1;\n\t\t\t\tlet sustainFilterPrevInput2# = +pickedString#.sustainFilterPrevInput2;\n\t\t\t\tlet fractionalDelaySample# = +pickedString#.fractionalDelaySample;\n\t\t\t\tconst delayLine# = pickedString#.delayLine;\n\t\t\t\tconst delayBufferMask# = (delayLine#.length - 1) >> 0;\n\t\t\t\tlet delayIndex# = pickedString#.delayIndex|0;\n\t\t\t\tdelayIndex# = (delayIndex# & delayBufferMask#) + delayLine#.length;\n\t\t\t\tlet delayLength# = +pickedString#.prevDelayLength;\n\t\t\t\tconst delayLengthDelta# = +pickedString#.delayLengthDelta;\n\t\t\t\tlet allPassG# = +pickedString#.allPassG;\n\t\t\t\tlet sustainFilterA1# = +pickedString#.sustainFilterA1;\n\t\t\t\tlet sustainFilterA2# = +pickedString#.sustainFilterA2;\n\t\t\t\tlet sustainFilterB0# = +pickedString#.sustainFilterB0;\n\t\t\t\tlet sustainFilterB1# = +pickedString#.sustainFilterB1;\n\t\t\t\tlet sustainFilterB2# = +pickedString#.sustainFilterB2;\n\t\t\t\tconst allPassGDelta# = +pickedString#.allPassGDelta;\n\t\t\t\tconst sustainFilterA1Delta# = +pickedString#.sustainFilterA1Delta;\n\t\t\t\tconst sustainFilterA2Delta# = +pickedString#.sustainFilterA2Delta;\n\t\t\t\tconst sustainFilterB0Delta# = +pickedString#.sustainFilterB0Delta;\n\t\t\t\tconst sustainFilterB1Delta# = +pickedString#.sustainFilterB1Delta;\n\t\t\t\tconst sustainFilterB2Delta# = +pickedString#.sustainFilterB2Delta;\n\t\t\t\t\n\t\t\t\tlet expression = +tone.expression;\n\t\t\t\tconst expressionDelta = +tone.expressionDelta;\n\t\t\t\t\n\t\t\t\tconst unisonSign = tone.specialIntervalExpressionMult * instrumentState.unison.sign;\n\t\t\t\tconst delayResetOffset# = pickedString#.delayResetOffset|0;\n\t\t\t\t\n\t\t\t\tconst filters = tone.noteFilters;\n\t\t\t\tconst filterCount = tone.noteFilterCount|0;\n\t\t\t\tlet initialFilterInput1 = +tone.initialNoteFilterInput1;\n\t\t\t\tlet initialFilterInput2 = +tone.initialNoteFilterInput2;\n\t\t\t\tconst applyFilters = Synth.applyFilters;\n\t\t\t\t\n\t\t\t\tconst stopIndex = bufferIndex + runLength;\n\t\t\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\t\tconst targetSampleTime# = delayIndex# - delayLength#;\n\t\t\t\t\tconst lowerIndex# = (targetSampleTime# + 0.125) | 0; // Offset to improve stability of all-pass filter.\n\t\t\t\t\tconst upperIndex# = lowerIndex# + 1;\n\t\t\t\t\tconst fractionalDelay# = upperIndex# - targetSampleTime#;\n\t\t\t\t\tconst fractionalDelayG# = (1.0 - fractionalDelay#) / (1.0 + fractionalDelay#); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\t\tconst prevInput# = delayLine#[lowerIndex# & delayBufferMask#];\n\t\t\t\t\tconst input# = delayLine#[upperIndex# & delayBufferMask#];\n\t\t\t\t\tfractionalDelaySample# = fractionalDelayG# * input# + prevInput# - fractionalDelayG# * fractionalDelaySample#;\n\t\t\t\t\t\n\t\t\t\t\tallPassSample# = fractionalDelaySample# * allPassG# + allPassPrevInput# - allPassG# * allPassSample#;\n\t\t\t\t\tallPassPrevInput# = fractionalDelaySample#;\n\t\t\t\t\t\n\t\t\t\t\tconst sustainFilterPrevOutput1# = sustainFilterSample#;\n\t\t\t\t\tsustainFilterSample# = sustainFilterB0# * allPassSample# + sustainFilterB1# * sustainFilterPrevInput1# + sustainFilterB2# * sustainFilterPrevInput2# - sustainFilterA1# * sustainFilterSample# - sustainFilterA2# * sustainFilterPrevOutput2#;\n\t\t\t\t\tsustainFilterPrevOutput2# = sustainFilterPrevOutput1#;\n\t\t\t\t\tsustainFilterPrevInput2# = sustainFilterPrevInput1#;\n\t\t\t\t\tsustainFilterPrevInput1# = allPassSample#;\n\t\t\t\t\t\n\t\t\t\t\tdelayLine#[delayIndex# & delayBufferMask#] += sustainFilterSample#;\n\t\t\t\t\tdelayLine#[(delayIndex# + delayResetOffset#) & delayBufferMask#] = 0.0;\n\t\t\t\t\tdelayIndex#++;\n\t\t\t\t\t\n\t\t\t\t\tconst inputSample = (";const n=[];for(let t=0;t<a;t++)n.push("fractionalDelaySample"+t+(1==t?" * unisonSign":""));t+=n.join(" + "),t+=") * expression;\n\t\t\t\t\tconst sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\t\t\tinitialFilterInput1 = inputSample;\n\t\t\t\t\tdata[sampleIndex] += sample;\n\t\t\t\t\t\n\t\t\t\t\texpression += expressionDelta;\n\t\t\t\t\tdelayLength# += delayLengthDelta#;\n\t\t\t\t\tallPassG# += allPassGDelta#;\n\t\t\t\t\tsustainFilterA1# += sustainFilterA1Delta#;\n\t\t\t\t\tsustainFilterA2# += sustainFilterA2Delta#;\n\t\t\t\t\tsustainFilterB0# += sustainFilterB0Delta#;\n\t\t\t\t\tsustainFilterB1# += sustainFilterB1Delta#;\n\t\t\t\t\tsustainFilterB2# += sustainFilterB2Delta#;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Avoid persistent denormal or NaN values in the delay buffers and filter history.\n\t\t\t\tconst epsilon = (1.0e-24);\n\t\t\t\tif (!Number.isFinite(allPassSample#) || Math.abs(allPassSample#) < epsilon) allPassSample# = 0.0;\n\t\t\t\tif (!Number.isFinite(allPassPrevInput#) || Math.abs(allPassPrevInput#) < epsilon) allPassPrevInput# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterSample#) || Math.abs(sustainFilterSample#) < epsilon) sustainFilterSample# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevOutput2#) || Math.abs(sustainFilterPrevOutput2#) < epsilon) sustainFilterPrevOutput2# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevInput1#) || Math.abs(sustainFilterPrevInput1#) < epsilon) sustainFilterPrevInput1# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevInput2#) || Math.abs(sustainFilterPrevInput2#) < epsilon) sustainFilterPrevInput2# = 0.0;\n\t\t\t\tif (!Number.isFinite(fractionalDelaySample#) || Math.abs(fractionalDelaySample#) < epsilon) fractionalDelaySample# = 0.0;\n\t\t\t\tpickedString#.allPassSample = allPassSample#;\n\t\t\t\tpickedString#.allPassPrevInput = allPassPrevInput#;\n\t\t\t\tpickedString#.sustainFilterSample = sustainFilterSample#;\n\t\t\t\tpickedString#.sustainFilterPrevOutput2 = sustainFilterPrevOutput2#;\n\t\t\t\tpickedString#.sustainFilterPrevInput1 = sustainFilterPrevInput1#;\n\t\t\t\tpickedString#.sustainFilterPrevInput2 = sustainFilterPrevInput2#;\n\t\t\t\tpickedString#.fractionalDelaySample = fractionalDelaySample#;\n\t\t\t\tpickedString#.delayIndex = delayIndex#;\n\t\t\t\tpickedString#.prevDelayLength = delayLength#;\n\t\t\t\tpickedString#.allPassG = allPassG#;\n\t\t\t\tpickedString#.sustainFilterA1 = sustainFilterA1#;\n\t\t\t\tpickedString#.sustainFilterA2 = sustainFilterA2#;\n\t\t\t\tpickedString#.sustainFilterB0 = sustainFilterB0#;\n\t\t\t\tpickedString#.sustainFilterB1 = sustainFilterB1#;\n\t\t\t\tpickedString#.sustainFilterB2 = sustainFilterB2#;\n\t\t\t\t\n\t\t\t\ttone.expression = expression;\n\t\t\t\t\n\t\t\t\tsynth.sanitizeFilters(filters);\n\t\t\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\n\t\t\t\ttone.initialNoteFilterInput2 = initialFilterInput2;\n\t\t\t}",t=t.replace(/^.*\#.*$/gm,(t=>{const e=[];for(let n=0;n<a;n++)e.push(t.replace(/\#/g,String(n)));return e.join("\n")})),o=new Function("Config","Synth",t)(e,St),St.pickedStringFunctionCache[a]=o}o(t,n,s,i,r)}static effectsSynth(t,n,s,i,r,a){const o=d(a.effects),h=y(a.effects),l=a.eqFilterCount>0,c=v(a.effects),u=M(a.effects),p=b(a.effects),f=S(a.effects);let m=0;o&&(m|=1),m<<=1,h&&(m|=1),m<<=1,l&&(m|=1),m<<=1,c&&(m|=1),m<<=1,u&&(m|=1),m<<=1,p&&(m|=1),m<<=1,f&&(m|=1);let g=St.effectsFunctionCache[m];if(null==g){let t="return (synth, outputDataL, outputDataR, bufferIndex, runLength, instrumentState) => {";const n=u||f||p;t+="\n\t\t\t\tconst tempMonoInstrumentSampleBuffer = synth.tempMonoInstrumentSampleBuffer;\n\t\t\t\t\n\t\t\t\tlet mixVolume = +instrumentState.mixVolume;\n\t\t\t\tconst mixVolumeDelta = +instrumentState.mixVolumeDelta;",n&&(t+="\n\t\t\t\t\n\t\t\t\tlet delayInputMult = +instrumentState.delayInputMult;\n\t\t\t\tconst delayInputMultDelta = +instrumentState.delayInputMultDelta;"),o&&(t+="\n\t\t\t\t\n\t\t\t\tconst distortionBaseVolume = +Config.distortionBaseVolume;\n\t\t\t\tlet distortion = instrumentState.distortion;\n\t\t\t\tconst distortionDelta = instrumentState.distortionDelta;\n\t\t\t\tlet distortionDrive = instrumentState.distortionDrive;\n\t\t\t\tconst distortionDriveDelta = instrumentState.distortionDriveDelta;\n\t\t\t\tconst distortionFractionalResolution = 4.0;\n\t\t\t\tconst distortionOversampleCompensation = distortionBaseVolume / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelay1 = 1.0 / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelay2 = 2.0 / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelay3 = 3.0 / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelayG1 = (1.0 - distortionFractionalDelay1) / (1.0 + distortionFractionalDelay1); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\tconst distortionFractionalDelayG2 = (1.0 - distortionFractionalDelay2) / (1.0 + distortionFractionalDelay2); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\tconst distortionFractionalDelayG3 = (1.0 - distortionFractionalDelay3) / (1.0 + distortionFractionalDelay3); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\tconst distortionNextOutputWeight1 = Math.cos(Math.PI * distortionFractionalDelay1) * 0.5 + 0.5;\n\t\t\t\tconst distortionNextOutputWeight2 = Math.cos(Math.PI * distortionFractionalDelay2) * 0.5 + 0.5;\n\t\t\t\tconst distortionNextOutputWeight3 = Math.cos(Math.PI * distortionFractionalDelay3) * 0.5 + 0.5;\n\t\t\t\tconst distortionPrevOutputWeight1 = 1.0 - distortionNextOutputWeight1;\n\t\t\t\tconst distortionPrevOutputWeight2 = 1.0 - distortionNextOutputWeight2;\n\t\t\t\tconst distortionPrevOutputWeight3 = 1.0 - distortionNextOutputWeight3;\n\t\t\t\t\n\t\t\t\tlet distortionFractionalInput1 = +instrumentState.distortionFractionalInput1;\n\t\t\t\tlet distortionFractionalInput2 = +instrumentState.distortionFractionalInput2;\n\t\t\t\tlet distortionFractionalInput3 = +instrumentState.distortionFractionalInput3;\n\t\t\t\tlet distortionPrevInput = +instrumentState.distortionPrevInput;\n\t\t\t\tlet distortionNextOutput = +instrumentState.distortionNextOutput;"),h&&(t+="\n\t\t\t\t\n\t\t\t\tlet bitcrusherPrevInput = +instrumentState.bitcrusherPrevInput;\n\t\t\t\tlet bitcrusherCurrentOutput = +instrumentState.bitcrusherCurrentOutput;\n\t\t\t\tlet bitcrusherPhase = +instrumentState.bitcrusherPhase;\n\t\t\t\tlet bitcrusherPhaseDelta = +instrumentState.bitcrusherPhaseDelta;\n\t\t\t\tconst bitcrusherPhaseDeltaScale = +instrumentState.bitcrusherPhaseDeltaScale;\n\t\t\t\tlet bitcrusherScale = +instrumentState.bitcrusherScale;\n\t\t\t\tconst bitcrusherScaleScale = +instrumentState.bitcrusherScaleScale;\n\t\t\t\tlet bitcrusherFoldLevel = +instrumentState.bitcrusherFoldLevel;\n\t\t\t\tconst bitcrusherFoldLevelScale = +instrumentState.bitcrusherFoldLevelScale;"),l&&(t+="\n\t\t\t\t\n\t\t\t\tlet filters = instrumentState.eqFilters;\n\t\t\t\tconst filterCount = instrumentState.eqFilterCount|0;\n\t\t\t\tlet initialFilterInput1 = +instrumentState.initialEqFilterInput1;\n\t\t\t\tlet initialFilterInput2 = +instrumentState.initialEqFilterInput2;\n\t\t\t\tconst applyFilters = Synth.applyFilters;"),t+="\n\t\t\t\t\n\t\t\t\tlet eqFilterVolume = +instrumentState.eqFilterVolume;\n\t\t\t\tconst eqFilterVolumeDelta = +instrumentState.eqFilterVolumeDelta;",c&&(t+="\n\t\t\t\t\n\t\t\t\tconst panningMask = synth.panningDelayBufferMask >>> 0;\n\t\t\t\tconst panningDelayLine = instrumentState.panningDelayLine;\n\t\t\t\tlet panningDelayPos = instrumentState.panningDelayPos & panningMask;\n\t\t\t\tlet   panningVolumeL      = +instrumentState.panningVolumeL;\n\t\t\t\tlet   panningVolumeR      = +instrumentState.panningVolumeR;\n\t\t\t\tconst panningVolumeDeltaL = +instrumentState.panningVolumeDeltaL;\n\t\t\t\tconst panningVolumeDeltaR = +instrumentState.panningVolumeDeltaR;\n\t\t\t\tlet   panningOffsetL      = +instrumentState.panningOffsetL;\n\t\t\t\tlet   panningOffsetR      = +instrumentState.panningOffsetR;\n\t\t\t\tconst panningOffsetDeltaL = 1.0 - instrumentState.panningOffsetDeltaL;\n\t\t\t\tconst panningOffsetDeltaR = 1.0 - instrumentState.panningOffsetDeltaR;"),u&&(t+="\n\t\t\t\t\n\t\t\t\tconst chorusMask = synth.chorusDelayBufferMask >>> 0;\n\t\t\t\tconst chorusDelayLineL = instrumentState.chorusDelayLineL;\n\t\t\t\tconst chorusDelayLineR = instrumentState.chorusDelayLineR;\n\t\t\t\tinstrumentState.chorusDelayLineDirty = true;\n\t\t\t\tlet chorusDelayPos = instrumentState.chorusDelayPos & chorusMask;\n\t\t\t\t\n\t\t\t\tlet chorusVoiceMult = +instrumentState.chorusVoiceMult;\n\t\t\t\tconst chorusVoiceMultDelta = +instrumentState.chorusVoiceMultDelta;\n\t\t\t\tlet chorusCombinedMult = +instrumentState.chorusCombinedMult;\n\t\t\t\tconst chorusCombinedMultDelta = +instrumentState.chorusCombinedMultDelta;\n\t\t\t\t\n\t\t\t\tconst chorusDuration = +Config.chorusPeriodSeconds;\n\t\t\t\tconst chorusAngle = Math.PI * 2.0 / (chorusDuration * synth.samplesPerSecond);\n\t\t\t\tconst chorusRange = synth.samplesPerSecond * Config.chorusDelayRange;\n\t\t\t\tconst chorusOffset0 = synth.chorusDelayBufferSize - Config.chorusDelayOffsets[0][0] * chorusRange;\n\t\t\t\tconst chorusOffset1 = synth.chorusDelayBufferSize - Config.chorusDelayOffsets[0][1] * chorusRange;\n\t\t\t\tconst chorusOffset2 = synth.chorusDelayBufferSize - Config.chorusDelayOffsets[0][2] * chorusRange;\n\t\t\t\tconst chorusOffset3 = synth.chorusDelayBufferSize - Config.chorusDelayOffsets[1][0] * chorusRange;\n\t\t\t\tconst chorusOffset4 = synth.chorusDelayBufferSize - Config.chorusDelayOffsets[1][1] * chorusRange;\n\t\t\t\tconst chorusOffset5 = synth.chorusDelayBufferSize - Config.chorusDelayOffsets[1][2] * chorusRange;\n\t\t\t\tlet chorusPhase = instrumentState.chorusPhase % (Math.PI * 2.0);\n\t\t\t\tlet chorusTap0Index = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + Config.chorusPhaseOffsets[0][0]);\n\t\t\t\tlet chorusTap1Index = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + Config.chorusPhaseOffsets[0][1]);\n\t\t\t\tlet chorusTap2Index = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + Config.chorusPhaseOffsets[0][2]);\n\t\t\t\tlet chorusTap3Index = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + Config.chorusPhaseOffsets[1][0]);\n\t\t\t\tlet chorusTap4Index = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + Config.chorusPhaseOffsets[1][1]);\n\t\t\t\tlet chorusTap5Index = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + Config.chorusPhaseOffsets[1][2]);\n\t\t\t\tchorusPhase += chorusAngle * runLength;\n\t\t\t\tconst chorusTap0End = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + Config.chorusPhaseOffsets[0][0]) + runLength;\n\t\t\t\tconst chorusTap1End = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + Config.chorusPhaseOffsets[0][1]) + runLength;\n\t\t\t\tconst chorusTap2End = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + Config.chorusPhaseOffsets[0][2]) + runLength;\n\t\t\t\tconst chorusTap3End = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + Config.chorusPhaseOffsets[1][0]) + runLength;\n\t\t\t\tconst chorusTap4End = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + Config.chorusPhaseOffsets[1][1]) + runLength;\n\t\t\t\tconst chorusTap5End = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + Config.chorusPhaseOffsets[1][2]) + runLength;\n\t\t\t\tconst chorusTap0Delta = (chorusTap0End - chorusTap0Index) / runLength;\n\t\t\t\tconst chorusTap1Delta = (chorusTap1End - chorusTap1Index) / runLength;\n\t\t\t\tconst chorusTap2Delta = (chorusTap2End - chorusTap2Index) / runLength;\n\t\t\t\tconst chorusTap3Delta = (chorusTap3End - chorusTap3Index) / runLength;\n\t\t\t\tconst chorusTap4Delta = (chorusTap4End - chorusTap4Index) / runLength;\n\t\t\t\tconst chorusTap5Delta = (chorusTap5End - chorusTap5Index) / runLength;"),p&&(t+="\n\t\t\t\t\n\t\t\t\tlet echoMult = +instrumentState.echoMult;\n\t\t\t\tconst echoMultDelta = +instrumentState.echoMultDelta;\n\t\t\t\t\n\t\t\t\tconst echoDelayLineL = instrumentState.echoDelayLineL;\n\t\t\t\tconst echoDelayLineR = instrumentState.echoDelayLineR;\n\t\t\t\tconst echoMask = (echoDelayLineL.length - 1) >>> 0;\n\t\t\t\tinstrumentState.echoDelayLineDirty = true;\n\t\t\t\t\n\t\t\t\tlet echoDelayPos = instrumentState.echoDelayPos & echoMask;\n\t\t\t\tconst echoDelayOffsetStart = (echoDelayLineL.length - instrumentState.echoDelayOffsetStart) & echoMask;\n\t\t\t\tconst echoDelayOffsetEnd   = (echoDelayLineL.length - instrumentState.echoDelayOffsetEnd) & echoMask;\n\t\t\t\tlet echoDelayOffsetRatio = +instrumentState.echoDelayOffsetRatio;\n\t\t\t\tconst echoDelayOffsetRatioDelta = +instrumentState.echoDelayOffsetRatioDelta;\n\t\t\t\t\n\t\t\t\tconst echoShelfA1 = +instrumentState.echoShelfA1;\n\t\t\t\tconst echoShelfB0 = +instrumentState.echoShelfB0;\n\t\t\t\tconst echoShelfB1 = +instrumentState.echoShelfB1;\n\t\t\t\tlet echoShelfSampleL = +instrumentState.echoShelfSampleL;\n\t\t\t\tlet echoShelfSampleR = +instrumentState.echoShelfSampleR;\n\t\t\t\tlet echoShelfPrevInputL = +instrumentState.echoShelfPrevInputL;\n\t\t\t\tlet echoShelfPrevInputR = +instrumentState.echoShelfPrevInputR;"),f&&(t+="\n\t\t\t\t\n\t\t\t\tconst reverbMask = Config.reverbDelayBufferMask >>> 0; //TODO: Dynamic reverb buffer size.\n\t\t\t\tconst reverbDelayLine = instrumentState.reverbDelayLine;\n\t\t\t\tinstrumentState.reverbDelayLineDirty = true;\n\t\t\t\tlet reverbDelayPos = instrumentState.reverbDelayPos & reverbMask;\n\t\t\t\t\n\t\t\t\tlet reverb = +instrumentState.reverbMult;\n\t\t\t\tconst reverbDelta = +instrumentState.reverbMultDelta;\n\t\t\t\t\n\t\t\t\tconst reverbShelfA1 = +instrumentState.reverbShelfA1;\n\t\t\t\tconst reverbShelfB0 = +instrumentState.reverbShelfB0;\n\t\t\t\tconst reverbShelfB1 = +instrumentState.reverbShelfB1;\n\t\t\t\tlet reverbShelfSample0 = +instrumentState.reverbShelfSample0;\n\t\t\t\tlet reverbShelfSample1 = +instrumentState.reverbShelfSample1;\n\t\t\t\tlet reverbShelfSample2 = +instrumentState.reverbShelfSample2;\n\t\t\t\tlet reverbShelfSample3 = +instrumentState.reverbShelfSample3;\n\t\t\t\tlet reverbShelfPrevInput0 = +instrumentState.reverbShelfPrevInput0;\n\t\t\t\tlet reverbShelfPrevInput1 = +instrumentState.reverbShelfPrevInput1;\n\t\t\t\tlet reverbShelfPrevInput2 = +instrumentState.reverbShelfPrevInput2;\n\t\t\t\tlet reverbShelfPrevInput3 = +instrumentState.reverbShelfPrevInput3;"),t+="\n\t\t\t\t\n\t\t\t\tconst stopIndex = bufferIndex + runLength;\n\t\t\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\t\tlet sample = tempMonoInstrumentSampleBuffer[sampleIndex];\n\t\t\t\t\ttempMonoInstrumentSampleBuffer[sampleIndex] = 0.0;",o&&(t+="\n\t\t\t\t\t\n\t\t\t\t\tconst distortionReverse = 1.0 - distortion;\n\t\t\t\t\tconst distortionNextInput = sample * distortionDrive;\n\t\t\t\t\tsample = distortionNextOutput;\n\t\t\t\t\tdistortionNextOutput = distortionNextInput / (distortionReverse * Math.abs(distortionNextInput) + distortion);\n\t\t\t\t\tdistortionFractionalInput1 = distortionFractionalDelayG1 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG1 * distortionFractionalInput1;\n\t\t\t\t\tdistortionFractionalInput2 = distortionFractionalDelayG2 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG2 * distortionFractionalInput2;\n\t\t\t\t\tdistortionFractionalInput3 = distortionFractionalDelayG3 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG3 * distortionFractionalInput3;\n\t\t\t\t\tconst distortionOutput1 = distortionFractionalInput1 / (distortionReverse * Math.abs(distortionFractionalInput1) + distortion);\n\t\t\t\t\tconst distortionOutput2 = distortionFractionalInput2 / (distortionReverse * Math.abs(distortionFractionalInput2) + distortion);\n\t\t\t\t\tconst distortionOutput3 = distortionFractionalInput3 / (distortionReverse * Math.abs(distortionFractionalInput3) + distortion);\n\t\t\t\t\tdistortionNextOutput += distortionOutput1 * distortionNextOutputWeight1 + distortionOutput2 * distortionNextOutputWeight2 + distortionOutput3 * distortionNextOutputWeight3;\n\t\t\t\t\tsample += distortionOutput1 * distortionPrevOutputWeight1 + distortionOutput2 * distortionPrevOutputWeight2 + distortionOutput3 * distortionPrevOutputWeight3;\n\t\t\t\t\tsample *= distortionOversampleCompensation;\n\t\t\t\t\tdistortionPrevInput = distortionNextInput;\n\t\t\t\t\tdistortion += distortionDelta;\n\t\t\t\t\tdistortionDrive += distortionDriveDelta;"),h&&(t+="\n\t\t\t\t\t\n\t\t\t\t\tbitcrusherPhase += bitcrusherPhaseDelta;\n\t\t\t\t\tif (bitcrusherPhase < 1.0) {\n\t\t\t\t\t\tbitcrusherPrevInput = sample;\n\t\t\t\t\t\tsample = bitcrusherCurrentOutput;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbitcrusherPhase = bitcrusherPhase % 1.0;\n\t\t\t\t\t\tconst ratio = bitcrusherPhase / bitcrusherPhaseDelta;\n\t\t\t\t\t\t\n\t\t\t\t\t\tconst lerpedInput = sample + (bitcrusherPrevInput - sample) * ratio;\n\t\t\t\t\t\tbitcrusherPrevInput = sample;\n\t\t\t\t\t\t\n\t\t\t\t\t\tconst bitcrusherWrapLevel = bitcrusherFoldLevel * 4.0;\n\t\t\t\t\t\tconst wrappedSample = (((lerpedInput + bitcrusherFoldLevel) % bitcrusherWrapLevel) + bitcrusherWrapLevel) % bitcrusherWrapLevel;\n\t\t\t\t\t\tconst foldedSample = bitcrusherFoldLevel - Math.abs(bitcrusherFoldLevel * 2.0 - wrappedSample);\n\t\t\t\t\t\tconst scaledSample = foldedSample / bitcrusherScale;\n\t\t\t\t\t\tconst oldValue = bitcrusherCurrentOutput;\n\t\t\t\t\t\tconst newValue = (((scaledSample > 0 ? scaledSample + 1 : scaledSample)|0)-.5) * bitcrusherScale;\n\t\t\t\t\t\t\n\t\t\t\t\t\tsample = oldValue + (newValue - oldValue) * ratio;\n\t\t\t\t\t\tbitcrusherCurrentOutput = newValue;\n\t\t\t\t\t}\n\t\t\t\t\tbitcrusherPhaseDelta *= bitcrusherPhaseDeltaScale;\n\t\t\t\t\tbitcrusherScale *= bitcrusherScaleScale;\n\t\t\t\t\tbitcrusherFoldLevel *= bitcrusherFoldLevelScale;"),l&&(t+="\n\t\t\t\t\t\n\t\t\t\t\tconst inputSample = sample;\n\t\t\t\t\tsample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\t\t\tinitialFilterInput1 = inputSample;"),t+="\n\t\t\t\t\t\n\t\t\t\t\tsample *= eqFilterVolume;\n\t\t\t\t\teqFilterVolume += eqFilterVolumeDelta;",t+=c?"\n\t\t\t\t\t\n\t\t\t\t\tpanningDelayLine[panningDelayPos] = sample;\n\t\t\t\t\tconst panningRatioL  = panningOffsetL % 1;\n\t\t\t\t\tconst panningRatioR  = panningOffsetR % 1;\n\t\t\t\t\tconst panningTapLA   = panningDelayLine[(panningOffsetL) & panningMask];\n\t\t\t\t\tconst panningTapLB   = panningDelayLine[(panningOffsetL + 1) & panningMask];\n\t\t\t\t\tconst panningTapRA   = panningDelayLine[(panningOffsetR) & panningMask];\n\t\t\t\t\tconst panningTapRB   = panningDelayLine[(panningOffsetR + 1) & panningMask];\n\t\t\t\t\tconst panningTapL    = panningTapLA + (panningTapLB - panningTapLA) * panningRatioL;\n\t\t\t\t\tconst panningTapR    = panningTapRA + (panningTapRB - panningTapRA) * panningRatioR;\n\t\t\t\t\tlet sampleL = panningTapL * panningVolumeL;\n\t\t\t\t\tlet sampleR = panningTapR * panningVolumeR;\n\t\t\t\t\tpanningDelayPos = (panningDelayPos + 1) & panningMask;\n\t\t\t\t\tpanningVolumeL += panningVolumeDeltaL;\n\t\t\t\t\tpanningVolumeR += panningVolumeDeltaR;\n\t\t\t\t\tpanningOffsetL += panningOffsetDeltaL;\n\t\t\t\t\tpanningOffsetR += panningOffsetDeltaR;":"\n\t\t\t\t\t\n\t\t\t\t\tlet sampleL = sample;\n\t\t\t\t\tlet sampleR = sample;",u&&(t+="\n\t\t\t\t\t\n\t\t\t\t\tconst chorusTap0Ratio = chorusTap0Index % 1;\n\t\t\t\t\tconst chorusTap1Ratio = chorusTap1Index % 1;\n\t\t\t\t\tconst chorusTap2Ratio = chorusTap2Index % 1;\n\t\t\t\t\tconst chorusTap3Ratio = chorusTap3Index % 1;\n\t\t\t\t\tconst chorusTap4Ratio = chorusTap4Index % 1;\n\t\t\t\t\tconst chorusTap5Ratio = chorusTap5Index % 1;\n\t\t\t\t\tconst chorusTap0A = chorusDelayLineL[(chorusTap0Index) & chorusMask];\n\t\t\t\t\tconst chorusTap0B = chorusDelayLineL[(chorusTap0Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap1A = chorusDelayLineL[(chorusTap1Index) & chorusMask];\n\t\t\t\t\tconst chorusTap1B = chorusDelayLineL[(chorusTap1Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap2A = chorusDelayLineL[(chorusTap2Index) & chorusMask];\n\t\t\t\t\tconst chorusTap2B = chorusDelayLineL[(chorusTap2Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap3A = chorusDelayLineR[(chorusTap3Index) & chorusMask];\n\t\t\t\t\tconst chorusTap3B = chorusDelayLineR[(chorusTap3Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap4A = chorusDelayLineR[(chorusTap4Index) & chorusMask];\n\t\t\t\t\tconst chorusTap4B = chorusDelayLineR[(chorusTap4Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap5A = chorusDelayLineR[(chorusTap5Index) & chorusMask];\n\t\t\t\t\tconst chorusTap5B = chorusDelayLineR[(chorusTap5Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap0 = chorusTap0A + (chorusTap0B - chorusTap0A) * chorusTap0Ratio;\n\t\t\t\t\tconst chorusTap1 = chorusTap1A + (chorusTap1B - chorusTap1A) * chorusTap1Ratio;\n\t\t\t\t\tconst chorusTap2 = chorusTap2A + (chorusTap2B - chorusTap2A) * chorusTap2Ratio;\n\t\t\t\t\tconst chorusTap3 = chorusTap3A + (chorusTap3B - chorusTap3A) * chorusTap3Ratio;\n\t\t\t\t\tconst chorusTap4 = chorusTap4A + (chorusTap4B - chorusTap4A) * chorusTap4Ratio;\n\t\t\t\t\tconst chorusTap5 = chorusTap5A + (chorusTap5B - chorusTap5A) * chorusTap5Ratio;\n\t\t\t\t\tchorusDelayLineL[chorusDelayPos] = sampleL * delayInputMult;\n\t\t\t\t\tchorusDelayLineR[chorusDelayPos] = sampleR * delayInputMult;\n\t\t\t\t\tsampleL = chorusCombinedMult * (sampleL + chorusVoiceMult * (chorusTap1 - chorusTap0 - chorusTap2));\n\t\t\t\t\tsampleR = chorusCombinedMult * (sampleR + chorusVoiceMult * (chorusTap4 - chorusTap3 - chorusTap5));\n\t\t\t\t\tchorusDelayPos = (chorusDelayPos + 1) & chorusMask;\n\t\t\t\t\tchorusTap0Index += chorusTap0Delta;\n\t\t\t\t\tchorusTap1Index += chorusTap1Delta;\n\t\t\t\t\tchorusTap2Index += chorusTap2Delta;\n\t\t\t\t\tchorusTap3Index += chorusTap3Delta;\n\t\t\t\t\tchorusTap4Index += chorusTap4Delta;\n\t\t\t\t\tchorusTap5Index += chorusTap5Delta;\n\t\t\t\t\tchorusVoiceMult += chorusVoiceMultDelta;\n\t\t\t\t\tchorusCombinedMult += chorusCombinedMultDelta;"),p&&(t+="\n\t\t\t\t\t\n\t\t\t\t\tconst echoTapStartIndex = (echoDelayPos + echoDelayOffsetStart) & echoMask;\n\t\t\t\t\tconst echoTapEndIndex   = (echoDelayPos + echoDelayOffsetEnd  ) & echoMask;\n\t\t\t\t\tconst echoTapStartL = echoDelayLineL[echoTapStartIndex];\n\t\t\t\t\tconst echoTapEndL   = echoDelayLineL[echoTapEndIndex];\n\t\t\t\t\tconst echoTapStartR = echoDelayLineR[echoTapStartIndex];\n\t\t\t\t\tconst echoTapEndR   = echoDelayLineR[echoTapEndIndex];\n\t\t\t\t\tconst echoTapL = (echoTapStartL + (echoTapEndL - echoTapStartL) * echoDelayOffsetRatio) * echoMult;\n\t\t\t\t\tconst echoTapR = (echoTapStartR + (echoTapEndR - echoTapStartR) * echoDelayOffsetRatio) * echoMult;\n\t\t\t\t\t\n\t\t\t\t\techoShelfSampleL = echoShelfB0 * echoTapL + echoShelfB1 * echoShelfPrevInputL - echoShelfA1 * echoShelfSampleL;\n\t\t\t\t\techoShelfSampleR = echoShelfB0 * echoTapR + echoShelfB1 * echoShelfPrevInputR - echoShelfA1 * echoShelfSampleR;\n\t\t\t\t\techoShelfPrevInputL = echoTapL;\n\t\t\t\t\techoShelfPrevInputR = echoTapR;\n\t\t\t\t\tsampleL += echoShelfSampleL;\n\t\t\t\t\tsampleR += echoShelfSampleR;\n\t\t\t\t\t\n\t\t\t\t\techoDelayLineL[echoDelayPos] = sampleL * delayInputMult;\n\t\t\t\t\techoDelayLineR[echoDelayPos] = sampleR * delayInputMult;\n\t\t\t\t\techoDelayPos = (echoDelayPos + 1) & echoMask;\n\t\t\t\t\techoDelayOffsetRatio += echoDelayOffsetRatioDelta;\n\t\t\t\t\techoMult += echoMultDelta;"),f&&(t+="\n\t\t\t\t\t\n\t\t\t\t\t// Reverb, implemented using a feedback delay network with a Hadamard matrix and lowpass filters.\n\t\t\t\t\t// good ratios:    0.555235 + 0.618033 + 0.818 +   1.0 = 2.991268\n\t\t\t\t\t// Delay lengths:  3041     + 3385     + 4481  +  5477 = 16384 = 2^14\n\t\t\t\t\t// Buffer offsets: 3041    -> 6426   -> 10907 -> 16384\n\t\t\t\t\tconst reverbDelayPos1 = (reverbDelayPos +  3041) & reverbMask;\n\t\t\t\t\tconst reverbDelayPos2 = (reverbDelayPos +  6426) & reverbMask;\n\t\t\t\t\tconst reverbDelayPos3 = (reverbDelayPos + 10907) & reverbMask;\n\t\t\t\t\tconst reverbSample0 = (reverbDelayLine[reverbDelayPos]);\n\t\t\t\t\tconst reverbSample1 = reverbDelayLine[reverbDelayPos1];\n\t\t\t\t\tconst reverbSample2 = reverbDelayLine[reverbDelayPos2];\n\t\t\t\t\tconst reverbSample3 = reverbDelayLine[reverbDelayPos3];\n\t\t\t\t\tconst reverbTemp0 = -(reverbSample0 + sampleL) + reverbSample1;\n\t\t\t\t\tconst reverbTemp1 = -(reverbSample0 + sampleR) - reverbSample1;\n\t\t\t\t\tconst reverbTemp2 = -reverbSample2 + reverbSample3;\n\t\t\t\t\tconst reverbTemp3 = -reverbSample2 - reverbSample3;\n\t\t\t\t\tconst reverbShelfInput0 = (reverbTemp0 + reverbTemp2) * reverb;\n\t\t\t\t\tconst reverbShelfInput1 = (reverbTemp1 + reverbTemp3) * reverb;\n\t\t\t\t\tconst reverbShelfInput2 = (reverbTemp0 - reverbTemp2) * reverb;\n\t\t\t\t\tconst reverbShelfInput3 = (reverbTemp1 - reverbTemp3) * reverb;\n\t\t\t\t\treverbShelfSample0 = reverbShelfB0 * reverbShelfInput0 + reverbShelfB1 * reverbShelfPrevInput0 - reverbShelfA1 * reverbShelfSample0;\n\t\t\t\t\treverbShelfSample1 = reverbShelfB0 * reverbShelfInput1 + reverbShelfB1 * reverbShelfPrevInput1 - reverbShelfA1 * reverbShelfSample1;\n\t\t\t\t\treverbShelfSample2 = reverbShelfB0 * reverbShelfInput2 + reverbShelfB1 * reverbShelfPrevInput2 - reverbShelfA1 * reverbShelfSample2;\n\t\t\t\t\treverbShelfSample3 = reverbShelfB0 * reverbShelfInput3 + reverbShelfB1 * reverbShelfPrevInput3 - reverbShelfA1 * reverbShelfSample3;\n\t\t\t\t\treverbShelfPrevInput0 = reverbShelfInput0;\n\t\t\t\t\treverbShelfPrevInput1 = reverbShelfInput1;\n\t\t\t\t\treverbShelfPrevInput2 = reverbShelfInput2;\n\t\t\t\t\treverbShelfPrevInput3 = reverbShelfInput3;\n\t\t\t\t\treverbDelayLine[reverbDelayPos1] = reverbShelfSample0 * delayInputMult;\n\t\t\t\t\treverbDelayLine[reverbDelayPos2] = reverbShelfSample1 * delayInputMult;\n\t\t\t\t\treverbDelayLine[reverbDelayPos3] = reverbShelfSample2 * delayInputMult;\n\t\t\t\t\treverbDelayLine[reverbDelayPos ] = reverbShelfSample3 * delayInputMult;\n\t\t\t\t\treverbDelayPos = (reverbDelayPos + 1) & reverbMask;\n\t\t\t\t\tsampleL += reverbSample1 + reverbSample2 + reverbSample3;\n\t\t\t\t\tsampleR += reverbSample0 + reverbSample2 - reverbSample3;\n\t\t\t\t\treverb += reverbDelta;"),t+="\n\t\t\t\t\t\n\t\t\t\t\toutputDataL[sampleIndex] += sampleL * mixVolume;\n\t\t\t\t\toutputDataR[sampleIndex] += sampleR * mixVolume;\n\t\t\t\t\tmixVolume += mixVolumeDelta;",n&&(t+="\n\t\t\t\t\t\n\t\t\t\t\tdelayInputMult += delayInputMultDelta;"),t+="\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tinstrumentState.mixVolume = mixVolume;\n\t\t\t\tinstrumentState.eqFilterVolume = eqFilterVolume;\n\t\t\t\t\n\t\t\t\t// Avoid persistent denormal or NaN values in the delay buffers and filter history.\n\t\t\t\tconst epsilon = (1.0e-24);",n&&(t+="\n\t\t\t\t\n\t\t\t\tinstrumentState.delayInputMult = delayInputMult;"),o&&(t+="\n\t\t\t\t\n\t\t\t\tinstrumentState.distortion = distortion;\n\t\t\t\tinstrumentState.distortionDrive = distortionDrive;\n\t\t\t\t\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput1) || Math.abs(distortionFractionalInput1) < epsilon) distortionFractionalInput1 = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput2) || Math.abs(distortionFractionalInput2) < epsilon) distortionFractionalInput2 = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput3) || Math.abs(distortionFractionalInput3) < epsilon) distortionFractionalInput3 = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionPrevInput) || Math.abs(distortionPrevInput) < epsilon) distortionPrevInput = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionNextOutput) || Math.abs(distortionNextOutput) < epsilon) distortionNextOutput = 0.0;\n\t\t\t\t\n\t\t\t\tinstrumentState.distortionFractionalInput1 = distortionFractionalInput1;\n\t\t\t\tinstrumentState.distortionFractionalInput2 = distortionFractionalInput2;\n\t\t\t\tinstrumentState.distortionFractionalInput3 = distortionFractionalInput3;\n\t\t\t\tinstrumentState.distortionPrevInput = distortionPrevInput;\n\t\t\t\tinstrumentState.distortionNextOutput = distortionNextOutput;"),h&&(t+="\n\t\t\t\t\t\n\t\t\t\tif (Math.abs(bitcrusherPrevInput) < epsilon) bitcrusherPrevInput = 0.0;\n\t\t\t\tif (Math.abs(bitcrusherCurrentOutput) < epsilon) bitcrusherCurrentOutput = 0.0;\n\t\t\t\tinstrumentState.bitcrusherPrevInput = bitcrusherPrevInput;\n\t\t\t\tinstrumentState.bitcrusherCurrentOutput = bitcrusherCurrentOutput;\n\t\t\t\tinstrumentState.bitcrusherPhase = bitcrusherPhase;\n\t\t\t\tinstrumentState.bitcrusherPhaseDelta = bitcrusherPhaseDelta;\n\t\t\t\tinstrumentState.bitcrusherScale = bitcrusherScale;\n\t\t\t\tinstrumentState.bitcrusherFoldLevel = bitcrusherFoldLevel;"),l&&(t+="\n\t\t\t\t\t\n\t\t\t\tsynth.sanitizeFilters(filters);\n\t\t\t\t// The filter input here is downstream from another filter so we\n\t\t\t\t// better make sure it's safe too.\n\t\t\t\tif (!(initialFilterInput1 < 100) || !(initialFilterInput2 < 100)) {\n\t\t\t\t\tinitialFilterInput1 = 0.0;\n\t\t\t\t\tinitialFilterInput2 = 0.0;\n\t\t\t\t}\n\t\t\t\tif (Math.abs(initialFilterInput1) < epsilon) initialFilterInput1 = 0.0;\n\t\t\t\tif (Math.abs(initialFilterInput2) < epsilon) initialFilterInput2 = 0.0;\n\t\t\t\tinstrumentState.initialEqFilterInput1 = initialFilterInput1;\n\t\t\t\tinstrumentState.initialEqFilterInput2 = initialFilterInput2;"),c&&(t+="\n\t\t\t\t\n\t\t\t\tSynth.sanitizeDelayLine(panningDelayLine, panningDelayPos, panningMask);\n\t\t\t\tinstrumentState.panningDelayPos = panningDelayPos;\n\t\t\t\tinstrumentState.panningVolumeL = panningVolumeL;\n\t\t\t\tinstrumentState.panningVolumeR = panningVolumeR;\n\t\t\t\tinstrumentState.panningOffsetL = panningOffsetL;\n\t\t\t\tinstrumentState.panningOffsetR = panningOffsetR;"),u&&(t+="\n\t\t\t\t\n\t\t\t\tSynth.sanitizeDelayLine(chorusDelayLineL, chorusDelayPos, chorusMask);\n\t\t\t\tSynth.sanitizeDelayLine(chorusDelayLineR, chorusDelayPos, chorusMask);\n\t\t\t\tinstrumentState.chorusPhase = chorusPhase;\n\t\t\t\tinstrumentState.chorusDelayPos = chorusDelayPos;\n\t\t\t\tinstrumentState.chorusVoiceMult = chorusVoiceMult;\n\t\t\t\tinstrumentState.chorusCombinedMult = chorusCombinedMult;"),p&&(t+="\n\t\t\t\t\n\t\t\t\tSynth.sanitizeDelayLine(echoDelayLineL, echoDelayPos, echoMask);\n\t\t\t\tSynth.sanitizeDelayLine(echoDelayLineR, echoDelayPos, echoMask);\n\t\t\t\tinstrumentState.echoDelayPos = echoDelayPos;\n\t\t\t\tinstrumentState.echoMult = echoMult;\n\t\t\t\tinstrumentState.echoDelayOffsetRatio = echoDelayOffsetRatio;\n\t\t\t\t\n\t\t\t\tif (!Number.isFinite(echoShelfSampleL) || Math.abs(echoShelfSampleL) < epsilon) echoShelfSampleL = 0.0;\n\t\t\t\tif (!Number.isFinite(echoShelfSampleR) || Math.abs(echoShelfSampleR) < epsilon) echoShelfSampleR = 0.0;\n\t\t\t\tif (!Number.isFinite(echoShelfPrevInputL) || Math.abs(echoShelfPrevInputL) < epsilon) echoShelfPrevInputL = 0.0;\n\t\t\t\tif (!Number.isFinite(echoShelfPrevInputR) || Math.abs(echoShelfPrevInputR) < epsilon) echoShelfPrevInputR = 0.0;\n\t\t\t\tinstrumentState.echoShelfSampleL = echoShelfSampleL;\n\t\t\t\tinstrumentState.echoShelfSampleR = echoShelfSampleR;\n\t\t\t\tinstrumentState.echoShelfPrevInputL = echoShelfPrevInputL;\n\t\t\t\tinstrumentState.echoShelfPrevInputR = echoShelfPrevInputR;"),f&&(t+="\n\t\t\t\t\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos        , reverbMask);\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  3041, reverbMask);\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  6426, reverbMask);\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos + 10907, reverbMask);\n\t\t\t\tinstrumentState.reverbDelayPos = reverbDelayPos;\n\t\t\t\tinstrumentState.reverbMult = reverb;\n\t\t\t\t\n\t\t\t\tif (!Number.isFinite(reverbShelfSample0) || Math.abs(reverbShelfSample0) < epsilon) reverbShelfSample0 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfSample1) || Math.abs(reverbShelfSample1) < epsilon) reverbShelfSample1 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfSample2) || Math.abs(reverbShelfSample2) < epsilon) reverbShelfSample2 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfSample3) || Math.abs(reverbShelfSample3) < epsilon) reverbShelfSample3 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput0) || Math.abs(reverbShelfPrevInput0) < epsilon) reverbShelfPrevInput0 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput1) || Math.abs(reverbShelfPrevInput1) < epsilon) reverbShelfPrevInput1 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput2) || Math.abs(reverbShelfPrevInput2) < epsilon) reverbShelfPrevInput2 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput3) || Math.abs(reverbShelfPrevInput3) < epsilon) reverbShelfPrevInput3 = 0.0;\n\t\t\t\tinstrumentState.reverbShelfSample0 = reverbShelfSample0;\n\t\t\t\tinstrumentState.reverbShelfSample1 = reverbShelfSample1;\n\t\t\t\tinstrumentState.reverbShelfSample2 = reverbShelfSample2;\n\t\t\t\tinstrumentState.reverbShelfSample3 = reverbShelfSample3;\n\t\t\t\tinstrumentState.reverbShelfPrevInput0 = reverbShelfPrevInput0;\n\t\t\t\tinstrumentState.reverbShelfPrevInput1 = reverbShelfPrevInput1;\n\t\t\t\tinstrumentState.reverbShelfPrevInput2 = reverbShelfPrevInput2;\n\t\t\t\tinstrumentState.reverbShelfPrevInput3 = reverbShelfPrevInput3;"),t+="}",g=new Function("Config","Synth",t)(e,St),St.effectsFunctionCache[m]=g}g(t,n,s,i,r,a)}static pulseWidthSynth(t,e,n,s,i){const r=t.tempMonoInstrumentSampleBuffer;let a=s.phaseDeltas[0];const o=+s.phaseDeltaScales[0];let h=+s.expression;const l=+s.expressionDelta;let c=s.phases[0]%1,u=s.pulseWidth;const p=s.pulseWidthDelta,f=s.noteFilters,m=0|s.noteFilterCount;let d=+s.initialNoteFilterInput1,y=+s.initialNoteFilterInput2;const v=St.applyFilters,M=e+n;for(let t=e;t<M;t++){const e=c%1,n=(c+u)%1;let s=n-e;if(e<a)s+=.5*((b=e/a)+b-b*b-1);else if(e>1-a){s+=.5*((b=(e-1)/a)+b+b*b+1)}if(n<a)s-=.5*((b=n/a)+b-b*b-1);else if(n>1-a){var b;s-=.5*((b=(n-1)/a)+b+b*b+1)}const i=s,M=v(i,d,y,m,f);y=d,d=i,c+=a,a*=o,u+=p;const S=M*h;h+=l,r[t]+=S}s.phases[0]=c,s.phaseDeltas[0]=a,s.expression=h,s.pulseWidth=u,t.sanitizeFilters(f),s.initialNoteFilterInput1=d,s.initialNoteFilterInput2=y}static supersawSynth(t,n,s,i,r){const a=t.tempMonoInstrumentSampleBuffer,o=0|e.supersawVoiceCount;let h=i.phaseDeltas[0];const l=+i.phaseDeltaScales[0];let c=+i.expression;const u=+i.expressionDelta;let p=i.phases,f=+i.supersawDynamism;const m=+i.supersawDynamismDelta,d=i.supersawUnisonDetunes;let y=+i.supersawShape;const v=+i.supersawShapeDelta;let M=+i.supersawDelayLength;const b=+i.supersawDelayLengthDelta,S=i.supersawDelayLine,g=S.length-1>>0;let F=0|i.supersawDelayIndex;F=(F&g)+S.length;const I=i.noteFilters,D=0|i.noteFilterCount;let P=+i.initialNoteFilterInput1,w=+i.initialNoteFilterInput2;const x=St.applyFilters,k=n+s;for(let t=n;t<k;t++){let e=(p[0]+h)%1,n=e-.5*(1+(o-1)*f);if(e<h)n-=.5*((T=e/h)+T-T*T-1);else if(e>1-h){var T;n-=.5*((T=(e-1)/h)+T+T*T+1)}p[0]=e;for(let t=1;t<o;t++){const e=h*d[t];let s=(p[t]+e)%1;if(n+=s*f,s<e){const t=s/e;n-=.5*(t+t-t*t-1)*f}else if(s>1-e){const t=(s-1)/e;n-=.5*(t+t+t*t+1)*f}p[t]=s}S[F&g]=n;const s=F-M,i=0|s,r=i+1,k=s-i,L=S[i&g];F++;const O=n-(L+(S[r&g]-L)*k)*y,C=x(O,P,w,D,I);w=P,P=O,h*=l,f+=m,y+=v,M+=b;const B=C*c;c+=u,a[t]+=B}i.phaseDeltas[0]=h,i.expression=c,i.supersawDynamism=f,i.supersawShape=y,i.supersawDelayLength=M,i.supersawDelayIndex=F,t.sanitizeFilters(I),i.initialNoteFilterInput1=P,i.initialNoteFilterInput2=w}static noiseSynth(t,n,s,i,r){const a=t.tempMonoInstrumentSampleBuffer,o=r.wave;let h=+i.phaseDeltas[0];const l=+i.phaseDeltaScales[0];let c=+i.expression;const u=+i.expressionDelta;let p=i.phases[0]%1*e.chipNoiseLength;0==i.phases[0]&&(p=Math.random()*e.chipNoiseLength);const f=e.chipNoiseLength-1;let m=+i.noiseSample;const d=i.noteFilters,y=0|i.noteFilterCount;let v=+i.initialNoteFilterInput1,M=+i.initialNoteFilterInput2;const b=St.applyFilters,S=Math.min(1,h*r.noisePitchFilterMult),g=n+s;for(let t=n;t<g;t++){m+=(o[p&f]-m)*S;const e=m,n=b(e,v,M,y,d);M=v,v=e,p+=h,h*=l;const s=n*c;c+=u,a[t]+=s}i.phases[0]=p/e.chipNoiseLength,i.phaseDeltas[0]=h,i.expression=c,i.noiseSample=m,t.sanitizeFilters(d),i.initialNoteFilterInput1=v,i.initialNoteFilterInput2=M}static spectrumSynth(t,n,s,i,r){const a=t.tempMonoInstrumentSampleBuffer,o=r.wave;let h=128*i.phaseDeltas[0];const l=+i.phaseDeltaScales[0];let c=+i.expression;const u=+i.expressionDelta;let p=+i.noiseSample;const f=i.noteFilters,m=0|i.noteFilterCount;let d=+i.initialNoteFilterInput1,y=+i.initialNoteFilterInput2;const v=St.applyFilters;let M=i.phases[0]%1*e.spectrumNoiseLength;0==i.phases[0]&&(M=St.findRandomZeroCrossing(o,e.spectrumNoiseLength)+h);const b=e.spectrumNoiseLength-1,S=Math.min(1,h),g=n+s;for(let t=n;t<g;t++){const e=0|M,n=e&b;let s=o[n];const i=M-e;s+=(o[n+1]-s)*i,p+=(s-p)*S;const r=p,g=v(r,d,y,m,f);y=d,d=r,M+=h,h*=l;const F=g*c;c+=u,a[t]+=F}i.phases[0]=M/e.spectrumNoiseLength,i.phaseDeltas[0]=h/128,i.expression=c,i.noiseSample=p,t.sanitizeFilters(f),i.initialNoteFilterInput1=d,i.initialNoteFilterInput2=y}static drumsetSynth(t,n,s,i,r){const a=t.tempMonoInstrumentSampleBuffer;let o=r.getDrumsetWave(i.drumsetPitch);const h=Mt.drumsetIndexReferenceDelta(i.drumsetPitch);let l=i.phaseDeltas[0]/h;const c=+i.phaseDeltaScales[0];let u=+i.expression;const p=+i.expressionDelta,f=i.noteFilters,m=0|i.noteFilterCount;let d=+i.initialNoteFilterInput1,y=+i.initialNoteFilterInput2;const v=St.applyFilters;let M=i.phases[0]%1*e.spectrumNoiseLength;0==i.phases[0]&&(M=St.findRandomZeroCrossing(o,e.spectrumNoiseLength)+l);const b=e.spectrumNoiseLength-1,S=n+s;for(let t=n;t<S;t++){const e=0|M,n=e&b;let s=o[n];const i=M-e;s+=(o[n+1]-s)*i;const r=s,h=v(r,d,y,m,f);y=d,d=r,M+=l,l*=c;const S=h*u;u+=p,a[t]+=S}i.phases[0]=M/e.spectrumNoiseLength,i.phaseDeltas[0]=l*h,i.expression=u,t.sanitizeFilters(f),i.initialNoteFilterInput1=d,i.initialNoteFilterInput2=y}static findRandomZeroCrossing(t,e){let n=Math.random()*e;const s=e-1;let i=n&s,r=t[i];for(let a=128;a>0;a--){const a=i+16&s,o=t[a];if(r*o<=0){for(let a=0;a<16;a++){const a=i+1&s,o=t[a];if(r*o<=0){const t=o-r;n=i,Math.abs(t)>1e-8&&(n+=-r/t),n=Math.max(0,n)%e;break}i=a,r=o}break}i=a,r=o}return n}static instrumentVolumeToVolumeMult(t){return t==e.volumeRange-1?0:Math.pow(2,e.volumeLogScale*t)}static volumeMultToInstrumentVolume(t){return t<=0?e.volumeRange-1:Math.min(e.volumeRange-2,Math.log2(t)/e.volumeLogScale)}static noteSizeToVolumeMult(t){return Math.pow(Math.max(0,t)/e.noteSizeMax,1.5)}static volumeMultToNoteSize(t){return Math.pow(Math.max(0,t),1/1.5)*e.noteSizeMax}static fadeInSettingToSeconds(t){return.0125*(.95*t+.05*t*t)}static secondsToFadeInSetting(t){return Q(0,e.fadeInRange,Math.round((-.95+Math.sqrt(.9025+.2*t/.0125))/.1))}static fadeOutSettingToTicks(t){return e.fadeOutTicks[t]}static ticksToFadeOutSetting(t){let n=e.fadeOutTicks[0];if(t<=n)return 0;for(let s=1;s<e.fadeOutTicks.length;s++){let i=e.fadeOutTicks[s];if(t<=i)return t<(n+i)/2?s-1:s;n=i}return e.fadeOutTicks.length-1}static detuneToCents(t){return t*(Math.abs(t)+1)/2}static centsToDetune(t){return Math.sign(t)*(Math.sqrt(1+8*Math.abs(t))-1)/2}getSamplesPerTick(){if(null==this.song)return 0;const t=this.song.getBeatsPerMinute()/60,n=e.partsPerBeat*t,s=e.ticksPerPart*n;return this.samplesPerSecond/s}static fittingPowerOfTwo(t){return 1<<32-Math.clz32(Math.ceil(t)-1)}sanitizeFilters(t){let e=!1;for(const n of t){const t=Math.abs(n.output1),s=Math.abs(n.output2);if(!(t<100&&s<100)){e=!0;break}t<K&&(n.output1=0),s<K&&(n.output2=0)}if(e)for(const e of t)e.output1=0,e.output2=0}static sanitizeDelayLine(t,e,n){for(;;){const s=--e&n,i=Math.abs(t[s]);if(Number.isFinite(i)&&(0==i||i>=K))break;t[s]=0}}static applyFilters(t,e,n,s,i){for(let r=0;r<s;r++){const s=i[r],a=s.output1,o=s.output2,h=s.a1,l=s.a2,c=s.b0,u=s.b1,p=s.b2;t=c*t+u*e+p*n-h*a-l*o,s.a1=h+s.a1Delta,s.a2=l+s.a2Delta,s.useMultiplicativeInputCoefficients?(s.b0=c*s.b0Delta,s.b1=u*s.b1Delta,s.b2=p*s.b2Delta):(s.b0=c+s.b0Delta,s.b1=u+s.b1Delta,s.b2=p+s.b2Delta),s.output2=a,s.output1=t,n=o,e=a}return t}}St.tempFilterStartCoefficients=new $,St.tempFilterEndCoefficients=new $,St.fmSynthFunctionCache={},St.effectsFunctionCache=Array(128).fill(void 0),St.pickedStringFunctionCache=Array(3).fill(void 0),St.fmSourceTemplate=("\n\t\tconst data = synth.tempMonoInstrumentSampleBuffer;\n\t\tconst sineWave = Config.sineWave;\n\t\t\n\t\t// I'm adding 1000 to the phase to ensure that it's never negative even when modulated by other waves because negative numbers don't work with the modulus operator very well.\n\t\tlet operator#Phase       = +((tone.phases[#] % 1) + 1000) * "+e.sineWaveLength+";\n\t\tlet operator#PhaseDelta  = +tone.phaseDeltas[#] * "+e.sineWaveLength+";\n\t\tlet operator#PhaseDeltaScale = +tone.phaseDeltaScales[#];\n\t\tlet operator#OutputMult  = +tone.operatorExpressions[#];\n\t\tconst operator#OutputDelta = +tone.operatorExpressionDeltas[#];\n\t\tlet operator#Output      = +tone.feedbackOutputs[#];\n\t\tlet feedbackMult         = +tone.feedbackMult;\n\t\tconst feedbackDelta      = +tone.feedbackDelta;\n\t\tlet expression = +tone.expression;\n\t\tconst expressionDelta = +tone.expressionDelta;\n\t\t\n\t\tconst filters = tone.noteFilters;\n\t\tconst filterCount = tone.noteFilterCount|0;\n\t\tlet initialFilterInput1 = +tone.initialNoteFilterInput1;\n\t\tlet initialFilterInput2 = +tone.initialNoteFilterInput2;\n\t\tconst applyFilters = Synth.applyFilters;\n\t\t\n\t\tconst stopIndex = bufferIndex + runLength;\n\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t// INSERT OPERATOR COMPUTATION HERE\n\t\t\tconst fmOutput = (/*operator#Scaled*/); // CARRIER OUTPUTS\n\t\t\t\n\t\t\tconst inputSample = fmOutput;\n\t\t\tconst sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\tinitialFilterInput1 = inputSample;\n\t\t\t\n\t\t\tfeedbackMult += feedbackDelta;\n\t\t\toperator#OutputMult += operator#OutputDelta;\n\t\t\toperator#Phase += operator#PhaseDelta;\n\t\t\toperator#PhaseDelta *= operator#PhaseDeltaScale;\n\t\t\t\n\t\t\tconst output = sample * expression;\n\t\t\texpression += expressionDelta;\n\t\t\t\n\t\t\tdata[sampleIndex] += output;\n\t\t}\n\t\t\n\t\ttone.phases[#] = operator#Phase / "+e.sineWaveLength+";\n\t\ttone.phaseDeltas[#] = operator#PhaseDelta / "+e.sineWaveLength+";\n\t\ttone.operatorExpressions[#] = operator#OutputMult;\n\t\ttone.feedbackOutputs[#] = operator#Output;\n\t\ttone.feedbackMult = feedbackMult;\n\t\ttone.expression = expression;\n\t\t\n\t\tsynth.sanitizeFilters(filters);\n\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\n\t\ttone.initialNoteFilterInput2 = initialFilterInput2;\n\t").split("\n"),St.operatorSourceTemplate=("\n\t\t\tconst operator#PhaseMix = operator#Phase/* + operator@Scaled*/;\n\t\t\tconst operator#PhaseInt = operator#PhaseMix|0;\n\t\t\tconst operator#Index    = operator#PhaseInt & "+e.sineWaveMask+";\n\t\t\tconst operator#Sample   = sineWave[operator#Index];\n\t\t\toperator#Output         = operator#Sample + (sineWave[operator#Index + 1] - operator#Sample) * (operator#PhaseMix - operator#PhaseInt);\n\t\t\tconst operator#Scaled   = operator#OutputMult * operator#Output;\n\t").split("\n");const{a:gt,button:Ft,div:It,h1:Dt,input:Pt}=O,{svg:wt,circle:xt,rect:kt,path:Tt}=C;document.head.appendChild(O.style({type:"text/css"},`\n\tbody {\n\t\tcolor: ${V.primaryText};\n\t\tbackground: ${V.editorBackground};\n\t}\n\th1 {\n\t\tfont-weight: bold;\n\t\tfont-size: 14px;\n\t\tline-height: 22px;\n\t\ttext-align: initial;\n\t\tmargin: 0;\n\t}\n\ta {\n\t\tfont-weight: bold;\n\t\tfont-size: 12px;\n\t\tline-height: 22px;\n\t\twhite-space: nowrap;\n\t\tcolor: ${V.linkAccent};\n\t}\n\tbutton {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tposition: relative;\n\t\tborder: none;\n\t\tborder-radius: 5px;\n\t\tbackground: ${V.uiWidgetBackground};\n\t\tcolor: ${V.primaryText};\n\t\tcursor: pointer;\n\t\tfont-size: 14px;\n\t\tfont-family: inherit;\n\t}\n\tbutton:hover, button:focus {\n\t\tbackground: ${V.uiWidgetFocus};\n\t}\n\t.playButton, .pauseButton {\n\t\tpadding-left: 24px;\n\t\tpadding-right: 6px;\n\t}\n\t.playButton::before {\n\t\tcontent: "";\n\t\tposition: absolute;\n\t\tleft: 6px;\n\t\ttop: 50%;\n\t\tmargin-top: -6px;\n\t\twidth: 12px;\n\t\theight: 12px;\n\t\tpointer-events: none;\n\t\tbackground: ${V.primaryText};\n\t\t-webkit-mask-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="-6 -6 12 12"><path d="M 6 0 L -5 6 L -5 -6 z" fill="gray"/></svg>');\n\t\t-webkit-mask-repeat: no-repeat;\n\t\t-webkit-mask-position: center;\n\t\tmask-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="-6 -6 12 12"><path d="M 6 0 L -5 6 L -5 -6 z" fill="gray"/></svg>');\n\t\tmask-repeat: no-repeat;\n\t\tmask-position: center;\n\t}\n\t.pauseButton::before {\n\t\tcontent: "";\n\t\tposition: absolute;\n\t\tleft: 6px;\n\t\ttop: 50%;\n\t\tmargin-top: -6px;\n\t\twidth: 12px;\n\t\theight: 12px;\n\t\tpointer-events: none;\n\t\tbackground: ${V.primaryText};\n\t\t-webkit-mask-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="-6 -6 12 12"><rect x="-5" y="-6" width="3" height="12" fill="gray"/><rect x="2"  y="-6" width="3" height="12" fill="gray"/></svg>');\n\t\t-webkit-mask-repeat: no-repeat;\n\t\t-webkit-mask-position: center;\n\t\tmask-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="-6 -6 12 12"><rect x="-5" y="-6" width="3" height="12" fill="gray"/><rect x="2"  y="-6" width="3" height="12" fill="gray"/></svg>');\n\t\tmask-repeat: no-repeat;\n\t\tmask-position: center;\n\t}\n\t\n\tinput[type=range] {\n\t\t-webkit-appearance: none;\n\t\tappearance: none;\n\t\theight: 16px;\n\t\tmargin: 0;\n\t\tcursor: pointer;\n\t\tbackground-color: ${V.editorBackground};\n\t\ttouch-action: pan-y;\n\t}\n\tinput[type=range]:focus {\n\t\toutline: none;\n\t}\n\tinput[type=range]::-webkit-slider-runnable-track {\n\t\twidth: 100%;\n\t\theight: 4px;\n\t\tcursor: pointer;\n\t\tbackground: ${V.uiWidgetBackground};\n\t}\n\tinput[type=range]::-webkit-slider-thumb {\n\t\theight: 16px;\n\t\twidth: 4px;\n\t\tborder-radius: 2px;\n\t\tbackground: ${V.primaryText};\n\t\tcursor: pointer;\n\t\t-webkit-appearance: none;\n\t\tmargin-top: -6px;\n\t}\n\tinput[type=range]:focus::-webkit-slider-runnable-track, input[type=range]:hover::-webkit-slider-runnable-track {\n\t\tbackground: ${V.uiWidgetFocus};\n\t}\n\tinput[type=range]::-moz-range-track {\n\t\twidth: 100%;\n\t\theight: 4px;\n\t\tcursor: pointer;\n\t\tbackground: ${V.uiWidgetBackground};\n\t}\n\tinput[type=range]:focus::-moz-range-track, input[type=range]:hover::-moz-range-track  {\n\t\tbackground: ${V.uiWidgetFocus};\n\t}\n\tinput[type=range]::-moz-range-thumb {\n\t\theight: 16px;\n\t\twidth: 4px;\n\t\tborder-radius: 2px;\n\t\tborder: none;\n\t\tbackground: ${V.primaryText};\n\t\tcursor: pointer;\n\t}\n\tinput[type=range]::-ms-track {\n\t\twidth: 100%;\n\t\theight: 4px;\n\t\tcursor: pointer;\n\t\tbackground: ${V.uiWidgetBackground};\n\t\tborder-color: transparent;\n\t}\n\tinput[type=range]:focus::-ms-track, input[type=range]:hover::-ms-track {\n\t\tbackground: ${V.uiWidgetFocus};\n\t}\n\tinput[type=range]::-ms-thumb {\n\t\theight: 16px;\n\t\twidth: 4px;\n\t\tborder-radius: 2px;\n\t\tbackground: ${V.primaryText};\n\t\tcursor: pointer;\n\t}\n`)),V.setTheme("dark classic");let Lt,Ot=null,Ct=(4294967295*Math.random()>>>0).toString(16),Bt=!1,At=!1,Rt=1;const Nt=new St;let Et=Dt({style:"flex-grow: 1; margin: 0 1px;"},""),zt=gt({target:"_top",style:"margin: 0 4px;"},"✎ Edit"),Vt=gt({href:"javascript:void(0)",style:"margin: 0 4px;"},"⎘ Copy URL"),Wt=gt({href:"javascript:void(0)",style:"margin: 0 4px;"},"⤳ Share"),Gt=gt({target:"_top",style:"margin: 0 4px;"},"⇱ Fullscreen"),jt=!0;const qt=Ft({style:"width: 100%; height: 100%; max-height: 50px;"}),$t=It({style:"flex-shrink: 0; display: flex; padding: 2px; width: 80px; height: 100%; box-sizing: border-box; align-items: center;"},qt),Ut=Tt({d:"M 4 2 L 4 0 L 7 3 L 4 6 L 4 4 Q 2 4 2 6 Q 2 8 4 8 L 4 10 Q 0 10 0 6 Q 0 2 4 2 M 8 10 L 8 12 L 5 9 L 8 6 L 8 8 Q 10 8 10 6 Q 10 4 8 4 L 8 2 Q 12 2 12 6 Q 12 10 8 10 z"}),Jt=Ft({title:"loop",style:"background: none; flex: 0 0 12px; margin: 0 3px; width: 12px; height: 12px; display: flex;"},wt({width:12,height:12,viewBox:"0 0 12 12"},Ut)),Ht=wt({style:"flex: 0 0 12px; margin: 0 1px; width: 12px; height: 12px;",viewBox:"0 0 12 12"},Tt({fill:V.uiWidgetBackground,d:"M 1 9 L 1 3 L 4 3 L 7 0 L 7 12 L 4 9 L 1 9 M 9 3 Q 12 6 9 9 L 8 8 Q 10.5 6 8 4 L 9 3 z"})),Kt=Pt({title:"volume",type:"range",value:75,min:0,max:100,step:1,style:"width: 12vw; max-width: 100px; margin: 0 1px;"}),Qt=wt({width:12,height:12,viewBox:"0 0 12 12"},xt({cx:"5",cy:"5",r:"4.5","stroke-width":"1",stroke:"currentColor",fill:"none"}),Tt({stroke:"currentColor","stroke-width":"2",d:"M 8 8 L 11 11 M 5 2 L 5 8 M 2 5 L 8 5",fill:"none"})),_t=Ft({title:"zoom",style:"background: none; flex: 0 0 12px; margin: 0 3px; width: 12px; height: 12px; display: flex;"},Qt),Xt=wt({style:"min-width: 0; min-height: 0; touch-action: pan-y pinch-zoom;"}),Yt=It({style:`position: absolute; left: 0; top: 0; width: 2px; height: 100%; background: ${V.playhead}; pointer-events: none;`}),Zt=It({style:"display: flex; flex-grow: 1; flex-shrink: 1; position: relative;"},Xt,Yt),te=It({style:"display: flex; flex-grow: 1; flex-shrink: 1; height: 0; position: relative; align-items: center; overflow: hidden;"},Zt);function ee(t,e){try{localStorage.setItem(t,e)}catch(t){}}function ne(t){try{return localStorage.getItem(t)}catch(t){return null}}function se(t,e){Nt.setSong(t),Nt.snapToStart();const n=Nt.song.toBase64String();zt.href="../#"+n;const s=new URLSearchParams(e?location.hash.slice(1):"");s.set("song",n),location.hash=s.toString()}function ie(){let t=location.hash;if(Ot!=t&&""!=t){Ot=t,"#"==t.charAt(0)&&(t=t.substring(1)),Gt.href=location.href;for(const e of t.split("&")){let n=e.indexOf("=");if(-1!=n){let t=e.substring(0,n),s=e.substring(n+1);switch(t){case"song":se(s,!0);break;case"loop":Nt.loopRepeatCount="1"!=s?0:-1,be()}}else se(t,!1)}ye()}}document.body.appendChild(te),document.body.appendChild(It({style:"flex-shrink: 0; height: 20vh; min-height: 22px; max-height: 70px; display: flex; align-items: center;"},$t,Jt,Ht,Kt,_t,Et,zt,Vt,Wt,Gt));let re=null;function ae(){if(!Nt.playing)return void clearInterval(re);const t=ne("playerId");null!=t&&t!=Ct&&(he(),de(),clearInterval(re))}function oe(){Nt.playing&&(Lt=requestAnimationFrame(oe),de()),Bt!=Nt.playing&&Me()}function he(){null!=Nt.song&&(null!=Lt&&cancelAnimationFrame(Lt),Lt=null,Nt.playing?Nt.pause():(Nt.play(),ee("playerId",Ct),oe(),clearInterval(re),re=setInterval(ae,100))),Me()}function le(){-1==Nt.loopRepeatCount?Nt.loopRepeatCount=0:Nt.loopRepeatCount=-1,be()}function ce(t){jt&&(t.preventDefault(),pe(t.clientX||t.pageX))}function ue(t){pe(t.touches[0].clientX)}function pe(t){if(jt&&null!=Nt.song){const e=te.getBoundingClientRect();Nt.playhead=Nt.song.barCount*(t-e.left)/(e.right-e.left),de()}}function fe(){jt=!1}function me(){const t=+Kt.value;Nt.volume=Math.min(1,Math.pow(t/50,.5))*Math.pow(2,(t-75)/25)}function de(){if(null!=Nt.song){let t=Nt.playhead/Nt.song.barCount;Yt.style.left=Rt*t+"px";const e=te.getBoundingClientRect();te.scrollLeft=t*(Rt-e.width)}}function ye(){if(Xt.innerHTML="",null==Nt.song)return;const t=te.getBoundingClientRect();let n,s,i;if(At){n=t.height,s=Math.max(1,Math.min(e.pitchOctaves,Math.round(n/24))),i=12*s+1;const r=(n-1)/i,a=Math.max(8,4*r);Rt=Math.max(t.width,a*Nt.song.barCount*Nt.song.beatsPerBar)}else{Rt=t.width;const r=Math.max(1,Rt/(Nt.song.barCount*Nt.song.beatsPerBar)/3);n=Math.min(t.height,r*(e.maxPitch+1)+1),s=Math.max(3,Math.min(e.pitchOctaves,Math.round(n/(12*r)))),i=12*s+1}Zt.style.width=Rt+"px",Zt.style.height=n+"px",Xt.style.width=Rt+"px",Xt.style.height=n+"px";const r=Rt/Nt.song.barCount,a=r/(Nt.song.beatsPerBar*e.partsPerBeat),o=(n-1)/i,h=(n-1)/e.drumCount;for(let t=0;t<Nt.song.barCount+1;t++){const e=t==Nt.song.loopStart||t==Nt.song.loopStart+Nt.song.loopLength?V.loopAccent:V.uiWidgetBackground;Xt.appendChild(kt({x:t*r-1,y:0,width:2,height:n,fill:e}))}for(let t=0;t<=s;t++)Xt.appendChild(kt({x:0,y:12*t*o,width:Rt,height:o+1,fill:V.tonic,opacity:.75}));for(let t=Nt.song.channels.length-1;t>=0;t--){const i=Nt.song.getChannelIsNoise(t),l=i?h:o,c=Nt.song.channels[t].octave,u=Math.max(0,Math.min(e.pitchOctaves-s,Math.ceil(c-.5*s)))*l*12+n-.5*l-.5;for(let e=0;e<Nt.song.barCount;e++){const n=Nt.song.getPattern(t,e);if(null==n)continue;const s=e*r;for(let e=0;e<n.notes.length;e++){const r=n.notes[e];for(const e of r.pitches){const n=ve(e,r.start,r.pins,(l+1)/2,s,u,a,l),o=Tt({d:n,fill:V.getChannelColor(Nt.song,t).primaryChannel});i&&(o.style.opacity=String(.6)),Xt.appendChild(o)}}}}de()}function ve(t,n,s,i,r,a,o,h){let l=`M ${r+o*(n+s[0].time)} ${a-t*h+i*(s[0].size/e.noteSizeMax)} `;for(let c=0;c<s.length;c++){const u=s[c];l+=`L ${r+o*(n+u.time)} ${a-h*(t+u.interval)-i*(u.size/e.noteSizeMax)} `}for(let c=s.length-1;c>=0;c--){const u=s[c];l+=`L ${r+o*(n+u.time)} ${a-h*(t+u.interval)+i*(u.size/e.noteSizeMax)} `}return l}function Me(){Nt.playing?(qt.classList.remove("playButton"),qt.classList.add("pauseButton"),qt.title="Pause (Space)",qt.textContent="Pause"):(qt.classList.remove("pauseButton"),qt.classList.add("playButton"),qt.title="Play (Space)",qt.textContent="Play"),Bt=Nt.playing}function be(){Ut.setAttribute("fill",-1==Nt.loopRepeatCount?V.linkAccent:V.uiWidgetBackground)}function Se(){Qt.style.color=At?V.linkAccent:V.uiWidgetBackground}return top!==self?(Vt.style.display="none",Wt.style.display="none"):(Gt.style.display="none","share"in navigator||(Wt.style.display="none")),null!=ne("volume")&&(Kt.value=ne("volume")),me(),window.addEventListener("resize",(function(){ye()})),window.addEventListener("keydown",(function(t){switch(t.keyCode){case 32:he(),t.preventDefault();break;case 219:Nt.goToPrevBar(),de(),t.preventDefault();break;case 221:Nt.goToNextBar(),de(),t.preventDefault()}})),Xt.addEventListener("mousedown",(function(t){jt=!0,ce(t)})),window.addEventListener("mousemove",ce),window.addEventListener("mouseup",fe),Xt.addEventListener("touchstart",(function(t){jt=!0,ue(t)})),Xt.addEventListener("touchmove",ue),Xt.addEventListener("touchend",fe),Xt.addEventListener("touchcancel",fe),qt.addEventListener("click",he),Jt.addEventListener("click",le),Kt.addEventListener("input",(function(){ee("volume",Kt.value),me()})),_t.addEventListener("click",(function(){At=!At,Se(),ye()})),Vt.addEventListener("click",(function(){if(navigator.clipboard&&navigator.clipboard.writeText)return void navigator.clipboard.writeText(location.href).catch((()=>{window.prompt("Copy to clipboard:",location.href)}));const t=document.createElement("textarea");t.textContent=location.href,document.body.appendChild(t),t.select();const e=document.execCommand("copy");t.remove(),e||window.prompt("Copy this:",location.href)})),Wt.addEventListener("click",(function(){navigator.share({url:location.href})})),window.addEventListener("hashchange",ie),ie(),be(),Se(),Me(),le(),qt.dispatchEvent(new Event("click")),t.Channel=ft,t.Config=e,t.Instrument=pt,t.Note=nt,t.Pattern=st,t.Synth=St,Object.defineProperty(t,"U",{value:!0}),t}({});
//# sourceMappingURL=beepbox_player.min.js.map